<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>vm</title>
    <link href="/2023/09/05/vm/index/"/>
    <url>/2023/09/05/vm/index/</url>
    
    <content type="html"><![CDATA[<h1 id="虚拟机实训文档（一）"><a href="#虚拟机实训文档（一）" class="headerlink" title="虚拟机实训文档（一）"></a>虚拟机实训文档（一）</h1><h2 id="1-项目名称"><a href="#1-项目名称" class="headerlink" title="1 项目名称"></a>1 项目名称</h2><p>#######################</p><h2 id="2-时间"><a href="#2-时间" class="headerlink" title="2 时间"></a>2 时间</h2><p>#######################</p><h2 id="3-分组情况"><a href="#3-分组情况" class="headerlink" title="3 分组情况"></a>3 分组情况</h2><p>1人/组</p><h2 id="4-实验实训内容"><a href="#4-实验实训内容" class="headerlink" title="4 实验实训内容"></a>4 实验实训内容</h2><p>######################</p><h2 id="5-实验实训目的与要求"><a href="#5-实验实训目的与要求" class="headerlink" title="5 实验实训目的与要求"></a>5 实验实训目的与要求</h2><p>######################</p><h2 id="6-所用仪器设备-软件"><a href="#6-所用仪器设备-软件" class="headerlink" title="6 所用仪器设备/软件"></a>6 所用仪器设备/软件</h2><p>######################</p><h2 id="7-实验实训步骤"><a href="#7-实验实训步骤" class="headerlink" title="7 实验实训步骤"></a>7 实验实训步骤</h2><p>######################</p><h2 id="8-实验实训结果分析及体会"><a href="#8-实验实训结果分析及体会" class="headerlink" title="8 实验实训结果分析及体会"></a>8 实验实训结果分析及体会</h2><p>######################</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>programming_exercises</title>
    <link href="/2023/03/27/programming-exercises/index/"/>
    <url>/2023/03/27/programming-exercises/index/</url>
    
    <content type="html"><![CDATA[<h1 id="每日一题、提高自己的代码能力"><a href="#每日一题、提高自己的代码能力" class="headerlink" title="每日一题、提高自己的代码能力"></a>每日一题、提高自己的代码能力</h1><h2 id="一、语法入门"><a href="#一、语法入门" class="headerlink" title="一、语法入门"></a>一、语法入门</h2><h3 id="前置的一些知识"><a href="#前置的一些知识" class="headerlink" title="前置的一些知识"></a>前置的一些知识</h3><h4 id="1-C-的输入输出"><a href="#1-C-的输入输出" class="headerlink" title="1 C++的输入输出"></a>1 C++的输入输出<iostream></h4>  <figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs c++">使用的头文件<br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;iostream&gt;</span></span><br>输出格式如下：  <br>cout&lt;&lt;表达式<span class="hljs-number">1</span>&lt;&lt;表达式<span class="hljs-number">2</span>&lt;&lt;...; <br>输入格式如下：  <br>cin&gt;&gt;变量<span class="hljs-number">1</span>&gt;&gt;变量<span class="hljs-number">2</span>&gt;&gt;...;<br><br>例如输出hello word举例<br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;iostream&gt;</span> <span class="hljs-comment">//头文件</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std; <span class="hljs-comment">//命名空间</span><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    cout&lt;&lt;<span class="hljs-string">&quot;hello world&quot;</span>&lt;&lt;endl;<br>    <span class="hljs-comment">//输出，endl是换行</span><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>    <span class="hljs-comment">//返回0，表示程序运行中没有问题，正常结束</span><br>&#125;<br></code></pre></td></tr></table></figure><h3 id="（一）顺序结构习题"><a href="#（一）顺序结构习题" class="headerlink" title="（一）顺序结构习题"></a>（一）顺序结构习题</h3><p><a href="https://ac.nowcoder.com/acm/contest/18839">https://ac.nowcoder.com/acm/contest/18839</a></p><h4 id="1001-这是一道签到题"><a href="#1001-这是一道签到题" class="headerlink" title="1001-这是一道签到题"></a>1001-这是一道签到题</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span> <span class="hljs-params">()</span></span>&#123;<br>    cout&lt;&lt;<span class="hljs-string">&quot;zhe&quot;</span>&lt;&lt;endl;<br>    cout&lt;&lt;<span class="hljs-string">&quot;shi&quot;</span>&lt;&lt;endl;<br>    cout&lt;&lt;<span class="hljs-string">&quot;yi&quot;</span>&lt;&lt;endl;<br>    cout&lt;&lt;<span class="hljs-string">&quot;dao&quot;</span>&lt;&lt;endl;<br>    cout&lt;&lt;<span class="hljs-string">&quot;qian&quot;</span>&lt;&lt;endl;<br>    cout&lt;&lt;<span class="hljs-string">&quot;dao&quot;</span>&lt;&lt;endl;<br>    cout&lt;&lt;<span class="hljs-string">&quot;ti&quot;</span>&lt;&lt;endl;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="1002排列式"><a href="#1002排列式" class="headerlink" title="1002排列式"></a>1002排列式</h4><p><a href="https://ac.nowcoder.com/acm/problem/18929">https://ac.nowcoder.com/acm/problem/18929</a></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span> <span class="hljs-params">()</span></span>&#123;<br>    cout&lt;&lt;<span class="hljs-string">&quot;4396 = 28 x 157&quot;</span>&lt;&lt;endl;<br>    cout&lt;&lt;<span class="hljs-string">&quot;5346 = 18 x 297&quot;</span>&lt;&lt;endl;<br>    cout&lt;&lt;<span class="hljs-string">&quot;5346 = 27 x 198&quot;</span>&lt;&lt;endl;<br>    cout&lt;&lt;<span class="hljs-string">&quot;5796 = 12 x 483&quot;</span>&lt;&lt;endl;<br>    cout&lt;&lt;<span class="hljs-string">&quot;5796 = 42 x 138&quot;</span>&lt;&lt;endl;<br>    cout&lt;&lt;<span class="hljs-string">&quot;6952 = 4 x 1738&quot;</span>&lt;&lt;endl;<br>    cout&lt;&lt;<span class="hljs-string">&quot;7254 = 39 x 186&quot;</span>&lt;&lt;endl;<br>    cout&lt;&lt;<span class="hljs-string">&quot;7632 = 48 x 159&quot;</span>&lt;&lt;endl;<br>    cout&lt;&lt;<span class="hljs-string">&quot;7852 = 4 x 1963&quot;</span>&lt;&lt;endl;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="1003小飞机"><a href="#1003小飞机" class="headerlink" title="1003小飞机"></a>1003小飞机</h4><p><a href="https://ac.nowcoder.com/acm/problem/20750">https://ac.nowcoder.com/acm/problem/20750</a></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span> <span class="hljs-params">()</span></span>&#123;<br>    cout&lt;&lt;<span class="hljs-string">&quot;     **     &quot;</span>&lt;&lt;endl;<br>    cout&lt;&lt;<span class="hljs-string">&quot;     **     &quot;</span>&lt;&lt;endl;<br>    cout&lt;&lt;<span class="hljs-string">&quot;************&quot;</span>&lt;&lt;endl;<br>    cout&lt;&lt;<span class="hljs-string">&quot;************&quot;</span>&lt;&lt;endl;<br>    cout&lt;&lt;<span class="hljs-string">&quot;    *  *    &quot;</span>&lt;&lt;endl;<br>    cout&lt;&lt;<span class="hljs-string">&quot;    *  *    &quot;</span>&lt;&lt;endl;<br><br>&#125;<br></code></pre></td></tr></table></figure><h4 id="1004-学姐的”Helloworld-”"><a href="#1004-学姐的”Helloworld-”" class="headerlink" title="1004 学姐的”Helloworld!”"></a>1004 学姐的”Helloworld!”</h4><p><a href="https://ac.nowcoder.com/acm/problem/213204">https://ac.nowcoder.com/acm/problem/213204</a></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span> <span class="hljs-params">()</span></span>&#123;<br>    cout&lt;&lt;<span class="hljs-string">&quot;Helo word!&quot;</span>&lt;&lt;endl;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="1005-乘法表"><a href="#1005-乘法表" class="headerlink" title="1005 乘法表"></a>1005 乘法表</h4><p><a href="https://ac.nowcoder.com/acm/problem/22206">https://ac.nowcoder.com/acm/problem/22206</a></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span> <span class="hljs-params">()</span></span>&#123;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">1</span>;i&lt;<span class="hljs-number">10</span>;i++)&#123;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> j=<span class="hljs-number">1</span>;j&lt;=i;j++)&#123;<br>            <span class="hljs-keyword">if</span>(i*j&lt;<span class="hljs-number">10</span>)&#123;<br>               cout&lt;&lt;j&lt;&lt;<span class="hljs-string">&quot;*&quot;</span>&lt;&lt;i&lt;&lt;<span class="hljs-string">&quot;=&quot;</span>&lt;&lt;<span class="hljs-string">&quot; &quot;</span>&lt;&lt;i*j&lt;&lt;<span class="hljs-string">&quot; &quot;</span>; <br>            &#125;<span class="hljs-keyword">else</span>&#123;<br>               cout&lt;&lt;j&lt;&lt;<span class="hljs-string">&quot;*&quot;</span>&lt;&lt;i&lt;&lt;<span class="hljs-string">&quot;=&quot;</span>&lt;&lt;i*j&lt;&lt;<span class="hljs-string">&quot; &quot;</span>; <br>            &#125;<br>        &#125;<br>        cout&lt;&lt;endl;<br>    &#125;   <br>&#125;<br></code></pre></td></tr></table></figure><h4 id="1006-KiKi学程序设计基础"><a href="#1006-KiKi学程序设计基础" class="headerlink" title="1006 KiKi学程序设计基础"></a>1006 KiKi学程序设计基础</h4><p><a href="https://ac.nowcoder.com/acm/problem/201524">https://ac.nowcoder.com/acm/problem/201524</a></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br>    cout &lt;&lt; <span class="hljs-string">&quot;printf(\&quot;Hello world!\\n\&quot;);&quot;</span>&lt;&lt; endl;<br>    cout &lt;&lt;  <span class="hljs-string">&quot;cout &lt;&lt; \&quot;Hello world!\&quot; &lt;&lt; endl;&quot;</span> &lt;&lt; endl;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="1007-疫情死亡率"><a href="#1007-疫情死亡率" class="headerlink" title="1007 疫情死亡率"></a>1007 疫情死亡率</h4><p><a href="https://ac.nowcoder.com/acm/problem/214222">https://ac.nowcoder.com/acm/problem/214222</a> </p><p><strong><iomanip></strong></p><table><thead><tr><th><strong>流操作算子</strong></th><th><strong>作</strong> <strong>用</strong></th></tr></thead><tbody><tr><td>fixed</td><td>以普通小数形式输出浮点数</td></tr><tr><td>setprecision(n)</td><td>设置输出浮点数的精度为 n。在使用非 fixed 且非 scientific 方式输出的  情况下，n  即为有效数字最多的位数，如果有效数字位数超过 n，则小 数部分四舍五人，或自动变为科学计 数法输出并保留一共 n 位有效数  字。在使用 fixed 方式和 scientific 方式输出的情况下，n 是小数点后面  应保留的位数。</td></tr></tbody></table><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-comment">// 1 </span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;iomanip&gt;</span> </span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br>    <span class="hljs-type">double</span> a,b;<br>    cin&gt;&gt;a&gt;&gt;b;<br>    <span class="hljs-type">double</span> c=b*<span class="hljs-number">100</span>/a;<br>    cout&lt;&lt;fixed&lt;&lt;<span class="hljs-built_in">setprecision</span>(<span class="hljs-number">3</span>)&lt;&lt;c&lt;&lt;<span class="hljs-string">&quot;%&quot;</span>; <br>&#125;<br><br><span class="hljs-comment">//推荐下面这个写法2</span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br>    <span class="hljs-type">double</span> a,b;<br>    cin&gt;&gt;a&gt;&gt;b;<br>    <span class="hljs-type">double</span> c=b*<span class="hljs-number">100</span>/a;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%.3lf%%&quot;</span>,c);<br>&#125;<br><br></code></pre></td></tr></table></figure><h4 id="1008-爱因斯坦的名言"><a href="#1008-爱因斯坦的名言" class="headerlink" title="1008 爱因斯坦的名言"></a>1008 爱因斯坦的名言</h4><p><a href="https://ac.nowcoder.com/acm/problem/214605">https://ac.nowcoder.com/acm/problem/214605</a></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs c++"><br></code></pre></td></tr></table></figure><h4 id="1009-字符串输出1-0"><a href="#1009-字符串输出1-0" class="headerlink" title="1009 字符串输出1.0"></a>1009 字符串输出1.0</h4><p><a href="https://ac.nowcoder.com/acm/problem/216117">https://ac.nowcoder.com/acm/problem/216117</a></p><h4 id="1010-牛牛学说话之-整数"><a href="#1010-牛牛学说话之-整数" class="headerlink" title="1010 牛牛学说话之-整数"></a>1010 牛牛学说话之-整数</h4><p><a href="https://ac.nowcoder.com/acm/problem/21985">https://ac.nowcoder.com/acm/problem/21985</a></p><p>牛牛学说话之-浮点数    </p><p><a href="https://ac.nowcoder.com/acm/problem/21986">https://ac.nowcoder.com/acm/problem/21986</a></p><p>牛牛学加法    </p><p><a href="https://ac.nowcoder.com/acm/problem/21987">https://ac.nowcoder.com/acm/problem/21987</a></p><p>牛牛学除法    </p><p><a href="https://ac.nowcoder.com/acm/problem/21988">https://ac.nowcoder.com/acm/problem/21988</a></p><p>牛牛学取余    </p><p><a href="https://ac.nowcoder.com/acm/problem/21989">https://ac.nowcoder.com/acm/problem/21989</a></p><p>浮点除法    </p><p><a href="https://ac.nowcoder.com/acm/problem/21992">https://ac.nowcoder.com/acm/problem/21992</a></p><p>计算带余除法    </p><p><a href="https://ac.nowcoder.com/acm/problem/21453">https://ac.nowcoder.com/acm/problem/21453</a></p><p>K蝴蝶    </p><p><a href="https://ac.nowcoder.com/acm/problem/216116">https://ac.nowcoder.com/acm/problem/216116</a></p><p>水题再次来袭：明天星期几？</p><p><a href="https://ac.nowcoder.com/acm/problem/21310">https://ac.nowcoder.com/acm/problem/21310</a></p><p>开学？    </p><p><a href="https://ac.nowcoder.com/acm/problem/206668">https://ac.nowcoder.com/acm/problem/206668</a></p><p>helloworld    </p><p><a href="https://ac.nowcoder.com/acm/problem/212982">https://ac.nowcoder.com/acm/problem/212982</a></p><p>a+b    </p><p><a href="https://ac.nowcoder.com/acm/problem/212983">https://ac.nowcoder.com/acm/problem/212983</a></p><p>整数的个位    </p><p><a href="https://ac.nowcoder.com/acm/problem/21990">https://ac.nowcoder.com/acm/problem/21990</a></p><p>整数的十位    </p><p><a href="https://ac.nowcoder.com/acm/problem/21991">https://ac.nowcoder.com/acm/problem/21991</a></p><p>反向输出一个四位数    </p><p><a href="https://ac.nowcoder.com/acm/problem/21454">https://ac.nowcoder.com/acm/problem/21454</a></p><p>总成绩和平均分计算    </p><p><a href="https://ac.nowcoder.com/acm/problem/21459">https://ac.nowcoder.com/acm/problem/21459</a></p><p>计算平均成绩    </p><p><a href="https://ac.nowcoder.com/acm/problem/21586">https://ac.nowcoder.com/acm/problem/21586</a></p><p>牛牛学梯形    </p><p><a href="https://ac.nowcoder.com/acm/problem/21995">https://ac.nowcoder.com/acm/problem/21995</a></p><p>牛牛学矩形    </p><p><a href="https://ac.nowcoder.com/acm/problem/21998">https://ac.nowcoder.com/acm/problem/21998</a></p><p>牛牛学立体    </p><p><a href="https://ac.nowcoder.com/acm/problem/21999">https://ac.nowcoder.com/acm/problem/21999</a></p><p>计算三角形的周长和面积    </p><p><a href="https://ac.nowcoder.com/acm/problem/21461">https://ac.nowcoder.com/acm/problem/21461</a></p><p>你能活多少秒    </p><p><a href="https://ac.nowcoder.com/acm/problem/21457">https://ac.nowcoder.com/acm/problem/21457</a></p><p>时间转换    </p><p><a href="https://ac.nowcoder.com/acm/problem/21458">https://ac.nowcoder.com/acm/problem/21458</a></p><p>温度转换    </p><p><a href="https://ac.nowcoder.com/acm/problem/22004">https://ac.nowcoder.com/acm/problem/22004</a></p><p>计算机内存    </p><p><a href="https://ac.nowcoder.com/acm/problem/22005">https://ac.nowcoder.com/acm/problem/22005</a></p><p>[NOIP2017]成绩    </p><p><a href="https://ac.nowcoder.com/acm/problem/16421">https://ac.nowcoder.com/acm/problem/16421</a></p><p>KiKi的最高分    </p><p><a href="https://ac.nowcoder.com/acm/problem/201527">https://ac.nowcoder.com/acm/problem/201527</a></p><p>组队比赛    </p><p><a href="https://ac.nowcoder.com/acm/problem/205272">https://ac.nowcoder.com/acm/problem/205272</a></p><p>平方根    </p><p><a href="https://ac.nowcoder.com/acm/problem/22003">https://ac.nowcoder.com/acm/problem/22003</a></p><p>长方体    </p><p><a href="https://ac.nowcoder.com/acm/problem/15869">https://ac.nowcoder.com/acm/problem/15869</a></p><p>使徒袭来    </p><p><a href="https://ac.nowcoder.com/acm/problem/209794">https://ac.nowcoder.com/acm/problem/209794</a></p><p>白兔的分身术    </p><p><a href="https://ac.nowcoder.com/acm/problem/15250">https://ac.nowcoder.com/acm/problem/15250</a></p><p>纸牌    </p><p><a href="https://ac.nowcoder.com/acm/problem/18945">https://ac.nowcoder.com/acm/problem/18945</a></p><p>Tobaku Mokushiroku Kaiji    </p><p><a href="https://ac.nowcoder.com/acm/problem/19483">https://ac.nowcoder.com/acm/problem/19483</a></p><p>珂朵莉的假动态仙人掌    </p><p><a href="https://ac.nowcoder.com/acm/problem/14828">https://ac.nowcoder.com/acm/problem/14828</a></p><p>旅游观光    </p><p><a href="https://ac.nowcoder.com/acm/problem/14891">https://ac.nowcoder.com/acm/problem/14891</a></p><p>[NOIP2002]自由落体    </p><p><a href="https://ac.nowcoder.com/acm/problem/16740">https://ac.nowcoder.com/acm/problem/16740</a></p><p>挂科    </p><p><a href="https://ac.nowcoder.com/acm/problem/212995">https://ac.nowcoder.com/acm/problem/212995</a></p><p>得不到的爱情    </p><p><a href="https://ac.nowcoder.com/acm/problem/216071">https://ac.nowcoder.com/acm/problem/216071</a></p>]]></content>
    
    
    <categories>
      
      <category>C++</category>
      
    </categories>
    
    
    <tags>
      
      <tag>C</tag>
      
      <tag>C++</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>python_learn</title>
    <link href="/2023/03/22/python-learn/index/"/>
    <url>/2023/03/22/python-learn/index/</url>
    
    <content type="html"><![CDATA[<h2 id="Python应用开发技术"><a href="#Python应用开发技术" class="headerlink" title="Python应用开发技术"></a>Python应用开发技术</h2><h2 id="一、课程内容："><a href="#一、课程内容：" class="headerlink" title="一、课程内容："></a>一、课程内容：</h2><p>​    <strong>python代码规范（满足PEP8规范）：</strong></p><ul><li> 注释</li><li> 代码缩进</li><li>python入门编程103题范围(NP26有问题，只需输出反转后的列表)<ul><li><input disabled="" type="checkbox"> 基本输入输出(<font color="red">NP1-NP6</font>)</li><li><input disabled="" type="checkbox"> 类型转换(<font color="red">NP7-NP9</font>)</li><li><input disabled="" type="checkbox"> 字符串(<font color="red">NP10-NP15</font>)</li><li><input disabled="" type="checkbox"> 列表(<font color="red">NP16-NP31</font>)</li><li><input disabled="" type="checkbox"> 运算符(<font color="red">NP32-NP42</font>)</li><li><input disabled="" type="checkbox"> 条件语句(<font color="red">NP43-NP48</font>)</li><li><input disabled="" type="checkbox"> 循环语句(<font color="red">NP49-NP61</font>)</li><li><input disabled="" type="checkbox"> 元组(<font color="red">NP62-NP66</font>)</li><li><input disabled="" type="checkbox"> 字典(<font color="red">NP67-NP75</font>)</li><li><input disabled="" type="checkbox"> 内置函数(<font color="red">NP76-NP93</font>)</li><li><input disabled="" type="checkbox"> 面向对象(<font color="red">NP94-NP100</font>)</li><li><input disabled="" type="checkbox"> 正则表达式(<font color="red">NP101-NP103</font>)</li></ul></li></ul><hr><h3 id="（一）基础语法知识"><a href="#（一）基础语法知识" class="headerlink" title="（一）基础语法知识"></a>（一）基础语法知识</h3><h4 id="（1）编码规范"><a href="#（1）编码规范" class="headerlink" title="（1）编码规范"></a><strong><font color="red">（1）编码规范</font></strong></h4><h5 id="1、注释"><a href="#1、注释" class="headerlink" title="1、注释"></a><font color="blue">1、<strong>注释</strong></font></h5><ul><li>(a) 单行注释</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 这是一个单独成行的注释</span><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;Hello, World!&#x27;</span>)  <span class="hljs-comment"># 这是一个在代码后面的注释</span><br></code></pre></td></tr></table></figure><ul><li>（b） 多行注释</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 代码 2-2</span><br><span class="hljs-comment"># 这是一个使用# 号的多行注释</span><br><span class="hljs-comment"># 这是一个使用# 号的多行注释</span><br><span class="hljs-comment"># 这是一个使用# 号的多行注释</span><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;Hello, World!&#x27;</span>)<br><br><span class="hljs-comment"># 代码 2-3</span><br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br><span class="hljs-string">该多行注释使用的是3个单引号</span><br><span class="hljs-string">该多行注释使用的是3个单引号</span><br><span class="hljs-string">该多行注释使用的是3个单引号</span><br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;Hello, World!&#x27;</span>)<br><br><br><span class="hljs-comment"># 代码 2-4</span><br><span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">该多行注释使用的是3个双引号</span><br><span class="hljs-string">该多行注释使用的是3个双引号</span><br><span class="hljs-string">该多行注释使用的是3个双引号</span><br><span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;Hello, World!&#x27;</span>)<br><br></code></pre></td></tr></table></figure><h5 id="2、使用多行语句"><a href="#2、使用多行语句" class="headerlink" title="2、使用多行语句"></a><font color="blue">2、<strong>使用多行语句</strong></font></h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 代码 2-5</span><br><span class="hljs-comment"># 使用反斜杠（\）的多行一个语句</span><br>applePrice=<span class="hljs-string">&quot;pyt&quot;</span><br>bananaPrice=<span class="hljs-string">&quot;h&quot;</span><br>pearPrice=<span class="hljs-string">&quot;on&quot;</span><br>total = applePrice + \<br>      bananaPrice + \<br>      pearPrice<br><span class="hljs-built_in">print</span>(total)<br><br><span class="hljs-comment"># 代码 2-6</span><br><span class="hljs-comment"># []中的多行语句只需要回车即可</span><br>total = [applePrice,<br>      bananaPrice,<br>      pearPrice]<br><br><span class="hljs-comment"># 代码 2-7</span><br><span class="hljs-comment"># 使用分号（;）的一行多语句</span><br>applePrice = <span class="hljs-number">8</span>; bananaPrice = <span class="hljs-number">3.5</span>; pearPrice = <span class="hljs-number">5</span><br><br><span class="hljs-comment"># 圆括号把多行语句包括起来，表示是一条语句</span><br>number_sum=(<span class="hljs-number">1</span>+<span class="hljs-number">2</span>+<span class="hljs-number">3</span>+<span class="hljs-number">4</span>+<span class="hljs-number">5</span><br>       +<span class="hljs-number">6</span>+<span class="hljs-number">7</span>+<span class="hljs-number">8</span>+<span class="hljs-number">9</span>)<br></code></pre></td></tr></table></figure><h5 id="3、代码缩进"><a href="#3、代码缩进" class="headerlink" title="3、代码缩进"></a><font color="blue">3、<strong>代码缩进</strong></font></h5><p>关于代码缩进可以使用==空格==或==Tab==键来实现（建议使用空格），当使用空格实现缩进时，建议以4个空格作为一个缩进量</p><h4 id="（2）基础语法知识"><a href="#（2）基础语法知识" class="headerlink" title="（2）基础语法知识"></a><strong><font color="red">（2）基础语法知识</font></strong></h4><h5 id="1、关键字"><a href="#1、关键字" class="headerlink" title="1、关键字"></a><font color="blue">1、<strong>关键字</strong></font></h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> keyword<br><span class="hljs-built_in">print</span>(keyword.kwlist)<br>运行结果如下：<br>[<span class="hljs-string">&#x27;False&#x27;</span>, <span class="hljs-string">&#x27;None&#x27;</span>, <span class="hljs-string">&#x27;True&#x27;</span>, <span class="hljs-string">&#x27;__peg_parser__&#x27;</span>, <span class="hljs-string">&#x27;and&#x27;</span>, <span class="hljs-string">&#x27;as&#x27;</span>, <span class="hljs-string">&#x27;assert&#x27;</span>, <span class="hljs-string">&#x27;async&#x27;</span>, <span class="hljs-string">&#x27;await&#x27;</span>, <span class="hljs-string">&#x27;break&#x27;</span>, <span class="hljs-string">&#x27;class&#x27;</span>, <span class="hljs-string">&#x27;continue&#x27;</span>, <span class="hljs-string">&#x27;def&#x27;</span>, <span class="hljs-string">&#x27;del&#x27;</span>, <span class="hljs-string">&#x27;elif&#x27;</span>, <span class="hljs-string">&#x27;else&#x27;</span>, <span class="hljs-string">&#x27;except&#x27;</span>, <span class="hljs-string">&#x27;finally&#x27;</span>, <span class="hljs-string">&#x27;for&#x27;</span>, <span class="hljs-string">&#x27;from&#x27;</span>, <span class="hljs-string">&#x27;global&#x27;</span>, <span class="hljs-string">&#x27;if&#x27;</span>, <span class="hljs-string">&#x27;import&#x27;</span>, <span class="hljs-string">&#x27;in&#x27;</span>, <span class="hljs-string">&#x27;is&#x27;</span>, <span class="hljs-string">&#x27;lambda&#x27;</span>, <span class="hljs-string">&#x27;nonlocal&#x27;</span>, <span class="hljs-string">&#x27;not&#x27;</span>, <span class="hljs-string">&#x27;or&#x27;</span>, <span class="hljs-string">&#x27;pass&#x27;</span>, <span class="hljs-string">&#x27;raise&#x27;</span>, <span class="hljs-string">&#x27;return&#x27;</span>, <span class="hljs-string">&#x27;try&#x27;</span>, <span class="hljs-string">&#x27;while&#x27;</span>, <span class="hljs-string">&#x27;with&#x27;</span>, <span class="hljs-string">&#x27;yield&#x27;</span>]<br></code></pre></td></tr></table></figure><p>python关键字==区分字母大小写==，例如，if是关键字，但IF就不属于关键字</p><h5 id="2、标识符"><a href="#2、标识符" class="headerlink" title="2、标识符"></a><font color="blue">2、<strong>标识符</strong></font></h5><blockquote><p>(1)一个标识符可以由<strong>几个单词</strong>连接而成，以表明它的意思</p><p>(2)标识符由一个或多个字母、数字、下划线构成，且第1个字符不能是数字，<strong>没有长度限制</strong></p><p>(3)标识符<strong>不能是关键字</strong></p><p>(4)标识符中字母<strong>严格区分大小写</strong></p><p>(5)不能含空格、@、%和$<strong>特殊字</strong>符</p><p>(6)避免标识符开头和结尾都使用<strong>下划线</strong>，Python中大量采用这种名字定义特殊方法和变量</p></blockquote><h5 id="3、变量"><a href="#3、变量" class="headerlink" title="3、变量"></a><font color="blue">3、<strong>变量</strong></font></h5><blockquote><blockquote><p>变量：程序运行过程中值可以被改变的量</p></blockquote><blockquote><p>常量：程序运行过程中值不能改变的量；在PEP8规范中定义常量的命名规范，常量由<strong>大写字母和下划线（_）</strong>组成;实际应用中，常量首次被赋值后，其值还可被其他代码<strong>修改</strong></p></blockquote><blockquote><p><strong>变量名必须是一个有效的标识符</strong></p></blockquote><blockquote><p><strong>变量名不能使用Python中的关键字</strong></p></blockquote><blockquote><p><strong>应选择有意义的单词作为变量名</strong></p></blockquote><blockquote><p><strong>不需要类型声明</strong> :使用前必须赋值</p></blockquote><blockquote><p><strong>需要使用等号</strong>（=）</p></blockquote></blockquote><h5 id="4、数据类型"><a href="#4、数据类型" class="headerlink" title="4、数据类型"></a><font color="blue">4、数据类型</font></h5><p><img src="/img/python_1.png" srcset="/img/loading.gif" lazyload alt="python_1"></p><h6 id="a、常用的转义字符"><a href="#a、常用的转义字符" class="headerlink" title="a、常用的转义字符"></a><strong>a、常用的转义字符</strong></h6><table>    <tr>        <td>转义字符</td>        <td>含义</td>    </tr>    <tr>        <td>\n</td>        <td>换行符</td>    </tr>    <tr>        <td>\r</td>        <td>回车</td>    </tr>    <tr>        <td>\t</td>        <td>制表符</td>    </tr>    <tr>        <td>\\</td>        <td>一个反斜杠\</td>    </tr>    <tr>        <td>\'</td>        <td>单引号</td>    </tr>    <tr>        <td>\"</td>        <td>双引号</td>    </tr></table><h6 id="b、数据类型转换（常用）"><a href="#b、数据类型转换（常用）" class="headerlink" title="b、数据类型转换（常用）"></a><strong>b、数据类型转换（常用）</strong></h6><table>    <tr>        <td>函数</td>        <td>作用</td>    </tr>    <tr>        <td>int(x)</td>        <td>将x转换成整数类型</td>    </tr>    <tr>        <td>float(x)</td>        <td>将x转换成浮点数类型</td>    </tr>       <tr>        <td>str(x)</td>        <td>将x转换成字符串类型</td>    </tr>        <tr>        <td>chr(x)</td>        <td>将整数x转换成一个字符</td>    </tr>        <tr>        <td>ord(x)</td>        <td>将一个字符x转换成对应的整数值</td>    </tr>    </tr>        <tr>        <td>bin(x)</td>        <td>将整数转换成二进制</td>    </tr>     </tr>        <tr>        <td>oct(x)</td>        <td>将整数转换成八进制</td>    </tr> </tr>        <tr>        <td>hex(x)</td>        <td>将整数转换成十六进制</td>    </tr> </tr>        <tr>        <td>eval(x)</td>        <td>用来计算字符串的值</td>    </tr></table><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># int()用法</span><br><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">int</span>(<span class="hljs-number">3.14</span>)<span class="hljs-comment"># 获取实数的整数部分</span><br><span class="hljs-number">3</span><br><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">int</span>(<span class="hljs-string">&#x27;111&#x27;</span>, <span class="hljs-number">2</span>)<span class="hljs-comment"># 把二进制数转换为十进制数</span><br><span class="hljs-number">7</span><br><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">int</span>(<span class="hljs-string">&#x27;1111&#x27;</span>, <span class="hljs-number">8</span>)<span class="hljs-comment"># 把八进制数转换为十进制数</span><br><span class="hljs-number">585</span><br><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">int</span>(<span class="hljs-string">&#x27;1234&#x27;</span>, <span class="hljs-number">16</span>)<span class="hljs-comment"># 把十六进制数转换为十进制数</span><br><span class="hljs-number">4660</span><br><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">int</span>(<span class="hljs-string">&#x27;0o1234&#x27;</span>, <span class="hljs-number">0</span>)<span class="hljs-comment"># 0表示使用字符串明确表示的进制，例如0o表示八进制</span><br><span class="hljs-number">668</span><br><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">int</span>(<span class="hljs-string">&#x27;   345\n\t&#x27;</span>)<span class="hljs-comment"># 自动忽略两侧的空白字符</span><br><span class="hljs-number">345</span><br><br><span class="hljs-comment"># eval()用法</span><br><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">eval</span>(<span class="hljs-string">&#x27;3+5&#x27;</span>)<br><span class="hljs-number">8</span><br><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">eval</span>(<span class="hljs-string">&#x27;9&#x27;</span>)                  <span class="hljs-comment"># 把数字字符串转换为数字</span><br><span class="hljs-number">9</span><br><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">eval</span>(<span class="hljs-string">&#x27;09&#x27;</span>)                 <span class="hljs-comment"># 抛出异常，不允许以0开头的数字</span><br>SyntaxError: invalid token<br><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">int</span>(<span class="hljs-string">&#x27;09&#x27;</span>)                  <span class="hljs-comment"># 这样转换是可以的</span><br><span class="hljs-number">9</span><br><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">list</span>(<span class="hljs-built_in">str</span>([<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>]))    <span class="hljs-comment"># 字符串中每个字符都变为列表中的元素</span><br>[<span class="hljs-string">&#x27;[&#x27;</span>, <span class="hljs-string">&#x27;1&#x27;</span>, <span class="hljs-string">&#x27;,&#x27;</span>, <span class="hljs-string">&#x27; &#x27;</span>, <span class="hljs-string">&#x27;2&#x27;</span>, <span class="hljs-string">&#x27;,&#x27;</span>, <span class="hljs-string">&#x27; &#x27;</span>, <span class="hljs-string">&#x27;3&#x27;</span>, <span class="hljs-string">&#x27;,&#x27;</span>, <span class="hljs-string">&#x27; &#x27;</span>, <span class="hljs-string">&#x27;4&#x27;</span>, <span class="hljs-string">&#x27;]&#x27;</span>]<br><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">eval</span>(<span class="hljs-built_in">str</span>([<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>]))    <span class="hljs-comment"># 字符串求值</span><br>[<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>]<br><br></code></pre></td></tr></table></figure><h5 id="5、基本输入输出"><a href="#5、基本输入输出" class="headerlink" title="5、基本输入输出"></a><font color="blue">5、<strong>基本输入输出</strong></font></h5><h6 id="a、input-函数"><a href="#a、input-函数" class="headerlink" title="a、input()函数"></a>a、input()函数</h6><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs python">一般用法：<br>x=<span class="hljs-built_in">input</span>(<span class="hljs-string">&quot;提示文字&quot;</span>)<br><br>接收数值用法：<br>value=<span class="hljs-built_in">int</span>(<span class="hljs-built_in">input</span>())<br></code></pre></td></tr></table></figure><h6 id="b、print-函数"><a href="#b、print-函数" class="headerlink" title="b、print()函数"></a>b、print()函数</h6><p>b1、基本用法</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs python">(<span class="hljs-number">1</span>)基本语法格式<br><span class="hljs-built_in">print</span>(输出内容)<br><br>(<span class="hljs-number">2</span>)默认换行；实现不换行代码如下：<br><span class="hljs-built_in">print</span>(输出内容,end=<span class="hljs-string">&#x27;&#x27;</span>)<br><br>(<span class="hljs-number">3</span>)输出可以重定向，代码也可输出到指定文件如下<br>fp=<span class="hljs-built_in">open</span>(<span class="hljs-string">r&#x27;目录&#x27;</span>,<span class="hljs-string">&#x27;a+&#x27;</span>)<br><span class="hljs-built_in">print</span>(输出内容,file=fp)<br>fp.close()<br></code></pre></td></tr></table></figure><p>b2、使用%进行格式化输出</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs python">(<span class="hljs-number">1</span>)整数输出<br>%d 十进制<br>%o 八进制<br>%x 十六进制<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;%d&#x27;</span> % <span class="hljs-number">30</span>)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;%o&#x27;</span> % <span class="hljs-number">30</span>)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;%x&#x27;</span> % <span class="hljs-number">30</span>)<br><br>(<span class="hljs-number">2</span>)浮点数<br>%f 保留小数点后<span class="hljs-number">6</span>位有效数字，如果是%<span class="hljs-number">3.</span>f则是保留<span class="hljs-number">3</span>位小数<br>%e 保留小数点后<span class="hljs-number">6</span>位有效数字,按指数形式输出，如果是%<span class="hljs-number">3.</span>e则是保留<span class="hljs-number">3</span>位小数,使用科学记数法<br>%g 如果有<span class="hljs-number">6</span>位有效数字，则使用小数方式，否则使用科学记数法；如果是%<span class="hljs-number">3.</span>g,则保留<span class="hljs-number">3</span>位有效数字，使用小数形式或者科学记数法<br><br>(<span class="hljs-number">3</span>)字符串的输出<br>%s 字符串输出<br>%10s 右对齐，占位符<span class="hljs-number">10</span>位<br>%-10s 左对齐，占位符<span class="hljs-number">10</span>位<br>%<span class="hljs-number">.2</span>s 截取<span class="hljs-number">2</span>位字符串<br>%<span class="hljs-number">10.2</span>s <span class="hljs-number">10</span>是占位符，截取<span class="hljs-number">2</span>位字符串<br></code></pre></td></tr></table></figure><p>b3、使用“f-字符串”进行格式化输出</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs python">基本格式：<br><span class="hljs-built_in">print</span>(<span class="hljs-string">f&#x27;<span class="hljs-subst">&#123;表达式&#125;</span>&#x27;</span>)<br><br>例如：<br>name=<span class="hljs-string">&#x27;a&#x27;</span><br>age=<span class="hljs-number">1</span><br><span class="hljs-built_in">print</span>(<span class="hljs-string">f&#x27;姓名：<span class="hljs-subst">&#123;name&#125;</span>，年龄：<span class="hljs-subst">&#123;age&#125;</span>&#x27;</span>)<br></code></pre></td></tr></table></figure><p>b4、使用format()函数进行格式化输出</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs python">不带编号的“&#123;&#125;”。<br>带数字编号，可以调换显示的顺序，如“&#123;<span class="hljs-number">1</span>&#125;”“&#123;<span class="hljs-number">2</span>&#125;”。<br>带关键字，如“&#123;key&#125;”“&#123;value&#125;”。<br>下面是具体实例：<br><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;&#123;&#125; &#123;&#125;&#x27;</span>.<span class="hljs-built_in">format</span>(<span class="hljs-string">&#x27;hello&#x27;</span>,<span class="hljs-string">&#x27;world&#x27;</span>))  <span class="hljs-comment"># 不带字段</span><br>hello world<br><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;&#123;0&#125; &#123;1&#125;&#x27;</span>.<span class="hljs-built_in">format</span>(<span class="hljs-string">&#x27;hello&#x27;</span>,<span class="hljs-string">&#x27;world&#x27;</span>))  <span class="hljs-comment"># 带数字编号</span><br>hello world<br><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;&#123;0&#125; &#123;1&#125; &#123;0&#125;&#x27;</span>.<span class="hljs-built_in">format</span>(<span class="hljs-string">&#x27;hello&#x27;</span>,<span class="hljs-string">&#x27;world&#x27;</span>))  <span class="hljs-comment"># 打乱顺序</span><br>hello world hello<br><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;&#123;1&#125; &#123;1&#125; &#123;0&#125;&#x27;</span>.<span class="hljs-built_in">format</span>(<span class="hljs-string">&#x27;hello&#x27;</span>,<span class="hljs-string">&#x27;world&#x27;</span>))  <span class="hljs-comment"># 打乱顺序</span><br>world world hello<br><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;&#123;a&#125; &#123;b&#125; &#123;a&#125;&#x27;</span>.<span class="hljs-built_in">format</span>(b=<span class="hljs-string">&#x27;hello&#x27;</span>,a=<span class="hljs-string">&#x27;world&#x27;</span>))  <span class="hljs-comment"># 带关键字</span><br>world hello world<br><br></code></pre></td></tr></table></figure><h5 id="6、运算符和表达式"><a href="#6、运算符和表达式" class="headerlink" title="6、运算符和表达式"></a><font color="blue">6、<strong>运算符和表达式</strong></font></h5><h6 id="a、算术运算符和表达式"><a href="#a、算术运算符和表达式" class="headerlink" title="a、算术运算符和表达式"></a>a、算术运算符和表达式</h6><table><thead><tr><th><strong>运算符</strong></th><th><strong>说明</strong></th><th><strong>表达式</strong></th></tr></thead><tbody><tr><td>+</td><td>加（两个对象相加）</td><td>4+5（结果是9）</td></tr><tr><td>-</td><td>减（得到负数，或是一个数减去另一个数）</td><td>7-10（结果是-3）</td></tr><tr><td>*</td><td>乘（两个数相乘，或是返回一个被重复若干次的字符串）</td><td>4*5（结果是20）</td></tr><tr><td>/</td><td>除（x除以y）</td><td>10/4（结果是2.5）</td></tr><tr><td>%</td><td>取模（返回除法的余数）</td><td>10%4（结果是2）</td></tr><tr><td>**</td><td>幂（返回x的y次幂）</td><td>10**2（结果是100）</td></tr><tr><td>//</td><td>取整除（返回商的整数部分）</td><td>10//4（结果是2）</td></tr></tbody></table><h6 id="b、赋值运算符和表达式"><a href="#b、赋值运算符和表达式" class="headerlink" title="b、赋值运算符和表达式"></a>b、赋值运算符和表达式</h6><table><thead><tr><th><strong>运算符</strong></th><th><strong>说明</strong></th><th><strong>表达式</strong></th><th><strong>等价形式</strong></th></tr></thead><tbody><tr><td>=</td><td>简单的赋值运算</td><td>a=b</td><td>a=b</td></tr><tr><td>+=</td><td>加赋值</td><td>a+=b</td><td>a=a+b</td></tr><tr><td>-=</td><td>减赋值</td><td>a-=b</td><td>a=a-b</td></tr><tr><td>*=</td><td>乘赋值</td><td>a*=b</td><td>a=a*b</td></tr><tr><td>/=</td><td>除赋值</td><td>a/=b</td><td>a=a/b</td></tr><tr><td>%=</td><td>取余数赋值</td><td>a%=b</td><td>a=a%b</td></tr><tr><td>**=</td><td>幂赋值</td><td>a**=b</td><td>a=a**b</td></tr><tr><td>//=</td><td>取整除赋值</td><td>a//=b</td><td>a=a//b</td></tr><tr><td>:=  (3.8版本)</td><td>海象运算符，可在表达式内部为变量赋值,但不能直接用于赋值语句</td><td></td><td></td></tr></tbody></table><p>==:=用法==</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-meta">&gt;&gt;&gt; </span>num_int = <span class="hljs-built_in">int</span>(num_str:=<span class="hljs-built_in">input</span>(<span class="hljs-string">&#x27;输入一个整数：&#x27;</span>))<br>输入一个整数：<span class="hljs-number">345</span><br><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">type</span>(num_str)<br>&lt;<span class="hljs-keyword">class</span> <span class="hljs-string">&#x27;str&#x27;</span>&gt;<br><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">type</span>(num_int)<br>&lt;<span class="hljs-keyword">class</span> <span class="hljs-string">&#x27;int&#x27;</span>&gt;<br><span class="hljs-meta">&gt;&gt;&gt; </span>data = []<br><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">while</span> (line:=<span class="hljs-built_in">input</span>(<span class="hljs-string">&#x27;输入任意内容（q表示结束）：&#x27;</span>)) != <span class="hljs-string">&#x27;q&#x27;</span>:<br>    data.append(line)<br><br>输入任意内容（q表示结束）：abc<br>输入任意内容（q表示结束）：<span class="hljs-number">123456</span><br>输入任意内容（q表示结束）：q<br><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">print</span>(data)<br>[<span class="hljs-string">&#x27;abc&#x27;</span>, <span class="hljs-string">&#x27;123456&#x27;</span>]<br><br></code></pre></td></tr></table></figure><h6 id="c、比较-关系-运算符和表达式"><a href="#c、比较-关系-运算符和表达式" class="headerlink" title="c、比较(关系)运算符和表达式"></a>c、比较(关系)运算符和表达式</h6><table><thead><tr><th><strong>运算符</strong></th><th><strong>说明</strong></th><th><strong>表达式</strong></th></tr></thead><tbody><tr><td>&gt;</td><td>大于</td><td>4&gt;5（结果为False）</td></tr><tr><td>&lt;</td><td>小于</td><td>4&lt;5（结果为True）</td></tr><tr><td>==</td><td>等于</td><td>4==5（结果为False）</td></tr><tr><td>!=</td><td>不等于</td><td>4!=5（结果为True）</td></tr><tr><td>&gt;=</td><td>大于等于</td><td>5&gt;=4（结果为True）</td></tr><tr><td>&lt;=</td><td>小于等于</td><td>4&lt;=5（结果为True）</td></tr></tbody></table><h6 id="d、逻辑运算符和表达式"><a href="#d、逻辑运算符和表达式" class="headerlink" title="d、逻辑运算符和表达式"></a>d、逻辑运算符和表达式</h6><table><thead><tr><th><strong>运算符</strong></th><th><strong>说明</strong></th><th><strong>表达式</strong></th></tr></thead><tbody><tr><td>and</td><td>逻辑与</td><td>exp1  and exp2</td></tr><tr><td>or</td><td>逻辑或</td><td>exp1  or exp2</td></tr><tr><td>not</td><td>逻辑非</td><td>not  exp</td></tr></tbody></table><table><thead><tr><th><strong>表达式1</strong></th><th><strong>表达式2</strong></th><th><strong>表达式1and表达式2</strong></th><th><strong>表达式1or表达式2</strong></th><th><strong>not 表达式1</strong></th></tr></thead><tbody><tr><td>True</td><td>True</td><td>True</td><td>True</td><td>False</td></tr><tr><td>True</td><td>False</td><td>False</td><td>True</td><td>False</td></tr><tr><td>False</td><td>False</td><td>False</td><td>False</td><td>True</td></tr><tr><td>False</td><td>True</td><td>False</td><td>True</td><td>True</td></tr></tbody></table><h6 id="e、成员测试运算符"><a href="#e、成员测试运算符" class="headerlink" title="e、成员测试运算符"></a>e、成员测试运算符</h6><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python"><br></code></pre></td></tr></table></figure><h6 id="f、位运算符"><a href="#f、位运算符" class="headerlink" title="f、位运算符"></a>f、位运算符</h6><table><thead><tr><th align="left">运算符</th><th align="left">描述</th><th align="left">实例</th></tr></thead><tbody><tr><td align="left">&amp;</td><td align="left">按位与运算符：参与运算的两个值,如果两个相应位都为1,则该位的结果为1,否则为0</td><td align="left">(a &amp; b) 输出结果 12 ，二进制解释： 0000 1100</td></tr><tr><td align="left">|</td><td align="left">按位或运算符：只要对应的二个二进位有一个为1时，结果位就为1。</td><td align="left">(a | b) 输出结果 61 ，二进制解释： 0011 1101</td></tr><tr><td align="left">^</td><td align="left">按位异或运算符：当两对应的二进位相异时，结果为1</td><td align="left">(a ^ b) 输出结果 49 ，二进制解释： 0011 0001</td></tr><tr><td align="left">~</td><td align="left">按位取反运算符：对数据的每个二进制位取反,即把1变为0,把0变为1。**~x** 类似于 <strong>-x-1</strong></td><td align="left">(~a ) 输出结果 -61 ，二进制解释： 1100 0011， 在一个有符号二进制数的补码形式。</td></tr><tr><td align="left">&lt;&lt;</td><td align="left">左移动运算符：运算数的各二进位全部左移若干位，由”&lt;&lt;”右边的数指定移动的位数，高位丢弃，低位补0。</td><td align="left">a &lt;&lt; 2 输出结果 240 ，二进制解释： 1111 0000</td></tr><tr><td align="left">&gt;&gt;</td><td align="left">右移动运算符：把”&gt;&gt;”左边的运算数的各二进位全部右移若干位，”&gt;&gt;”右边的数指定移动的位数</td><td align="left">a &gt;&gt; 2 输出结果 15 ，二进制解释： 0000 1111</td></tr></tbody></table><h6 id="g、运算符优先级与结合性"><a href="#g、运算符优先级与结合性" class="headerlink" title="g、运算符优先级与结合性"></a>g、运算符优先级与结合性</h6><p>大部分运算具有左结合性;</p><p>只有==乘方运算符（**）、单目运算符（例如not）、赋值运算符和三目运算符==例外，它们具有右结合性，也就是从右向左执行</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs python">三目(元)运算符：（c、java）<br>布尔表达式?表达式<span class="hljs-number">1</span>:表达式<span class="hljs-number">2</span><br><br>python中<br>[statement_1] <span class="hljs-keyword">if</span> [expression] <span class="hljs-keyword">else</span> [statement_2]<br>a, b = <span class="hljs-number">2</span>, <span class="hljs-number">5</span><br><br><span class="hljs-comment"># 得到a,b的最大值</span><br><span class="hljs-built_in">max</span> = a <span class="hljs-keyword">if</span> a &gt; b <span class="hljs-keyword">else</span> b <br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">max</span>) <span class="hljs-comment"># 5;运行程序,由于 a&gt; b 返回 False，因此选择了 b。</span><br><br></code></pre></td></tr></table></figure><table><thead><tr><th><strong>运算符</strong></th><th><strong>说明</strong></th><th><strong>结合性</strong></th><th><strong>优先级</strong></th></tr></thead><tbody><tr><td>()</td><td>小括号</td><td>无</td><td>高</td></tr><tr><td>**</td><td>幂</td><td>右</td><td></td></tr><tr><td>+（正号）、-（负号）</td><td>符号运算符</td><td>右</td><td></td></tr><tr><td>*、/、//、%</td><td>乘除</td><td>左</td><td></td></tr><tr><td>+、-</td><td>加减</td><td>左</td><td></td></tr><tr><td>==、!=、&gt;、&gt;=、&lt;、&lt;=</td><td>比较运算符</td><td>左</td><td></td></tr><tr><td>not</td><td>逻辑非</td><td>右</td><td></td></tr><tr><td>and</td><td>逻辑与</td><td>左</td><td></td></tr><tr><td>or</td><td>逻辑或</td><td>左</td><td>低</td></tr></tbody></table><h4 id="（3）实训任务"><a href="#（3）实训任务" class="headerlink" title="（3）实训任务"></a><strong><font color="red">（3）实训任务</font></strong></h4><h5 id="1、实训任务1"><a href="#1、实训任务1" class="headerlink" title="1、实训任务1"></a><font color="blue">1、<strong>实训任务1</strong></font></h5><blockquote><p>（1）创建一个字符串变量”Apple’s unit price is 9 yuan.”</p><p>（2）提去出里面的数字9并赋值给新的变量</p><p>（3）查看新变量的数据类型</p><p>（4）将提取的数字类型9转换成整形（<strong>int</strong>)</p><p>（5）确认数据类型是否转换成功。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs python">&gt;参考代码：<br>&gt;applePriceStr=<span class="hljs-string">&#x27;Apple\&#x27;s unit price is 9 yuan.&#x27;</span><br>&gt;applePrice=applePriceStr[<span class="hljs-number">22</span>]<br>&gt;<span class="hljs-built_in">print</span>(applePrice,<span class="hljs-built_in">type</span>(applePrice))<br>&gt;applePrice=<span class="hljs-built_in">int</span>(applePrice)<br>&gt;<span class="hljs-built_in">print</span>(<span class="hljs-built_in">type</span>(applePrice))<br></code></pre></td></tr></table></figure></blockquote><hr><h5 id="2、实训任务2"><a href="#2、实训任务2" class="headerlink" title="2、实训任务2"></a><font color="blue">2、<strong>实训任务2</strong></font></h5><blockquote><p>设计一个小程序，运用本节介绍的操作运算符实现输入、输出圆形的基本参数</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs python">&gt;参考代码<br>&gt;<span class="hljs-string">&#x27;&#x27;&#x27;</span><br><span class="hljs-string">&gt;根据输入计算圆形的其它参数</span><br><span class="hljs-string">&gt;关于圆形的相关计算公式参考正文</span><br><span class="hljs-string">&gt;&#x27;&#x27;&#x27;</span><br>&gt;pi = <span class="hljs-number">3.14</span>  <span class="hljs-comment"># 设置常量</span><br>&gt;<span class="hljs-comment"># 输入半径，求周长、面积</span><br>&gt;r = <span class="hljs-number">3</span>  <span class="hljs-comment"># 输入圆形的半径</span><br>&gt;C = <span class="hljs-number">2</span> * pi * r  <span class="hljs-comment"># 计算圆形的周长</span><br>&gt;S = pi * r ** <span class="hljs-number">2</span>  <span class="hljs-comment"># 计算圆形的面积</span><br>&gt;<span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;半径为&#x27;</span>, r, <span class="hljs-string">&#x27;的圆形，其周长等于&#x27;</span>, C, <span class="hljs-string">&#x27;；面积等于&#x27;</span>, S, <span class="hljs-string">&#x27;。&#x27;</span>)<br><br>&gt;<span class="hljs-comment"># 输入周长，求半径、面积</span><br>&gt;C = <span class="hljs-number">5</span>  <span class="hljs-comment"># 输入圆形的周长</span><br>&gt;r = C / (<span class="hljs-number">2</span> * pi)  <span class="hljs-comment"># 计算圆形的半径</span><br>&gt;S = pi * r ** <span class="hljs-number">2</span>  <span class="hljs-comment"># 计算圆形的面积</span><br>&gt;<span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;周长为&#x27;</span> + <span class="hljs-built_in">str</span>(C) + <span class="hljs-string">&#x27;的圆形，其半径为&#x27;</span> + <span class="hljs-built_in">str</span>(r) + <span class="hljs-string">&#x27;；面积等于&#x27;</span> + <span class="hljs-built_in">str</span>(S)<br>   + <span class="hljs-string">&#x27;。&#x27;</span>)<br><br>&gt;<span class="hljs-comment"># 输入面积，求半径、周长</span><br>&gt;S = <span class="hljs-number">5</span>  <span class="hljs-comment"># 输入圆形的面积</span><br>&gt;r = <span class="hljs-built_in">round</span>((S / pi) ** <span class="hljs-number">0.5</span>, <span class="hljs-number">2</span>)  <span class="hljs-comment"># 计算圆形的半径，并保留两位小数</span><br>&gt;C = <span class="hljs-built_in">round</span>(<span class="hljs-number">2</span> * pi * r, <span class="hljs-number">2</span>)  <span class="hljs-comment"># 计算圆形的周长，并保留两位小数</span><br>&gt;str_print = <span class="hljs-string">&#x27;面积为&#x27;</span> + <span class="hljs-built_in">str</span>(S) + <span class="hljs-string">&#x27;的圆形，其半径为&#x27;</span> + <span class="hljs-built_in">str</span>(r) + <span class="hljs-string">&#x27;；周长等于&#x27;</span> \<br>         + <span class="hljs-built_in">str</span>(C) + <span class="hljs-string">&#x27;。&#x27;</span><br>&gt;<span class="hljs-built_in">print</span>(str_print)<br></code></pre></td></tr></table></figure></blockquote><h5 id="3、实训任务3"><a href="#3、实训任务3" class="headerlink" title="3、实训任务3"></a><font color="blue">3、<strong>实训任务3</strong></font></h5><blockquote><p>（若课上前2个任务完成，就接着做实训任务3；若没完成则课下完成）</p><p>完成牛客网题python入门103题的</p><ul><li>基本输入输出(<font color="red">NP1-NP6</font>)</li><li>类型转换(<font color="red">NP7-NP9</font>)</li></ul></blockquote><h4 id=""><a href="#" class="headerlink" title=""></a></h4><h3 id="（二）流程控制语句"><a href="#（二）流程控制语句" class="headerlink" title="（二）流程控制语句"></a>（二）流程控制语句</h3><h4 id="（1）选择结构"><a href="#（1）选择结构" class="headerlink" title="（1）选择结构"></a><strong><font color="red">（1）选择结构</font></strong></h4><p><img src="https://static.runoob.com/images/mix/python-if.webp" srcset="/img/loading.gif" lazyload alt="img"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 多分支</span><br><span class="hljs-keyword">if</span> condition_1:<br>    statement_block_1<br><span class="hljs-keyword">elif</span> condition_2:<br>    statement_block_2<br><span class="hljs-keyword">else</span>:<br>    statement_block_3<br><br><span class="hljs-comment"># 说明如下：</span><br>如果 <span class="hljs-string">&quot;condition_1&quot;</span> 为 <span class="hljs-literal">True</span> 将执行 <span class="hljs-string">&quot;statement_block_1&quot;</span> 块语句<br>如果 <span class="hljs-string">&quot;condition_1&quot;</span> 为<span class="hljs-literal">False</span>，将判断 <span class="hljs-string">&quot;condition_2&quot;</span><br>如果<span class="hljs-string">&quot;condition_2&quot;</span> 为 <span class="hljs-literal">True</span> 将执行 <span class="hljs-string">&quot;statement_block_2&quot;</span> 块语句<br>如果 <span class="hljs-string">&quot;condition_2&quot;</span> 为<span class="hljs-literal">False</span>，将执行<span class="hljs-string">&quot;statement_block_3&quot;</span>块语句<br><br><span class="hljs-comment"># 注意如下：</span><br><span class="hljs-number">1</span>、每个条件后面要使用冒号 :，表示接下来是满足条件后要执行的语句块。<br><span class="hljs-number">2</span>、使用缩进来划分语句块，相同缩进数的语句在一起组成一个语句块。<br><span class="hljs-number">3</span>、在 Python 中没有 switch...<span class="hljs-keyword">case</span> 语句，但在 Python3<span class="hljs-number">.10</span> 版本添加了 <span class="hljs-keyword">match</span>...<span class="hljs-keyword">case</span>，<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">http_error</span>(<span class="hljs-params">status</span>):<br>    <span class="hljs-keyword">if</span> status == <span class="hljs-number">400</span>:<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&#x27;400&#x27;</span><br>    <span class="hljs-keyword">elif</span> status == <span class="hljs-number">401</span>:<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&#x27;401&#x27;</span><br>    <span class="hljs-keyword">elif</span> status == <span class="hljs-number">403</span>:<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&#x27;403&#x27;</span><br>    <span class="hljs-keyword">elif</span> status == <span class="hljs-number">404</span>:<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&#x27;404&#x27;</span><br>    <span class="hljs-keyword">else</span>:<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&#x27;200&#x27;</span><br>如果使用 <span class="hljs-keyword">match</span>-<span class="hljs-keyword">case</span> 语法:<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">http_error</span>(<span class="hljs-params">status</span>):<br>    <span class="hljs-keyword">match</span> status:<br>        <span class="hljs-keyword">case</span> <span class="hljs-number">400</span>:<br>            <span class="hljs-keyword">return</span> <span class="hljs-string">&#x27;400&#x27;</span><br>        <span class="hljs-keyword">case</span> <span class="hljs-number">401</span>:<br>            <span class="hljs-keyword">return</span> <span class="hljs-string">&#x27;401&#x27;</span><br>        <span class="hljs-keyword">case</span> <span class="hljs-number">403</span>:<br>            <span class="hljs-keyword">return</span> <span class="hljs-string">&#x27;403&#x27;</span><br>        <span class="hljs-keyword">case</span> <span class="hljs-number">404</span>:<br>            <span class="hljs-keyword">return</span> <span class="hljs-string">&#x27;404&#x27;</span><br>        <span class="hljs-keyword">case</span> _:<br>            <span class="hljs-keyword">return</span> <span class="hljs-string">&#x27;200&#x27;</span><br><br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs python">案例<span class="hljs-number">1</span>：<br>输入一个百分制考试成绩，然后输出对应的等级制成绩，要求使用多分支选择结构。<br><br>案例<span class="hljs-number">2</span>：<br>输入一个百分制考试成绩，然后输出对应的等级制成绩，要求使用嵌套选择结构。<br></code></pre></td></tr></table></figure><h4 id="（2）循环结构"><a href="#（2）循环结构" class="headerlink" title="（2）循环结构"></a><strong><font color="red">（2）循环结构</font></strong></h4><h5 id="1、while循环"><a href="#1、while循环" class="headerlink" title="1、while循环"></a><font color="blue">1、<strong>while循环</strong></font></h5><p><img src="https://uploadfiles.nowcoder.com/images/20190927/334190970_1569553063234_679E3E040A93A984AB3426E27BFF2899" srcset="/img/loading.gif" lazyload alt="图片说明"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs python">(<span class="hljs-number">1</span>)基本语法<br><span class="hljs-keyword">while</span> 判断条件(condition)：<br>    执行语句(statements)……<br>    <br>示例：<br>n = <span class="hljs-number">100</span><br><span class="hljs-built_in">sum</span> = <span class="hljs-number">0</span><br>counter = <span class="hljs-number">1</span><br><span class="hljs-keyword">while</span> counter &lt;= n:<br>    <span class="hljs-built_in">sum</span> = <span class="hljs-built_in">sum</span> + counter<br>    counter += <span class="hljs-number">1</span><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;1 到 %d 之和为: %d&quot;</span> % (n,<span class="hljs-built_in">sum</span>))<br><br>(<span class="hljs-number">2</span>)<span class="hljs-keyword">while</span> ...<span class="hljs-keyword">else</span><br>在 <span class="hljs-keyword">while</span> … <span class="hljs-keyword">else</span> 在条件语句为 false 时执行 <span class="hljs-keyword">else</span> 的语句块：<br>count = <span class="hljs-number">0</span><br><span class="hljs-keyword">while</span> count &lt; <span class="hljs-number">5</span>:<br>   <span class="hljs-built_in">print</span> (count, <span class="hljs-string">&quot; 小于 5&quot;</span>)<br>   count = count + <span class="hljs-number">1</span><br><span class="hljs-keyword">else</span>:<br>   <span class="hljs-built_in">print</span> (count, <span class="hljs-string">&quot; 大于或等于 5&quot;</span>)<br></code></pre></td></tr></table></figure><h5 id="2、for循环"><a href="#2、for循环" class="headerlink" title="2、for循环"></a><font color="blue"><strong>2、for循环</strong></font></h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs python">语法格式：<br><span class="hljs-keyword">for</span> &lt;variable&gt; <span class="hljs-keyword">in</span> &lt;sequence&gt;:<br>    &lt;statements&gt;<br><span class="hljs-keyword">else</span>:<br>    &lt;statements&gt;<br><br>示例代码_1：<br>languages = [<span class="hljs-string">&quot;C&quot;</span>, <span class="hljs-string">&quot;C++&quot;</span>, <span class="hljs-string">&quot;Perl&quot;</span>, <span class="hljs-string">&quot;Python&quot;</span>]<br><span class="hljs-keyword">for</span> x <span class="hljs-keyword">in</span> languages:<br>    <span class="hljs-built_in">print</span> (x)<br>代码运行结果如下：<br>C<br>C++<br>Perl<br>Python<br><br>示例代码_2：<br>sites = [<span class="hljs-string">&quot;Baidu&quot;</span>, <span class="hljs-string">&quot;Google&quot;</span>, <span class="hljs-string">&quot;GDGS&quot;</span>, <span class="hljs-string">&quot;Taobao&quot;</span>]<br><span class="hljs-keyword">for</span> site <span class="hljs-keyword">in</span> sites:<br>    <span class="hljs-keyword">if</span> site == <span class="hljs-string">&quot;GDGS&quot;</span>:<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;广东工商!&quot;</span>)<br>        <span class="hljs-keyword">break</span><br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;循环数据 &quot;</span> + site)<br><span class="hljs-keyword">else</span>:<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;没有循环数据!&quot;</span>)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;完成循环!&quot;</span>)<br>代码运行结果如下：<br>循环数据 Baidu<br>循环数据 Google<br>广东工商!<br>完成循环!<br></code></pre></td></tr></table></figure><p><strong>range()函数</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs python">&gt;&gt;&gt;<span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">5</span>):<br><span class="hljs-meta">... </span>    <span class="hljs-built_in">print</span>(i)<br>...<br><span class="hljs-number">0</span><br><span class="hljs-number">1</span><br><span class="hljs-number">2</span><br><span class="hljs-number">3</span><br><span class="hljs-number">4</span><br><br>&gt;&gt;&gt;<span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">5</span>,<span class="hljs-number">9</span>) :<br>    <span class="hljs-built_in">print</span>(i)<br><span class="hljs-number">5</span><br><span class="hljs-number">6</span><br><span class="hljs-number">7</span><br><span class="hljs-number">8</span><br><br>&gt;&gt;&gt;<span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">0</span>, <span class="hljs-number">10</span>, <span class="hljs-number">3</span>) :<br>    <span class="hljs-built_in">print</span>(i)<br><span class="hljs-number">0</span><br><span class="hljs-number">3</span><br><span class="hljs-number">6</span><br><span class="hljs-number">9</span><br><br>&gt;&gt;&gt;<span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(-<span class="hljs-number">10</span>, -<span class="hljs-number">100</span>, -<span class="hljs-number">30</span>) :<br>    <span class="hljs-built_in">print</span>(i)<br>-<span class="hljs-number">10</span><br>-<span class="hljs-number">40</span><br>-<span class="hljs-number">70</span><br><br><span class="hljs-built_in">range</span>()函数来创建一个列表：<br>&gt;&gt;&gt;<span class="hljs-built_in">list</span>(<span class="hljs-built_in">range</span>(<span class="hljs-number">5</span>))<br>[<span class="hljs-number">0</span>, <span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>]<br>&gt;&gt;&gt;<br></code></pre></td></tr></table></figure><p><strong>完成九九乘法表、水仙花数</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">1</span>, <span class="hljs-number">10</span>):<br>    <span class="hljs-keyword">for</span> j <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">1</span>, i+<span class="hljs-number">1</span>):<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;&#123;0&#125;*&#123;1&#125;=&#123;2&#125;&#x27;</span>.<span class="hljs-built_in">format</span>(i,j,i*j), end=<span class="hljs-string">&#x27;  &#x27;</span>)<br>    <span class="hljs-built_in">print</span>()                    <br>    <br></code></pre></td></tr></table></figure><h4 id="（3）跳转语句"><a href="#（3）跳转语句" class="headerlink" title="（3）跳转语句"></a><strong><font color="red">（3）跳转语句</font></strong></h4><p>1、break语句</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">for</span> letter <span class="hljs-keyword">in</span> <span class="hljs-string">&#x27;Nowcoder&#x27;</span>:     <span class="hljs-comment"># 第一个实例</span><br>   <span class="hljs-keyword">if</span> letter == <span class="hljs-string">&#x27;d&#x27;</span>:<br>      <span class="hljs-keyword">break</span><br>   <span class="hljs-built_in">print</span> (<span class="hljs-string">&#x27;当前字母为 :&#x27;</span>, letter)<br><br>var = <span class="hljs-number">10</span>                    <span class="hljs-comment"># 第二个实例</span><br><span class="hljs-keyword">while</span> var &gt; <span class="hljs-number">0</span>:              <br>   <span class="hljs-built_in">print</span> (<span class="hljs-string">&#x27;当期变量值为 :&#x27;</span>, var)<br>   var = var -<span class="hljs-number">1</span><br>   <span class="hljs-keyword">if</span> var == <span class="hljs-number">5</span>:<br>      <span class="hljs-keyword">break</span><br><span class="hljs-built_in">print</span> (<span class="hljs-string">&quot;Good bye!&quot;</span>)<br><br>运行结果<br>当前字母为 : N<br>当前字母为 : o<br>当前字母为 : w<br>当前字母为 : c<br>当前字母为 : o<br>当期变量值为 : <span class="hljs-number">10</span><br>当期变量值为 : <span class="hljs-number">9</span><br>当期变量值为 : <span class="hljs-number">8</span><br>当期变量值为 : <span class="hljs-number">7</span><br>当期变量值为 : <span class="hljs-number">6</span><br>Good bye!<br></code></pre></td></tr></table></figure><p>2、continue语句</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#!/usr/bin/python3</span><br><br><span class="hljs-keyword">for</span> letter <span class="hljs-keyword">in</span> <span class="hljs-string">&#x27;Nowcoder&#x27;</span>:     <span class="hljs-comment"># 第一个实例</span><br>   <span class="hljs-keyword">if</span> letter == <span class="hljs-string">&#x27;o&#x27;</span>:        <span class="hljs-comment"># 字母为 o 时跳过输出</span><br>      <span class="hljs-keyword">continue</span><br>   <span class="hljs-built_in">print</span> (<span class="hljs-string">&#x27;当前字母 :&#x27;</span>, letter)<br><br>var = <span class="hljs-number">10</span>                    <span class="hljs-comment"># 第二个实例</span><br><span class="hljs-keyword">while</span> var &gt; <span class="hljs-number">0</span>:              <br>   var = var -<span class="hljs-number">1</span><br>   <span class="hljs-keyword">if</span> var == <span class="hljs-number">5</span>:             <span class="hljs-comment"># 变量为 5 时跳过输出</span><br>      <span class="hljs-keyword">continue</span><br>   <span class="hljs-built_in">print</span> (<span class="hljs-string">&#x27;当前变量值 :&#x27;</span>, var)<br><span class="hljs-built_in">print</span> (<span class="hljs-string">&quot;Good bye!&quot;</span>)<br><br>结果如下：<br>当前字母 : N<br>当前字母 : w<br>当前字母 : c<br>当前字母 : d<br>当前变量值 : <span class="hljs-number">9</span><br>当前变量值 : <span class="hljs-number">8</span><br>当前变量值 : <span class="hljs-number">7</span><br>当前变量值 : <span class="hljs-number">6</span><br>当前变量值 : <span class="hljs-number">4</span><br>当前变量值 : <span class="hljs-number">3</span><br>当前变量值 : <span class="hljs-number">2</span><br>当前变量值 : <span class="hljs-number">1</span><br>当前变量值 : <span class="hljs-number">0</span><br>Good bye!<br><br>循环语句可以有 <span class="hljs-keyword">else</span> 子句，它在穷尽列表(以<span class="hljs-keyword">for</span>循环)或条件变为 false (以<span class="hljs-keyword">while</span>循环)导致循环终止时被执行,但循环被<span class="hljs-keyword">break</span>终止时不执行。<br><span class="hljs-keyword">for</span> n <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">2</span>, <span class="hljs-number">10</span>):<br>    <span class="hljs-keyword">for</span> x <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">2</span>, n):<br>        <span class="hljs-keyword">if</span> n % x == <span class="hljs-number">0</span>:<br>            <span class="hljs-built_in">print</span>(n, <span class="hljs-string">&#x27;等于&#x27;</span>, x, <span class="hljs-string">&#x27;*&#x27;</span>, n//x)<br>            <span class="hljs-keyword">break</span><br>    <span class="hljs-keyword">else</span>:<br>        <span class="hljs-comment"># 循环中没有找到元素</span><br>        <span class="hljs-built_in">print</span>(n, <span class="hljs-string">&#x27; 是质数&#x27;</span>)<br>结果如下：<br><span class="hljs-number">2</span>  是质数<br><span class="hljs-number">3</span>  是质数<br><span class="hljs-number">4</span> 等于 <span class="hljs-number">2</span> * <span class="hljs-number">2</span><br><span class="hljs-number">5</span>  是质数<br><span class="hljs-number">6</span> 等于 <span class="hljs-number">2</span> * <span class="hljs-number">3</span><br><span class="hljs-number">7</span>  是质数<br><span class="hljs-number">8</span> 等于 <span class="hljs-number">2</span> * <span class="hljs-number">4</span><br><span class="hljs-number">9</span> 等于 <span class="hljs-number">3</span> * <span class="hljs-number">3</span><br><br></code></pre></td></tr></table></figure><p><strong>3、pass语句</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs python">Python <span class="hljs-keyword">pass</span>是空语句，是为了保持程序结构的完整性。<br><span class="hljs-keyword">pass</span> 不做任何事情，一般用做占位语句，如下实例<br><br>&gt;&gt;&gt;<span class="hljs-keyword">while</span> <span class="hljs-literal">True</span>:<br><span class="hljs-meta">... </span>    <span class="hljs-keyword">pass</span>  <span class="hljs-comment"># 等待键盘中断 (Ctrl+C)</span><br><br><br><span class="hljs-keyword">for</span> letter <span class="hljs-keyword">in</span> <span class="hljs-string">&#x27;Nowcoder&#x27;</span>: <br>   <span class="hljs-keyword">if</span> letter == <span class="hljs-string">&#x27;o&#x27;</span>:<br>      <span class="hljs-keyword">pass</span><br>      <span class="hljs-built_in">print</span> (<span class="hljs-string">&#x27;执行 pass 块&#x27;</span>)<br>   <span class="hljs-built_in">print</span> (<span class="hljs-string">&#x27;当前字母 :&#x27;</span>, letter)<br><span class="hljs-built_in">print</span> (<span class="hljs-string">&quot;Good bye!&quot;</span>)<br>结果如下：<br>当前字母 : N<br>执行 <span class="hljs-keyword">pass</span> 块<br>当前字母 : o<br>当前字母 : w<br>当前字母 : c<br>执行 <span class="hljs-keyword">pass</span> 块<br>当前字母 : o<br>当前字母 : d<br>当前字母 : e<br>当前字母 : r<br>Good bye!<br></code></pre></td></tr></table></figure><h4 id="（4）实训任务"><a href="#（4）实训任务" class="headerlink" title="（4）实训任务"></a><strong><font color="red">（4）实训任务</font></strong></h4><blockquote><p>（1）编写代码，输出由星号*组成的菱形图案，并且可以灵活控制图案的大小。</p><p>（2）编写程序，输入一个自然数n,然后计算并输出前n个自然数的阶乘之和。</p></blockquote><p>完成NP49-61</p><h3 id="（三）序列结构"><a href="#（三）序列结构" class="headerlink" title="（三）序列结构"></a>（三）序列结构</h3><p><img src="/img/python_2.png" srcset="/img/loading.gif" lazyload alt="python_2"></p><h4 id="（1）列表"><a href="#（1）列表" class="headerlink" title="（1）列表"></a><strong><font color="red">（1）列表</font></strong></h4><h5 id="1、列表创建与删除"><a href="#1、列表创建与删除" class="headerlink" title="1、列表创建与删除"></a><strong><font color="blue">1、列表创建与删除</font></strong></h5><p>==把逗号分隔的不同数据项使用方括号括起来，就可构成一个列表==</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 1 创建列表</span><br>exp_list = []  <span class="hljs-comment"># 创建空列表</span><br>exp_list = [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>]  <span class="hljs-comment"># 创建有数据的列表,可以是不同类型，但是建议一个列表同一个数据类型</span><br><br><span class="hljs-comment"># list()函数创建列表</span><br>exp_list_1 = <span class="hljs-built_in">list</span>((<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>))  <span class="hljs-comment"># 将元组转换为列表</span><br>exp_list_2 = <span class="hljs-built_in">list</span>(<span class="hljs-built_in">range</span>(<span class="hljs-number">1</span>, <span class="hljs-number">4</span>))  <span class="hljs-comment"># 将range对象转换为列表</span><br>exp_list_3 = <span class="hljs-built_in">list</span>(<span class="hljs-string">&#x27;123&#x27;</span>)        <span class="hljs-comment"># 将字符串转换为列表</span><br>exp_list_4 = <span class="hljs-built_in">list</span>(&#123;<span class="hljs-string">&quot;a&quot;</span>: <span class="hljs-number">1</span>, <span class="hljs-string">&quot;b&quot;</span>: <span class="hljs-number">2</span>, <span class="hljs-string">&quot;c&quot;</span>: <span class="hljs-number">3</span>&#125;)   <span class="hljs-comment"># 将字典的键转换为列表</span><br>exp_list_5 = <span class="hljs-built_in">list</span>(&#123;<span class="hljs-string">&quot;a&quot;</span>: <span class="hljs-number">1</span>, <span class="hljs-string">&quot;b&quot;</span>: <span class="hljs-number">2</span>, <span class="hljs-string">&quot;c&quot;</span>: <span class="hljs-number">3</span>&#125;.items())   <span class="hljs-comment"># 将字典的元素转换为列表</span><br><br><span class="hljs-comment"># 上面打印结果</span><br>[<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>]<br>[<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>]<br>[<span class="hljs-string">&#x27;1&#x27;</span>, <span class="hljs-string">&#x27;2&#x27;</span>, <span class="hljs-string">&#x27;3&#x27;</span>]<br>[<span class="hljs-string">&#x27;a&#x27;</span>, <span class="hljs-string">&#x27;b&#x27;</span>, <span class="hljs-string">&#x27;c&#x27;</span>]<br>[(<span class="hljs-string">&#x27;a&#x27;</span>, <span class="hljs-number">1</span>), (<span class="hljs-string">&#x27;b&#x27;</span>, <span class="hljs-number">2</span>), (<span class="hljs-string">&#x27;c&#x27;</span>, <span class="hljs-number">3</span>)]<br><br><span class="hljs-comment"># 2 删除列表</span><br><span class="hljs-keyword">del</span> exp_list<br></code></pre></td></tr></table></figure><h5 id="2、列表访问"><a href="#2、列表访问" class="headerlink" title="2、列表访问"></a><strong><font color="blue">2、列表访问</font></strong></h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 3 列表访问</span><br>exp_list_6 = [<span class="hljs-string">&#x27;a&#x27;</span>, <span class="hljs-string">&#x27;b&#x27;</span>, <span class="hljs-string">&#x27;c&#x27;</span>]<br><span class="hljs-built_in">print</span>(exp_list_6[<span class="hljs-number">0</span>], exp_list_6[<span class="hljs-number">1</span>], exp_list_6[<span class="hljs-number">2</span>])<br><span class="hljs-built_in">print</span>(exp_list_6[-<span class="hljs-number">1</span>], exp_list_6[-<span class="hljs-number">2</span>], exp_list_6[-<span class="hljs-number">3</span>])<br><br><span class="hljs-comment"># 上面打印结果</span><br>a b c<br>c b a<br></code></pre></td></tr></table></figure><h5 id="3、列表常用方法"><a href="#3、列表常用方法" class="headerlink" title="3、列表常用方法"></a><strong><font color="blue">3、列表常用方法</font></strong></h5><table><thead><tr><th><strong>方法</strong></th><th><strong>说明</strong></th></tr></thead><tbody><tr><td>append(x)</td><td>将x追加至列表尾部</td></tr><tr><td>extend(L)</td><td>将可迭代对象L中所有元素追加至列表尾部</td></tr><tr><td>insert(index, x)</td><td>在列表index位置处插入x，该位置后面的所有元素后移并且在列表中的索引加1，如果index为正数且大于列表长度则在列表尾部追加x，如果index为负数且小于列表长度的相反数则在列表头部插入元素x</td></tr><tr><td>remove(x)</td><td>在列表中删除第一个值为x的元素，该元素之后所有元素前移并且索引减1，如果列表中不存在x则抛出异常</td></tr><tr><td>pop([index])</td><td>删除并返回列表中下标为index的元素，如果不指定index则默认为-1，弹出最后一个元素；如果弹出中间位置的元素则后面的元素索引减1；如果index不是[-L, L]区间上的整数则抛出异常</td></tr><tr><td>clear()</td><td>清空列表，删除列表中所有元素，保留列表对象</td></tr><tr><td>index(x)</td><td>返回列表中第一个值为x的元素的索引，若不存在值为x的元素则抛出异常</td></tr><tr><td>count(x)</td><td>返回x在列表中的出现次数</td></tr><tr><td>reverse()</td><td>对列表所有元素进行原地逆序，首尾交换</td></tr><tr><td>sort(key=None,  reverse=False)</td><td>对列表中的元素进行原地排序，key用来指定排序规则，reverse为False表示升序，True表示降序</td></tr></tbody></table><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 4 列表常用方法</span><br><span class="hljs-comment"># append()、insert()、extend()</span><br>exp_list_7 = [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>]<br>exp_list_7.append(<span class="hljs-number">4</span>)<br>exp_list_7.insert(<span class="hljs-number">0</span>, <span class="hljs-number">0</span>)<br>exp_list_7.extend([<span class="hljs-number">5</span>, <span class="hljs-number">6</span>, <span class="hljs-number">7</span>])<br><span class="hljs-built_in">print</span>(exp_list_7)<br><span class="hljs-comment"># 打印结果如下</span><br>[<span class="hljs-number">0</span>, <span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>, <span class="hljs-number">6</span>, <span class="hljs-number">7</span>]<br><br><span class="hljs-comment"># pop()</span><br>exp_list_8 = [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>, <span class="hljs-number">6</span>, <span class="hljs-number">7</span>]<br><span class="hljs-built_in">print</span>(exp_list_8.pop())  <span class="hljs-comment"># 删除并返回尾部元素</span><br><span class="hljs-built_in">print</span>(exp_list_8.pop(<span class="hljs-number">0</span>))  <span class="hljs-comment"># 删除并返回第一个元素</span><br><span class="hljs-built_in">print</span>(exp_list_8)<br><span class="hljs-comment"># 打印结果如下</span><br><span class="hljs-number">7</span><br><span class="hljs-number">1</span><br>[<span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>, <span class="hljs-number">6</span>]<br><br><span class="hljs-comment"># remove()</span><br>exp_list_9 = [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">2</span>]<br>exp_list_9.remove(<span class="hljs-number">2</span>)  <span class="hljs-comment"># 删除第一个值为2的元素</span><br><span class="hljs-built_in">print</span>(exp_list_9)<br><span class="hljs-comment"># 打印结果如下</span><br>[<span class="hljs-number">1</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">2</span>]<br><br><span class="hljs-comment"># count()</span><br>exp_list_10 = [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">3</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">4</span>, <span class="hljs-number">4</span>, <span class="hljs-number">4</span>]<br><span class="hljs-built_in">print</span>(exp_list_10.count(<span class="hljs-number">2</span>))  <span class="hljs-comment"># 元素2出现在列表中的出现次数</span><br><span class="hljs-comment"># 打印结果如下</span><br><span class="hljs-number">2</span><br><br><span class="hljs-comment"># index()</span><br>exp_list_10 = [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">3</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">4</span>, <span class="hljs-number">4</span>, <span class="hljs-number">4</span>]<br><span class="hljs-built_in">print</span>(exp_list_10.index(<span class="hljs-number">2</span>))  <span class="hljs-comment"># 元素2出现在列表首次出现的次数</span><br><span class="hljs-comment"># 打印结果如下</span><br><span class="hljs-number">1</span><br><br><span class="hljs-comment"># sort()</span><br>exp_list_11 = [<span class="hljs-number">2</span>, <span class="hljs-number">4</span>, <span class="hljs-number">1</span>, <span class="hljs-number">7</span>, <span class="hljs-number">9</span>, <span class="hljs-number">8</span>, <span class="hljs-number">6</span>, <span class="hljs-number">3</span>]<br>exp_list_11.sort()<br><span class="hljs-built_in">print</span>(exp_list_11)<br><span class="hljs-comment"># 打印结果如下</span><br>[<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">6</span>, <span class="hljs-number">7</span>, <span class="hljs-number">8</span>, <span class="hljs-number">9</span>]<br><br><span class="hljs-comment"># reverse()</span><br>exp_list_11.reverse()<br><span class="hljs-built_in">print</span>(exp_list_11)<br><br><br></code></pre></td></tr></table></figure><h5 id="4、列表对象支持的运算符"><a href="#4、列表对象支持的运算符" class="headerlink" title="4、列表对象支持的运算符"></a><strong><font color="blue">4、列表对象支持的运算符</font></strong></h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 5列表对象支持的运算符 + * in 关系运算符</span><br><span class="hljs-comment"># 加法运算符+</span><br>exp_list_12=[<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>]<br>exp_list_12=exp_list_12+[<span class="hljs-number">4</span>]<br><span class="hljs-built_in">print</span>(exp_list_12)   <span class="hljs-comment"># 结果：[1,2,3,4]</span><br><span class="hljs-comment"># *</span><br>exp_list_12=exp_list_12*<span class="hljs-number">2</span><br><span class="hljs-built_in">print</span>(exp_list_12)   <span class="hljs-comment"># 结果：[1, 2, 3, 4, 1, 2, 3, 4]</span><br><span class="hljs-comment"># in</span><br><span class="hljs-built_in">print</span>(<span class="hljs-number">3</span> <span class="hljs-keyword">in</span> [<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>])    <span class="hljs-comment"># 结果：True</span><br><span class="hljs-built_in">print</span>(<span class="hljs-number">3</span> <span class="hljs-keyword">in</span> [<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-string">&#x27;3&#x27;</span>])  <span class="hljs-comment"># 结果：False</span><br><span class="hljs-comment"># 关系运算符  逐个比较对应位置的元素</span><br><span class="hljs-built_in">print</span>([<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">4</span>] &gt; [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>])   <span class="hljs-comment"># 结果：True</span><br><span class="hljs-built_in">print</span>([<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">4</span>] == [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>])  <span class="hljs-comment"># 结果：False</span><br></code></pre></td></tr></table></figure><h5 id="5、内置函数对列表的操作"><a href="#5、内置函数对列表的操作" class="headerlink" title="5、内置函数对列表的操作"></a><strong><font color="blue">5、内置函数对列表的操作</font></strong></h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 6 内置函数操作</span><br>x = <span class="hljs-built_in">list</span>(<span class="hljs-built_in">range</span>(<span class="hljs-number">11</span>))<br><span class="hljs-keyword">import</span> random<br><br>random.shuffle(x)<br><span class="hljs-built_in">print</span>(x)  <span class="hljs-comment"># 结果：[3, 6, 7, 9, 8, 2, 4, 5, 0, 1, 10]</span><br><span class="hljs-comment"># all(x)</span><br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">all</span>(x))  <span class="hljs-comment"># 结果：False</span><br><span class="hljs-comment"># any(x)</span><br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">any</span>(x))  <span class="hljs-comment"># 结果：True</span><br><span class="hljs-comment"># max(x)</span><br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">max</span>(x))  <span class="hljs-comment"># 结果：10</span><br><span class="hljs-comment"># min(x)</span><br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">min</span>(x))  <span class="hljs-comment"># 结果：0</span><br><span class="hljs-comment"># sum(x)</span><br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">sum</span>(x))  <span class="hljs-comment"># 结果：55</span><br><span class="hljs-comment"># len(x)</span><br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">len</span>(x))  <span class="hljs-comment"># 结果：11</span><br></code></pre></td></tr></table></figure><h5 id="6、列表推导式-重难点"><a href="#6、列表推导式-重难点" class="headerlink" title="6、列表推导式(重难点)"></a><strong><font color="red">6、列表推导式(重难点)</font></strong></h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 7列表推导式</span><br><span class="hljs-comment"># 示例1</span><br>exp_list_13 = [x + x <span class="hljs-keyword">for</span> x <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">10</span>)]<br><span class="hljs-built_in">print</span>(exp_list_13)  <span class="hljs-comment"># 结果：[0, 2, 4, 6, 8, 10, 12, 14, 16, 18]</span><br><span class="hljs-comment"># 上面等价于</span><br>exp_list_13 = []<br><span class="hljs-keyword">for</span> x <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">10</span>):<br>    exp_list_13.append(x + x)<br><span class="hljs-built_in">print</span>(exp_list_13)  <span class="hljs-comment"># 结果：[0, 2, 4, 6, 8, 10, 12, 14, 16, 18]</span><br><br><span class="hljs-comment"># 示例2 使用列表推导式实现嵌套列表的平铺</span><br>exp_list_14 = [[<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>], [<span class="hljs-number">4</span>, <span class="hljs-number">5</span>, <span class="hljs-number">6</span>], [<span class="hljs-number">7</span>, <span class="hljs-number">8</span>, <span class="hljs-number">9</span>]]<br><span class="hljs-comment"># [1, 2, 3, 4, 5, 6, 7, 8, 9]</span><br><span class="hljs-built_in">print</span>([num <span class="hljs-keyword">for</span> elem <span class="hljs-keyword">in</span> exp_list_14 <span class="hljs-keyword">for</span> num <span class="hljs-keyword">in</span> elem])<br><span class="hljs-comment"># [1, 2, 3, 4, 5, 6, 7, 8, 9]</span><br>result = []<br><span class="hljs-keyword">for</span> elem <span class="hljs-keyword">in</span> exp_list_14:<br>    <span class="hljs-keyword">for</span> num <span class="hljs-keyword">in</span> elem:<br>        result.append(num)<br><span class="hljs-built_in">print</span>(result)<br><br><span class="hljs-comment"># 示例3 在列表推导式使用if过滤不符合条件的元素</span><br>exp_list_15 = [-<span class="hljs-number">1</span>, -<span class="hljs-number">2</span>, <span class="hljs-number">0</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, -<span class="hljs-number">8</span>]<br><span class="hljs-built_in">print</span>([i <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> exp_list_15 <span class="hljs-keyword">if</span> i &gt; <span class="hljs-number">0</span>])  <span class="hljs-comment"># 结果：[3, 4]</span><br><br><span class="hljs-comment"># 示例4 在列表推导式同时遍历多个元素</span><br>exp_list_16 = [(x, y) <span class="hljs-keyword">for</span> x <span class="hljs-keyword">in</span> [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>] <span class="hljs-keyword">if</span> x == <span class="hljs-number">1</span> <span class="hljs-keyword">for</span> y <span class="hljs-keyword">in</span> [<span class="hljs-number">3</span>, <span class="hljs-number">1</span>, <span class="hljs-number">4</span>] <span class="hljs-keyword">if</span> y != x]<br><span class="hljs-built_in">print</span>(exp_list_16)  <span class="hljs-comment"># 结果：[(1, 3), (1, 4)]</span><br>result = []<br><span class="hljs-keyword">for</span> x <span class="hljs-keyword">in</span> [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>]:<br>    <span class="hljs-keyword">if</span> x == <span class="hljs-number">1</span>:<br>        <span class="hljs-keyword">for</span> y <span class="hljs-keyword">in</span> [<span class="hljs-number">1</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>]:<br>            <span class="hljs-keyword">if</span> y != x:<br>                result.append((x, y))<br><span class="hljs-built_in">print</span>(result)  <span class="hljs-comment"># 结果：[(1, 3), (1, 4)]</span><br></code></pre></td></tr></table></figure><h5 id="7、切片"><a href="#7、切片" class="headerlink" title="7、切片"></a><strong><font color="blue">7、切片</font></strong></h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># （1）使用切片获取列表部分元素</span><br><span class="hljs-meta">&gt;&gt;&gt; </span>aList = [<span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>, <span class="hljs-number">6</span>, <span class="hljs-number">7</span>, <span class="hljs-number">9</span>, <span class="hljs-number">11</span>, <span class="hljs-number">13</span>, <span class="hljs-number">15</span>, <span class="hljs-number">17</span>]<br><span class="hljs-meta">&gt;&gt;&gt; </span>aList[::]                <span class="hljs-comment"># 返回包含原列表中所有元素的新列表</span><br>[<span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>, <span class="hljs-number">6</span>, <span class="hljs-number">7</span>, <span class="hljs-number">9</span>, <span class="hljs-number">11</span>, <span class="hljs-number">13</span>, <span class="hljs-number">15</span>, <span class="hljs-number">17</span>]<br><span class="hljs-meta">&gt;&gt;&gt; </span>aList[::-<span class="hljs-number">1</span>]              <span class="hljs-comment"># 返回包含原列表中所有元素的逆序列表</span><br>[<span class="hljs-number">17</span>, <span class="hljs-number">15</span>, <span class="hljs-number">13</span>, <span class="hljs-number">11</span>, <span class="hljs-number">9</span>, <span class="hljs-number">7</span>, <span class="hljs-number">6</span>, <span class="hljs-number">5</span>, <span class="hljs-number">4</span>, <span class="hljs-number">3</span>]<br><span class="hljs-meta">&gt;&gt;&gt; </span>aList[::<span class="hljs-number">2</span>]               <span class="hljs-comment"># 隔一个取一个，获取偶数位置的元素</span><br>[<span class="hljs-number">3</span>, <span class="hljs-number">5</span>, <span class="hljs-number">7</span>, <span class="hljs-number">11</span>, <span class="hljs-number">15</span>]<br><span class="hljs-meta">&gt;&gt;&gt; </span>aList[<span class="hljs-number">1</span>::<span class="hljs-number">2</span>]              <span class="hljs-comment"># 隔一个取一个，获取奇数位置的元素</span><br>[<span class="hljs-number">4</span>, <span class="hljs-number">6</span>, <span class="hljs-number">9</span>, <span class="hljs-number">13</span>, <span class="hljs-number">17</span>]<br><span class="hljs-meta">&gt;&gt;&gt; </span>aList[<span class="hljs-number">3</span>:<span class="hljs-number">6</span>]               <span class="hljs-comment"># 指定切片的开始和结束位置</span><br>[<span class="hljs-number">6</span>, <span class="hljs-number">7</span>, <span class="hljs-number">9</span>]<br><span class="hljs-meta">&gt;&gt;&gt; </span>aList[<span class="hljs-number">0</span>:<span class="hljs-number">100</span>]             <span class="hljs-comment"># 切片结束位置大于列表长度时，从列表尾部截断</span><br>[<span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>, <span class="hljs-number">6</span>, <span class="hljs-number">7</span>, <span class="hljs-number">9</span>, <span class="hljs-number">11</span>, <span class="hljs-number">13</span>, <span class="hljs-number">15</span>, <span class="hljs-number">17</span>]<br><span class="hljs-meta">&gt;&gt;&gt; </span>aList[<span class="hljs-number">100</span>]               <span class="hljs-comment"># 抛出异常，不允许越界访问</span><br>IndexError: <span class="hljs-built_in">list</span> index out of <span class="hljs-built_in">range</span><br><span class="hljs-meta">&gt;&gt;&gt; </span>aList[<span class="hljs-number">100</span>:]              <span class="hljs-comment"># 切片开始位置大于列表长度时，返回空列表</span><br>[]<br><span class="hljs-meta">&gt;&gt;&gt; </span>aList[-<span class="hljs-number">15</span>:<span class="hljs-number">3</span>]             <span class="hljs-comment"># 进行必要的截断处理</span><br>[<span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>]<br><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">len</span>(aList)<br><span class="hljs-number">10</span><br><span class="hljs-meta">&gt;&gt;&gt; </span>aList[<span class="hljs-number">3</span>:-<span class="hljs-number">10</span>:-<span class="hljs-number">1</span>]          <span class="hljs-comment"># 位置3在位置-10的右侧，-1表示反向切片</span><br>[<span class="hljs-number">6</span>, <span class="hljs-number">5</span>, <span class="hljs-number">4</span>]<br><span class="hljs-meta">&gt;&gt;&gt; </span>aList[<span class="hljs-number">3</span>:-<span class="hljs-number">5</span>]              <span class="hljs-comment"># 位置3在位置-5的左侧，正向切片</span><br>[<span class="hljs-number">6</span>, <span class="hljs-number">7</span>]<br><br><span class="hljs-comment">#（2）使用切片为列表增加元素</span><br><span class="hljs-meta">&gt;&gt;&gt; </span>aList = [<span class="hljs-number">3</span>, <span class="hljs-number">5</span>, <span class="hljs-number">7</span>]<br><span class="hljs-meta">&gt;&gt;&gt; </span>aList[<span class="hljs-built_in">len</span>(aList):]<br>[]<br><span class="hljs-meta">&gt;&gt;&gt; </span>aList[<span class="hljs-built_in">len</span>(aList):] = [<span class="hljs-number">9</span>]       <span class="hljs-comment"># 在列表尾部增加元素</span><br><span class="hljs-meta">&gt;&gt;&gt; </span>aList[:<span class="hljs-number">0</span>] = [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>]             <span class="hljs-comment"># 在列表头部插入多个元素</span><br><span class="hljs-meta">&gt;&gt;&gt; </span>aList[<span class="hljs-number">3</span>:<span class="hljs-number">3</span>] = [<span class="hljs-number">4</span>]               <span class="hljs-comment"># 在列表中间位置插入元素</span><br><span class="hljs-meta">&gt;&gt;&gt; </span>aList<br>[<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>, <span class="hljs-number">7</span>, <span class="hljs-number">9</span>]<br><br><span class="hljs-comment"># (3)使用切片替换和修改列表中的元素</span><br><span class="hljs-meta">&gt;&gt;&gt; </span>aList = [<span class="hljs-number">3</span>, <span class="hljs-number">5</span>, <span class="hljs-number">7</span>, <span class="hljs-number">9</span>]<br><span class="hljs-meta">&gt;&gt;&gt; </span>aList[:<span class="hljs-number">3</span>] = [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>]           <span class="hljs-comment"># 替换列表元素，等号两边的列表长度相等</span><br><span class="hljs-meta">&gt;&gt;&gt; </span>aList<br>[<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">9</span>]<br><span class="hljs-meta">&gt;&gt;&gt; </span>aList[<span class="hljs-number">3</span>:] = [<span class="hljs-number">4</span>, <span class="hljs-number">5</span>, <span class="hljs-number">6</span>]           <span class="hljs-comment"># 切片连续，等号两边的列表长度可以不相等</span><br><span class="hljs-meta">&gt;&gt;&gt; </span>aList<br>[<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>, <span class="hljs-number">6</span>]<br><span class="hljs-meta">&gt;&gt;&gt; </span>aList[::<span class="hljs-number">2</span>] = [<span class="hljs-number">0</span>]*<span class="hljs-number">3</span>              <span class="hljs-comment"># 隔一个修改一个</span><br><span class="hljs-meta">&gt;&gt;&gt; </span>aList<br>[<span class="hljs-number">0</span>, <span class="hljs-number">2</span>, <span class="hljs-number">0</span>, <span class="hljs-number">4</span>, <span class="hljs-number">0</span>, <span class="hljs-number">6</span>]<br><span class="hljs-meta">&gt;&gt;&gt; </span>aList[::<span class="hljs-number">2</span>] = [<span class="hljs-string">&#x27;a&#x27;</span>, <span class="hljs-string">&#x27;b&#x27;</span>, <span class="hljs-string">&#x27;c&#x27;</span>]    <span class="hljs-comment"># 隔一个修改一个</span><br><span class="hljs-meta">&gt;&gt;&gt; </span>aList<br>[<span class="hljs-string">&#x27;a&#x27;</span>, <span class="hljs-number">2</span>, <span class="hljs-string">&#x27;b&#x27;</span>, <span class="hljs-number">4</span>, <span class="hljs-string">&#x27;c&#x27;</span>, <span class="hljs-number">6</span>]<br><span class="hljs-meta">&gt;&gt;&gt; </span>aList[<span class="hljs-number">1</span>::<span class="hljs-number">2</span>] = <span class="hljs-built_in">range</span>(<span class="hljs-number">3</span>)             <span class="hljs-comment"># 序列解包的用法</span><br><span class="hljs-meta">&gt;&gt;&gt; </span>aList<br>[<span class="hljs-string">&#x27;a&#x27;</span>, <span class="hljs-number">0</span>, <span class="hljs-string">&#x27;b&#x27;</span>, <span class="hljs-number">1</span>, <span class="hljs-string">&#x27;c&#x27;</span>, <span class="hljs-number">2</span>]<br><span class="hljs-meta">&gt;&gt;&gt; </span>aList[<span class="hljs-number">1</span>::<span class="hljs-number">2</span>] = <span class="hljs-built_in">map</span>(<span class="hljs-keyword">lambda</span> x: x!=<span class="hljs-number">5</span>, <span class="hljs-built_in">range</span>(<span class="hljs-number">3</span>))<br><span class="hljs-meta">&gt;&gt;&gt; </span>aList<br>[<span class="hljs-string">&#x27;a&#x27;</span>, <span class="hljs-literal">True</span>, <span class="hljs-string">&#x27;b&#x27;</span>, <span class="hljs-literal">True</span>, <span class="hljs-string">&#x27;c&#x27;</span>, <span class="hljs-literal">True</span>]<br><span class="hljs-meta">&gt;&gt;&gt; </span>aList[<span class="hljs-number">1</span>::<span class="hljs-number">2</span>] = <span class="hljs-built_in">zip</span>(<span class="hljs-string">&#x27;abc&#x27;</span>, <span class="hljs-built_in">range</span>(<span class="hljs-number">3</span>)) <span class="hljs-comment"># map、filter、zip对象都支持这样的用法</span><br><span class="hljs-meta">&gt;&gt;&gt; </span>aList<br>[<span class="hljs-string">&#x27;a&#x27;</span>, (<span class="hljs-string">&#x27;a&#x27;</span>, <span class="hljs-number">0</span>), <span class="hljs-string">&#x27;b&#x27;</span>, (<span class="hljs-string">&#x27;b&#x27;</span>, <span class="hljs-number">1</span>), <span class="hljs-string">&#x27;c&#x27;</span>, (<span class="hljs-string">&#x27;c&#x27;</span>, <span class="hljs-number">2</span>)]<br><span class="hljs-meta">&gt;&gt;&gt; </span>aList[::<span class="hljs-number">2</span>] = [<span class="hljs-number">1</span>]                   <span class="hljs-comment"># step不为1时等号两边列表长度必须相等</span><br>ValueError: attempt to assign sequence of size <span class="hljs-number">1</span> to extended <span class="hljs-built_in">slice</span> of size <span class="hljs-number">3</span><br><br>（<span class="hljs-number">4</span>）使用切片删除列表中的元素<br><span class="hljs-meta">&gt;&gt;&gt; </span>aList = [<span class="hljs-number">3</span>, <span class="hljs-number">5</span>, <span class="hljs-number">7</span>, <span class="hljs-number">9</span>]<br><span class="hljs-meta">&gt;&gt;&gt; </span>aList[:<span class="hljs-number">3</span>] = []                  <span class="hljs-comment"># 删除列表中前3个元素</span><br><span class="hljs-meta">&gt;&gt;&gt; </span>aList<br>[<span class="hljs-number">9</span>]<br>也可以结合使用<span class="hljs-keyword">del</span>命令与切片结合来删除列表中的部分元素，并且切片可以不连续。<br><span class="hljs-meta">&gt;&gt;&gt; </span>aList = [<span class="hljs-number">3</span>, <span class="hljs-number">5</span>, <span class="hljs-number">7</span>, <span class="hljs-number">9</span>, <span class="hljs-number">11</span>]<br><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">del</span> aList[:<span class="hljs-number">3</span>]                   <span class="hljs-comment"># 切片元素连续</span><br><span class="hljs-meta">&gt;&gt;&gt; </span>aList<br>[<span class="hljs-number">9</span>, <span class="hljs-number">11</span>]<br><span class="hljs-meta">&gt;&gt;&gt; </span>aList = [<span class="hljs-number">3</span>, <span class="hljs-number">5</span>, <span class="hljs-number">7</span>, <span class="hljs-number">9</span>, <span class="hljs-number">11</span>]<br><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">del</span> aList[::<span class="hljs-number">2</span>]                  <span class="hljs-comment"># 切片元素不连续，隔一个删一个</span><br><span class="hljs-meta">&gt;&gt;&gt; </span>aList<br>[<span class="hljs-number">5</span>, <span class="hljs-number">9</span>]<br></code></pre></td></tr></table></figure><h4 id="（2）元组与生成器表达式"><a href="#（2）元组与生成器表达式" class="headerlink" title="（2）元组与生成器表达式"></a><strong><font color="red">（2）元组与生成器表达式</font></strong></h4><h5 id="1、元组创建与访问"><a href="#1、元组创建与访问" class="headerlink" title="1、元组创建与访问"></a><strong><font color="blue">1、元组创建与访问</font></strong></h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#  1 元组创建与元素访问</span><br>exp_tuple_1 = (<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>)<br><span class="hljs-built_in">print</span>(exp_tuple_1)  <span class="hljs-comment"># (1, 2, 3)</span><br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">type</span>(exp_tuple_1))  <span class="hljs-comment"># &lt;class &#x27;tuple&#x27;&gt;</span><br><span class="hljs-comment"># 支持双向索引</span><br><span class="hljs-built_in">print</span>(exp_tuple_1[<span class="hljs-number">0</span>])  <span class="hljs-comment"># 1</span><br><span class="hljs-built_in">print</span>(exp_tuple_1[-<span class="hljs-number">1</span>])  <span class="hljs-comment"># 3</span><br><br><span class="hljs-comment"># exp_tuple_1[1] = 4 # 元组中元素的数量和引用都是不可变的,出现下面错误信息</span><br><span class="hljs-comment"># TypeError: &#x27;tuple&#x27; object does not support item assignment</span><br><br>exp_tuple_2=(<span class="hljs-number">3</span>)    <span class="hljs-comment"># 这和x = 3是一样的</span><br><span class="hljs-built_in">print</span>(exp_tuple_2)  <span class="hljs-comment"># 3</span><br><br>exp_tuple_2=(<span class="hljs-number">3</span>,)   <span class="hljs-comment"># 如果元组中只有一个元素，必须在后面多写一个逗号</span><br><span class="hljs-built_in">print</span>(exp_tuple_2)  <span class="hljs-comment"># (3,)</span><br><br><span class="hljs-meta">&gt;&gt;&gt; </span>x = ()             <span class="hljs-comment"># 空元组</span><br><span class="hljs-meta">&gt;&gt;&gt; </span>x = <span class="hljs-built_in">tuple</span>()        <span class="hljs-comment"># 空元组</span><br><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">tuple</span>(<span class="hljs-built_in">range</span>(<span class="hljs-number">5</span>))    <span class="hljs-comment"># 将其他迭代对象转换为元组</span><br>(<span class="hljs-number">0</span>, <span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>)<br><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">list</span>(<span class="hljs-built_in">enumerate</span>(<span class="hljs-built_in">range</span>(<span class="hljs-number">5</span>)))<br>[(<span class="hljs-number">0</span>, <span class="hljs-number">0</span>), (<span class="hljs-number">1</span>, <span class="hljs-number">1</span>), (<span class="hljs-number">2</span>, <span class="hljs-number">2</span>), (<span class="hljs-number">3</span>, <span class="hljs-number">3</span>), (<span class="hljs-number">4</span>, <span class="hljs-number">4</span>)]<br><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">list</span>(<span class="hljs-built_in">zip</span>(<span class="hljs-built_in">range</span>(<span class="hljs-number">3</span>), <span class="hljs-string">&#x27;abcdefg&#x27;</span>))<br>[(<span class="hljs-number">0</span>, <span class="hljs-string">&#x27;a&#x27;</span>), (<span class="hljs-number">1</span>, <span class="hljs-string">&#x27;b&#x27;</span>), (<span class="hljs-number">2</span>, <span class="hljs-string">&#x27;c&#x27;</span>)]<br><br></code></pre></td></tr></table></figure><h5 id="2、元组与列表异同点"><a href="#2、元组与列表异同点" class="headerlink" title="2、元组与列表异同点"></a><strong><font color="blue">2、元组与列表异同点</font></strong></h5><ul><li><p>列表和元组都属于有序序列，都支持使用双向索引访问其中的元素，以及使用count()方法统计指定元素的出现次数和index()方法获取指定元素首次出现的索引，len()、map()、filter()等大量内置函数和+、in等运算符也都可以作用于列表和元组。</p></li><li><p>元组属于不可变（immutable）序列，不可以修改元组中元素的引用，也无法为元组增加或删除元素。</p></li><li><p>元组没有提供append()、extend()和insert()等方法，无法向元组中添加元素；同样，元组也没有remove()和pop()方法，也不支持对元组元素进行del操作，不能从元组中删除元素，而只能使用del命令删除整个元组。</p></li><li><p>元组也支持切片操作，但是只能通过切片来访问元组中的元素，不允许使用切片来修改元组中元素的值，也不支持使用切片操作来为元组增加或删除元素。</p></li><li><p>元组占用内存比列表略少。如果定义了一系列常量值，主要用途仅是对它们进行遍历或其他类似用途，而不需要对其元素进行任何修改，那么一般建议使用元组而不用列表。</p></li><li><p>元组在内部实现上不允许修改，使得代码更加安全，例如调用函数时使用元组传递参数可以防止在函数中修改元组，而使用列表则很难保证这一点。</p></li><li><p>元组可用作字典的键，也可以作为集合的元素。列表不能当作字典键使用，也不能作为集合中的元素</p></li></ul><h5 id="3、生成器表达式"><a href="#3、生成器表达式" class="headerlink" title="3、生成器表达式"></a><strong><font color="blue">3、生成器表达式</font></strong></h5><ul><li><p>生成器表达式（generator expression），或称生成器推导式，用法与列表推导式非常相似，在形式上生成器推导式使用圆括号（parentheses）作为定界符，而不是列表推导式所使用的方括号（square brackets）。</p></li><li><p>与列表推导式最大的不同是，生成器表达式的结果是一个生成器对象。生成器对象类似于迭代器对象，具有惰性求值的特点，只在需要时生成新元素，并且每个元素只生成一次，空间占用非常少，尤其适合大数据处理的场合</p></li><li><p>•使用生成器对象的元素时，可以根据需要将其转化为列表或元组，也可以使用生成器对象的__next__()方法或者内置函数next()进行遍历，或者直接使用for循环来遍历其中的元素。但是不管用哪种方法访问其元素，只能从前往后正向访问每个元素，没有任何方法可以再次访问已访问过的元素，也不支持使用下标访问其中的元素。当所有元素访问结束以后，如果需要重新访问其中的元素，必须重新创建该生成器对象，enumerate、filter、map、zip等其他迭代器对象也具有同样的特点。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 3 生成器表达式</span><br><span class="hljs-comment"># 使用生成器对象__next__()方法或内置函数next()进行遍历</span><br>exp_tuple_3 = ((i + <span class="hljs-number">3</span>) ** <span class="hljs-number">3</span> <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">10</span>))<br><span class="hljs-built_in">print</span>(exp_tuple_3)  <span class="hljs-comment"># &lt;generator object &lt;genexpr&gt; at 0x0000024C6983B4A0&gt;</span><br><span class="hljs-comment"># 将生成器对象转换为元组</span><br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">tuple</span>(exp_tuple_3))  <span class="hljs-comment"># (27, 64, 125, 216, 343, 512, 729, 1000, 1331, 1728)</span><br><span class="hljs-comment"># 生成器对象已遍历结束，没有元素了</span><br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">list</span>(exp_tuple_3))  <span class="hljs-comment"># []</span><br><br><span class="hljs-comment"># 重新创建生成器对象</span><br>exp_tuple_3 = ((i + <span class="hljs-number">3</span>) ** <span class="hljs-number">3</span> <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">10</span>))<br><span class="hljs-comment"># 使用生成器对象的__next__()方法获取元素</span><br><span class="hljs-built_in">print</span>(exp_tuple_3.__next__())  <span class="hljs-comment"># 27</span><br><span class="hljs-built_in">print</span>(exp_tuple_3.__next__())  <span class="hljs-comment"># 64</span><br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">next</span>(exp_tuple_3))  <span class="hljs-comment"># 125</span><br><br><span class="hljs-comment"># 使用for循环直接迭代生成器对象中的元素</span><br>exp_tuple_3=((i + <span class="hljs-number">3</span>) ** <span class="hljs-number">3</span> <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">10</span>))<br><span class="hljs-keyword">for</span> item <span class="hljs-keyword">in</span> exp_tuple_3:<br>    <span class="hljs-built_in">print</span>(item,end=<span class="hljs-string">&#x27; &#x27;</span>)<br><span class="hljs-comment"># 27 64 125 216 343 512 729 1000 1331 1728</span><br><br>exp_tuple_3 = ((i + <span class="hljs-number">3</span>) ** <span class="hljs-number">3</span> <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">10</span>))<br>a = [item <span class="hljs-keyword">for</span> item <span class="hljs-keyword">in</span> exp_tuple_3]<br><span class="hljs-built_in">print</span>(a)<br><span class="hljs-comment"># [27, 64, 125, 216, 343, 512, 729, 1000, 1331, 1728]</span><br><br></code></pre></td></tr></table></figure></li></ul><h4 id="（3）字典"><a href="#（3）字典" class="headerlink" title="（3）字典"></a><strong><font color="red">（3）字典</font></strong></h4><ul><li>字典（dictionary）是包含若干“键:值”元素的无序可变序列，字典中的每个元素包含用冒号分隔开的“键”和“值”两部分，表示一种映射或对应关系，也称关联数组。定义字典时，每个元素的“键”和“值”之间用冒号分隔，不同元素之间用逗号分隔，所有的元素放在一对大括号“｛｝”中。</li><li>字典中元素的“键”可以是Python中任意不可变数据，例如整数、实数、复数、字符串、元组等类型等可哈希数据，但不能使用列表、集合、字典或其他可变类型作为字典的“键”。</li><li>字典中的“键”不允许重复，“值”是可以重复的。</li></ul><h5 id="1、字典创建与删除"><a href="#1、字典创建与删除" class="headerlink" title="1、字典创建与删除"></a><strong><font color="blue">1、字典创建与删除</font></strong></h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 1 字典创建与删除</span><br>exp_dict_1 = &#123;<span class="hljs-string">&#x27;server&#x27;</span>: <span class="hljs-string">&#x27;db.diveintopython3.org&#x27;</span>, <span class="hljs-string">&#x27;database&#x27;</span>: <span class="hljs-string">&#x27;mysql&#x27;</span>&#125;<br><br>exp_dict_2 = <span class="hljs-built_in">dict</span>()<br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">type</span>(exp_dict_2))  <span class="hljs-comment"># &lt;class &#x27;dict&#x27;&gt;</span><br><br>exp_dict_3 = &#123;&#125;<br><br><span class="hljs-comment"># 根据已有数据创建字典</span><br>keys = [<span class="hljs-string">&#x27;a&#x27;</span>, <span class="hljs-string">&#x27;b&#x27;</span>, <span class="hljs-string">&#x27;c&#x27;</span>, <span class="hljs-string">&#x27;d&#x27;</span>]<br>values = [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>]<br>exp_dict_4 = <span class="hljs-built_in">dict</span>(<span class="hljs-built_in">zip</span>(keys, values))<br><span class="hljs-built_in">print</span>(exp_dict_4)  <span class="hljs-comment"># &#123;&#x27;a&#x27;: 1, &#x27;b&#x27;: 2, &#x27;c&#x27;: 3, &#x27;d&#x27;: 4&#125;</span><br><br><span class="hljs-comment"># 以关键参数的形式创建字典</span><br>exp_dict_5 = <span class="hljs-built_in">dict</span>(name=<span class="hljs-string">&#x27;yj&#x27;</span>, age=<span class="hljs-number">27</span>, sex=<span class="hljs-string">&#x27;man&#x27;</span>)<br><span class="hljs-built_in">print</span>(exp_dict_5)  <span class="hljs-comment"># &#123;&#x27;name&#x27;: &#x27;yj&#x27;, &#x27;age&#x27;: 27, &#x27;sex&#x27;: &#x27;man&#x27;&#125;</span><br><br><span class="hljs-comment"># 以给定内容为“键”，创建“值”为空的字典</span><br>exp_dict_6 = <span class="hljs-built_in">dict</span>.fromkeys([<span class="hljs-string">&#x27;name&#x27;</span>, <span class="hljs-string">&#x27;age&#x27;</span>])<br><span class="hljs-built_in">print</span>(exp_dict_6)  <span class="hljs-comment"># &#123;&#x27;name&#x27;: None, &#x27;age&#x27;: None&#125;</span><br><br><span class="hljs-comment"># 删除</span><br><span class="hljs-keyword">del</span> exp_dict_6  <span class="hljs-comment"># 删除字典exp_dict_6 </span><br></code></pre></td></tr></table></figure><h5 id="2、字典元素的访问"><a href="#2、字典元素的访问" class="headerlink" title="2、字典元素的访问"></a><strong><font color="blue">2、字典元素的访问</font></strong></h5><p>字典中的每个元素表示一种映射关系或对应关系，根据提供的“键”作为下标就可以访问对应的“值”，如果字典中不存在这个“键”会抛出异常。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python">exp_dict_7 = &#123;<span class="hljs-string">&#x27;name&#x27;</span>: <span class="hljs-string">&#x27;yj&#x27;</span>, <span class="hljs-string">&#x27;age&#x27;</span>: <span class="hljs-number">27</span>, <span class="hljs-string">&#x27;sex&#x27;</span>: <span class="hljs-string">&#x27;man&#x27;</span>&#125;<br><span class="hljs-built_in">print</span>(exp_dict_7[<span class="hljs-string">&#x27;age&#x27;</span>])  <span class="hljs-comment"># 27</span><br><span class="hljs-built_in">print</span>(exp_dict_7[<span class="hljs-string">&#x27;address&#x27;</span>])  <span class="hljs-comment"># 异常：KeyError: &#x27;address&#x27;</span><br></code></pre></td></tr></table></figure><p>字典对象提供了一个get()方法用来返回指定“键”对应的“值”，并且允许指定该键不存在时返回特定的“值”（默认为空值None）</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-built_in">print</span>(exp_dict_7.get(<span class="hljs-string">&#x27;age&#x27;</span>))  <span class="hljs-comment"># 27</span><br><span class="hljs-built_in">print</span>(exp_dict_7.get(<span class="hljs-string">&#x27;address&#x27;</span>,<span class="hljs-string">&#x27;Not Exists.&#x27;</span>))  <span class="hljs-comment"># Not Exists.</span><br></code></pre></td></tr></table></figure><p>字典对象的迭代或遍历</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 迭代、遍历</span><br>exp_dict_9 = &#123;<span class="hljs-string">&#x27;name&#x27;</span>: <span class="hljs-string">&#x27;yj&#x27;</span>, <span class="hljs-string">&#x27;age&#x27;</span>: <span class="hljs-number">27</span>, <span class="hljs-string">&#x27;sex&#x27;</span>: <span class="hljs-string">&#x27;man&#x27;</span>&#125;<br><span class="hljs-comment"># 1默认key</span><br><span class="hljs-keyword">for</span> item <span class="hljs-keyword">in</span> exp_dict_9:<br>    <span class="hljs-built_in">print</span>(item)<br><span class="hljs-comment"># name</span><br><span class="hljs-comment"># age</span><br><span class="hljs-comment"># sex</span><br><br><span class="hljs-comment"># 2</span><br><span class="hljs-keyword">for</span> item <span class="hljs-keyword">in</span> exp_dict_9.items():<br>    <span class="hljs-built_in">print</span>(item)<br><span class="hljs-comment"># (&#x27;name&#x27;, &#x27;yj&#x27;)</span><br><span class="hljs-comment"># (&#x27;age&#x27;, 27)</span><br><span class="hljs-comment"># (&#x27;sex&#x27;, &#x27;man&#x27;)</span><br><br><span class="hljs-comment"># 3</span><br><span class="hljs-keyword">for</span> value <span class="hljs-keyword">in</span> exp_dict_9.values():<br>    <span class="hljs-built_in">print</span>(value)<br><span class="hljs-comment"># yj</span><br><span class="hljs-comment"># 27</span><br><span class="hljs-comment"># man</span><br><br><span class="hljs-comment"># 4</span><br><span class="hljs-comment"># 查看字典中的所有元素</span><br><span class="hljs-built_in">print</span>(exp_dict_9.items())  <span class="hljs-comment"># dict_items([(&#x27;name&#x27;, &#x27;yj&#x27;), (&#x27;age&#x27;, 27), (&#x27;sex&#x27;, &#x27;man&#x27;)])</span><br><span class="hljs-comment"># 查看字典中的所有key</span><br><span class="hljs-built_in">print</span>(exp_dict_9.keys())  <span class="hljs-comment"># dict_keys([&#x27;name&#x27;, &#x27;age&#x27;, &#x27;sex&#x27;])</span><br><span class="hljs-comment"># 查看字典中的所有value</span><br><span class="hljs-built_in">print</span>(exp_dict_9.values())  <span class="hljs-comment"># dict_values([&#x27;yj&#x27;, 27, &#x27;man&#x27;])</span><br></code></pre></td></tr></table></figure><h5 id="3、字典元素的添加、修改与删除"><a href="#3、字典元素的添加、修改与删除" class="headerlink" title="3、字典元素的添加、修改与删除"></a><strong><font color="blue">3、字典元素的添加、修改与删除</font></strong></h5><p>当以指定“键”为下标为字典元素赋值时，有两种含义：</p><p>1）若该“键”存在，则表示修改该“键”对应的值；</p><p>2）若不存在，则表示添加一个新的“键:值”对，也就是添加一个新元素</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 3 字典元素的添加、修改与删除</span><br>exp_dict_8 = &#123;<span class="hljs-string">&#x27;name&#x27;</span>: <span class="hljs-string">&#x27;yj&#x27;</span>, <span class="hljs-string">&#x27;age&#x27;</span>: <span class="hljs-number">27</span>, <span class="hljs-string">&#x27;sex&#x27;</span>: <span class="hljs-string">&#x27;man&#x27;</span>&#125;<br><span class="hljs-comment"># 添加</span><br>exp_dict_8[<span class="hljs-string">&#x27;address&#x27;</span>] = <span class="hljs-string">&quot;zhaoqin&quot;</span><br><span class="hljs-built_in">print</span>(exp_dict_8)  <span class="hljs-comment"># &#123;&#x27;name&#x27;: &#x27;yj&#x27;, &#x27;age&#x27;: 27, &#x27;sex&#x27;: &#x27;man&#x27;, &#x27;address&#x27;: &#x27;zhaoqin&#x27;&#125;</span><br><span class="hljs-comment"># 修改</span><br>exp_dict_8[<span class="hljs-string">&#x27;age&#x27;</span>] = <span class="hljs-number">18</span><br><span class="hljs-built_in">print</span>(exp_dict_8)  <span class="hljs-comment"># &#123;&#x27;name&#x27;: &#x27;yj&#x27;, &#x27;age&#x27;: 18, &#x27;sex&#x27;: &#x27;man&#x27;, &#x27;address&#x27;: &#x27;zhaoqin&#x27;&#125;</span><br><br><span class="hljs-comment"># update()</span><br>exp_dict_8.update(&#123;<span class="hljs-string">&#x27;age&#x27;</span>: <span class="hljs-number">17</span>, <span class="hljs-string">&#x27;score&#x27;</span>: <span class="hljs-number">70</span>&#125;)<br><span class="hljs-built_in">print</span>(exp_dict_8)  <span class="hljs-comment"># &#123;&#x27;name&#x27;: &#x27;yj&#x27;, &#x27;age&#x27;: 17, &#x27;sex&#x27;: &#x27;man&#x27;, &#x27;address&#x27;: &#x27;zhaoqin&#x27;, &#x27;score&#x27;: 70&#125;</span><br><br><span class="hljs-comment"># 删除del pop() popitem()</span><br><span class="hljs-keyword">del</span> exp_dict_8[<span class="hljs-string">&#x27;age&#x27;</span>]  <span class="hljs-comment"># 删除字典元素</span><br><span class="hljs-built_in">print</span>(exp_dict_8)  <span class="hljs-comment"># &#123;&#x27;name&#x27;: &#x27;yj&#x27;, &#x27;sex&#x27;: &#x27;man&#x27;, &#x27;address&#x27;: &#x27;zhaoqin&#x27;, &#x27;score&#x27;: 70&#125;</span><br><br>exp_dict_8.pop(<span class="hljs-string">&#x27;score&#x27;</span>)<br><span class="hljs-built_in">print</span>(exp_dict_8)  <span class="hljs-comment"># &#123;&#x27;name&#x27;: &#x27;yj&#x27;, &#x27;sex&#x27;: &#x27;man&#x27;, &#x27;address&#x27;: &#x27;zhaoqin&#x27;&#125;</span><br><br>exp_dict_8.popitem()  <span class="hljs-comment"># 弹出一个元素，对空字典会抛出异常</span><br><span class="hljs-built_in">print</span>(exp_dict_8)  <span class="hljs-comment"># &#123;&#x27;name&#x27;: &#x27;yj&#x27;, &#x27;sex&#x27;: &#x27;man&#x27;&#125;</span><br><br></code></pre></td></tr></table></figure><h5 id="4、字典应用案例-后写"><a href="#4、字典应用案例-后写" class="headerlink" title="4、字典应用案例(后写)"></a><strong><font color="blue">4、字典应用案例</font></strong>(后写)</h5><h4 id="（4）集合"><a href="#（4）集合" class="headerlink" title="（4）集合"></a><strong><font color="red">（4）集合</font></strong></h4><ul><li>集合（set）属于Python无序可变序列，使用一对大括号作为定界符，元素之间使用逗号分隔，同一个集合内的每个元素都是唯一的，元素之间不允许重复。</li><li>集合中只能包含数字、字符串、元组等不可变类型（或者说可哈希）的数据，不能包含列表、字典、集合等可变类型的数据。</li></ul><h5 id="1、集合对象的创建与删除"><a href="#1、集合对象的创建与删除" class="headerlink" title="1、集合对象的创建与删除"></a><strong><font color="blue">1、集合对象的创建与删除</font></strong></h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 1 集合对象的创建与删除</span><br>exp_set_1 = &#123;<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>&#125;<br><span class="hljs-built_in">print</span>(exp_set_1)  <span class="hljs-comment"># &#123;1, 2, 3&#125;</span><br><br>exp_set_2 = <span class="hljs-built_in">set</span>(<span class="hljs-built_in">range</span>(<span class="hljs-number">1</span>, <span class="hljs-number">4</span>))<br><span class="hljs-built_in">print</span>(exp_set_2)  <span class="hljs-comment"># &#123;1, 2, 3&#125;</span><br><br>exp_set_3 = <span class="hljs-built_in">set</span>([<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>])<br><span class="hljs-built_in">print</span>(exp_set_3)  <span class="hljs-comment"># &#123;1, 2, 3&#125;</span><br><br><span class="hljs-comment"># 删除del</span><br><span class="hljs-keyword">del</span> exp_set_3<br><span class="hljs-built_in">print</span>(exp_set_3)  <span class="hljs-comment"># NameError: name &#x27;exp_set_3&#x27; is not defined</span><br><br></code></pre></td></tr></table></figure><h5 id="2、集合操作与运算"><a href="#2、集合操作与运算" class="headerlink" title="2、集合操作与运算"></a><strong><font color="blue">2、集合操作与运算</font></strong></h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 2 集合操作与运算</span><br><span class="hljs-comment"># （1）集合元素增加与删除</span><br><span class="hljs-comment"># add()方法可以增加新元素，如果该元素已存在则忽略该操作，不会抛出异常；</span><br><span class="hljs-comment"># update()方法用于合并另外一个集合中的元素到当前集合中，并自动去除重复元素。</span><br><span class="hljs-comment"># pop()方法用于随机删除并返回集合中的一个元素，如果集合为空则抛出异常；</span><br><span class="hljs-comment"># remove()方法用于删除集合中的元素，如果指定元素不存在则抛出异常；</span><br><span class="hljs-comment"># discard()用于从集合中删除一个特定元素，如果元素不在集合中则忽略该操作；</span><br><span class="hljs-comment"># clear()方法清空集合删除所有元素。</span><br>exp_set_4 = &#123;<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>&#125;<br>exp_set_4.add(<span class="hljs-number">3</span>)  <span class="hljs-comment"># 添加元素，重复元素自动忽略</span><br><span class="hljs-built_in">print</span>(exp_set_4)  <span class="hljs-comment"># &#123;1, 2, 3&#125;</span><br>exp_set_4.update(&#123;<span class="hljs-number">3</span>, <span class="hljs-number">4</span>&#125;)  <span class="hljs-comment"># 更新当前集合，自动忽略重复的元素</span><br><span class="hljs-built_in">print</span>(exp_set_4)  <span class="hljs-comment"># &#123;1, 2, 3, 4&#125;</span><br><br><span class="hljs-comment"># （2）集合运算</span><br>exp_set_5 = <span class="hljs-built_in">set</span>([<span class="hljs-number">8</span>, <span class="hljs-number">9</span>, <span class="hljs-number">10</span>, <span class="hljs-number">11</span>, <span class="hljs-number">12</span>, <span class="hljs-number">13</span>])<br>exp_set_6 = &#123;<span class="hljs-number">0</span>, <span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">7</span>, <span class="hljs-number">8</span>&#125;<br><span class="hljs-built_in">print</span>(exp_set_5 | exp_set_6)  <span class="hljs-comment"># 并集 &#123;0, 1, 2, 3, 7, 8, 9, 10, 11, 12, 13&#125;</span><br><span class="hljs-built_in">print</span>(exp_set_5 &amp; exp_set_6)  <span class="hljs-comment"># 交集 &#123;8&#125;</span><br><span class="hljs-built_in">print</span>(exp_set_5 - exp_set_6)  <span class="hljs-comment"># 差集 &#123;9, 10, 11, 12, 13&#125;</span><br><span class="hljs-built_in">print</span>(exp_set_5 ^ exp_set_6)  <span class="hljs-comment"># 对称差集 &#123;0, 1, 2, 3, 7, 9, 10, 11, 12, 13&#125;</span><br></code></pre></td></tr></table></figure><h5 id="3、集合应用案例（后写）"><a href="#3、集合应用案例（后写）" class="headerlink" title="3、集合应用案例（后写）"></a><strong><font color="blue">3、集合应用案例（后写）</font></strong></h5><h4 id="（5）序列解包"><a href="#（5）序列解包" class="headerlink" title="（5）序列解包"></a><strong><font color="red">（5）序列解包</font></strong></h4><p>可以使用序列解包功能对多个变量同时进行赋值</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 3序列解包</span><br>a = [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>]<br>b, c, d = a  <span class="hljs-comment"># 列表也支持序列解包的用法</span><br><span class="hljs-built_in">print</span>(a, b, c)  <span class="hljs-comment"># [1, 2, 3] 1 2</span><br>x, y, z = <span class="hljs-built_in">sorted</span>([<span class="hljs-number">1</span>, <span class="hljs-number">3</span>, <span class="hljs-number">2</span>])  <span class="hljs-comment"># sorted()函数返回排序后的列表</span><br><span class="hljs-built_in">print</span>(x, y, z)  <span class="hljs-comment"># 1 2 3</span><br>s = &#123;<span class="hljs-string">&#x27;a&#x27;</span>: <span class="hljs-number">1</span>, <span class="hljs-string">&#x27;b&#x27;</span>: <span class="hljs-number">2</span>, <span class="hljs-string">&#x27;c&#x27;</span>: <span class="hljs-number">3</span>&#125;<br>b, c, d = s.items()  <span class="hljs-comment"># Python 3.6之后的版本略有不同</span><br><span class="hljs-built_in">print</span>(b)  <span class="hljs-comment"># (&#x27;a&#x27;, 1)</span><br>b, c, d = s<br><span class="hljs-built_in">print</span>(b)  <span class="hljs-comment"># a</span><br>b, c, d = s.values()<br><span class="hljs-built_in">print</span>(b, c, d)  <span class="hljs-comment"># 1 2 3</span><br>a, b, c = <span class="hljs-string">&#x27;ABC&#x27;</span>  <span class="hljs-comment"># 字符串也支持序列解包</span><br><span class="hljs-built_in">print</span>(a, b, c)  <span class="hljs-comment"># A B C</span><br><br>keys = [<span class="hljs-string">&#x27;a&#x27;</span>, <span class="hljs-string">&#x27;b&#x27;</span>, <span class="hljs-string">&#x27;c&#x27;</span>, <span class="hljs-string">&#x27;d&#x27;</span>]<br>values = [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>]<br><span class="hljs-keyword">for</span> k, v <span class="hljs-keyword">in</span> <span class="hljs-built_in">zip</span>(keys, values):<br>    <span class="hljs-built_in">print</span>(k, v)<br><span class="hljs-comment"># a 1</span><br><span class="hljs-comment"># b 2</span><br><span class="hljs-comment"># c 3</span><br><span class="hljs-comment"># d 4</span><br><br>x = [<span class="hljs-string">&#x27;a&#x27;</span>, <span class="hljs-string">&#x27;b&#x27;</span>, <span class="hljs-string">&#x27;c&#x27;</span>]<br><span class="hljs-keyword">for</span> i, v <span class="hljs-keyword">in</span> <span class="hljs-built_in">enumerate</span>(x):<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;The value on position &#123;0&#125; is &#123;1&#125;&#x27;</span>.<span class="hljs-built_in">format</span>(i, v))<br><span class="hljs-comment"># The value on position 0 is a</span><br><span class="hljs-comment"># The value on position 1 is b</span><br><span class="hljs-comment"># The value on position 2 is c</span><br><br><span class="hljs-comment"># 使用序列解包遍历字典元素：</span><br>s = &#123;<span class="hljs-string">&#x27;a&#x27;</span>: <span class="hljs-number">1</span>, <span class="hljs-string">&#x27;b&#x27;</span>: <span class="hljs-number">2</span>, <span class="hljs-string">&#x27;c&#x27;</span>: <span class="hljs-number">3</span>&#125;<br><span class="hljs-keyword">for</span> k, v <span class="hljs-keyword">in</span> s.items():  <span class="hljs-comment"># 字典中每个元素包含“键”和“值”两部分</span><br>    <span class="hljs-built_in">print</span>(k, v)<br><span class="hljs-comment"># a 1</span><br><span class="hljs-comment"># c 3</span><br><span class="hljs-comment"># b 2</span><br></code></pre></td></tr></table></figure><h4 id="（6）实训任务"><a href="#（6）实训任务" class="headerlink" title="（6）实训任务"></a><strong><font color="red">（6）实训任务</font></strong></h4><h5 id="1、实训任务1：使用列表实现筛选法求素数"><a href="#1、实训任务1：使用列表实现筛选法求素数" class="headerlink" title="1、实训任务1：使用列表实现筛选法求素数"></a><strong><font color="blue">1、实训任务1：使用列表实现筛选法求素数</font></strong></h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs python">实验目的：<br><span class="hljs-number">1</span>、理解筛选法求解素数的原理。<br><span class="hljs-number">2</span>、理解列表切片操作。<br><span class="hljs-number">3</span>、熟练运用内置函数 <span class="hljs-built_in">enumerate</span>()。<br><span class="hljs-number">4</span>、熟练运用内置函数 filer()。<br><span class="hljs-number">5</span>、理解序列解包工作原理。<br><span class="hljs-number">6</span>、初步了解选择结构和循环结构。<br>实验内容：<br>编写程序，输入一个大于 <span class="hljs-number">2</span> 的自然数，然后输出小于该数字的所有素数组成的列表。<br></code></pre></td></tr></table></figure><h5 id="2、实训任务2：使用集合实现筛选法求素数"><a href="#2、实训任务2：使用集合实现筛选法求素数" class="headerlink" title="2、实训任务2：使用集合实现筛选法求素数"></a><strong><font color="blue">2、实训任务2：使用集合实现筛选法求素数</font></strong></h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs python">实验目的：<br><span class="hljs-number">1</span>、理解求解素数的筛选法原理。<br><span class="hljs-number">2</span>、理解 Python 集合对象的 discard()方法。<br><span class="hljs-number">3</span>、熟练运用列表推导式。<br><span class="hljs-number">4</span>、理解 <span class="hljs-keyword">for</span> 循环工作原理。<br>实验内容：<br>输入一个大于 <span class="hljs-number">2</span> 的自然数，输出小于该数字的所有素数组成的集合。<br></code></pre></td></tr></table></figure><h3 id="（四）函数"><a href="#（四）函数" class="headerlink" title="（四）函数"></a>（四）函数</h3><h4 id="（1）函数的定义与使用"><a href="#（1）函数的定义与使用" class="headerlink" title="（1）函数的定义与使用"></a><strong><font color="red">（1）函数的定义与使用</font></strong></h4><h5 id="1、基本语法"><a href="#1、基本语法" class="headerlink" title="1、基本语法"></a><strong><font color="blue">1、基本语法</font></strong></h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">函数名</span>(<span class="hljs-params">[参数列表]</span>):<br>    <span class="hljs-string">&#x27;&#x27;&#x27;注释&#x27;&#x27;&#x27;</span><br>    函数体<br></code></pre></td></tr></table></figure><blockquote><p>注意事项</p><ol><li>函数形参不需要声明类型，也不需要指定函数返回值类型</li><li>即使该函数不需要接收任何参数，也必须保留一对空的圆括号</li><li>括号后面的冒号必不可少</li><li>函数体相对于def关键字必须保持一定的空格缩进</li><li>Python允许嵌套定义函数</li></ol></blockquote><p><strong>:案例1：编写函数，计算并输出生成斐波那契数列中所有小于参数n的所有值，并调用该函数进行测试</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">fib</span>(<span class="hljs-params">n</span>):<br>    a,b=<span class="hljs-number">1</span>,<span class="hljs-number">1</span><br>    <span class="hljs-keyword">while</span> a&lt;n:<br>        <span class="hljs-built_in">print</span>(a,end=<span class="hljs-string">&#x27; &#x27;</span>)<br>        a,b=b,a+b<br>fib(<span class="hljs-number">100</span>)<br></code></pre></td></tr></table></figure><h5 id="2、递归函数"><a href="#2、递归函数" class="headerlink" title="2、递归函数"></a><strong><font color="blue">2、递归函数</font></strong></h5><blockquote><p>​       函数递归通常用来把一个大型的复杂问题层层转化为一个与原来问题本质相同但规模很小、很容易解决或描述的问题，只需要很少的代码就可以描述解决问题过程中需要的大量重复计算。在编写递归函数时，应注意以下几点。</p><ol><li>每次递归应保持问题性质不变。</li><li>每次递归应使用更小或更简单的输入。</li><li>必须有一个能够直接处理而不需要再次进行递归的特殊情况来保证递归过程可以结束。</li><li>函数递归深度不能太大，否则会导致内存崩溃。</li></ol></blockquote><p><strong>案例2：编写函数，使用递归法对整数进行因数分解。</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> random <span class="hljs-keyword">import</span> randint<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">factors</span>(<span class="hljs-params">num</span>):<br>    <span class="hljs-comment"># 每次都从2开始查找因数</span><br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">2</span>, <span class="hljs-built_in">int</span>(num**<span class="hljs-number">0.5</span>)+<span class="hljs-number">1</span>):<br>        <span class="hljs-comment"># 找到一个因数</span><br>        <span class="hljs-keyword">if</span> num%i == <span class="hljs-number">0</span>:<br>            facs.append(i)<br>            <span class="hljs-comment"># 对商继续分解，重复这个过程</span><br>            factors(num//i)<br>            <span class="hljs-comment"># 注意，这个break非常重要</span><br>            <span class="hljs-keyword">break</span><br>    <span class="hljs-keyword">else</span>:<br>        <span class="hljs-comment"># 不可分解了，自身也是个因数</span><br>        facs.append(num)<br>facs = []<br>n = randint(<span class="hljs-number">2</span>, <span class="hljs-number">10</span>**<span class="hljs-number">8</span>)<br>factors(n)<br>result = <span class="hljs-string">&#x27;*&#x27;</span>.join(<span class="hljs-built_in">map</span>(<span class="hljs-built_in">str</span>, facs))<br><span class="hljs-keyword">if</span> n == <span class="hljs-built_in">eval</span>(result):<br>    <span class="hljs-built_in">print</span>(n, <span class="hljs-string">&#x27;= &#x27;</span>+result)<br><br></code></pre></td></tr></table></figure><h4 id="（2）函数参数"><a href="#（2）函数参数" class="headerlink" title="（2）函数参数"></a><strong><font color="red">（2）函数参数</font></strong></h4><h5 id="1、位置参数"><a href="#1、位置参数" class="headerlink" title="1、位置参数"></a><strong><font color="blue">1、位置参数</font></strong></h5><blockquote><p>​       位置参数（positional arguments）是比较常用的形式，调用函数时实参和形参的==顺序必须严格一致==，并且实参和形参的数量必须相同。</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">def</span> <span class="hljs-title function_">demo</span>(<span class="hljs-params">a, b, c</span>):<br>    <span class="hljs-built_in">print</span>(a, b, c)<br><br><span class="hljs-meta">&gt;&gt;&gt; </span>demo(<span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>)                   <span class="hljs-comment"># 按位置传递参数</span><br><span class="hljs-number">3</span> <span class="hljs-number">4</span> <span class="hljs-number">5</span><br><span class="hljs-meta">&gt;&gt;&gt; </span>demo(<span class="hljs-number">3</span>, <span class="hljs-number">5</span>, <span class="hljs-number">4</span>)<br><span class="hljs-number">3</span> <span class="hljs-number">5</span> <span class="hljs-number">4</span><br><span class="hljs-meta">&gt;&gt;&gt; </span>demo(<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>)                <span class="hljs-comment"># 实参与形参数量必须相同</span><br>TypeError: demo() takes <span class="hljs-number">3</span> positional arguments but <span class="hljs-number">4</span> were given<br><br></code></pre></td></tr></table></figure><p><strong><font color="blue">2、默认值参数</font></strong></p><blockquote><p>•在调用函数时，可以不用为设置了默认值的形参传递实参，此时函数将会直接使用函数定义时设置的默认值，当然也可以通过显式赋值来替换其默认值。在调用函数时是否为默认值参数传递实参是可选的。</p><p>•需要注意的是，在定义带有默认值参数的函数时，任何一个默认值参数右边都不能再出现没有默认值的普通位置参数，否则会提示语法错误。</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">say</span>(<span class="hljs-params">message, times=<span class="hljs-number">1</span></span>):<br>    <span class="hljs-built_in">print</span>((message + <span class="hljs-string">&#x27; &#x27;</span>) * times)<br>    <br>say(<span class="hljs-string">&quot;hello&quot;</span>)    <span class="hljs-comment"># hello</span><br>say(<span class="hljs-string">&quot;hello&quot;</span>,<span class="hljs-number">3</span>)  <span class="hljs-comment"># hello hello hello</span><br></code></pre></td></tr></table></figure><h5 id="3、关键参数"><a href="#3、关键参数" class="headerlink" title="3、关键参数"></a><strong><font color="blue">3、关键参数</font></strong></h5><blockquote><p>​       通过关键参数可以按参数名字传递实参，明确指定哪个实参传递给哪个形参，<strong>实参顺序可以和形参顺序不一致</strong>，但不影响参数值的传递结果，避免了用户需要牢记参数位置和顺序的麻烦，使得函数的调用和参数传递更加灵活方便</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">demo</span>(<span class="hljs-params">a, b, c=<span class="hljs-number">5</span></span>):<br>    <span class="hljs-built_in">print</span>(a, b, c)<br>demo(<span class="hljs-number">3</span>, <span class="hljs-number">7</span>)  <span class="hljs-comment"># 3 7 5</span><br>demo(a=<span class="hljs-number">7</span>, b=<span class="hljs-number">3</span>, c=<span class="hljs-number">6</span>)  <span class="hljs-comment"># 7 3 6</span><br>demo(c=<span class="hljs-number">8</span>, a=<span class="hljs-number">9</span>, b=<span class="hljs-number">0</span>)  <span class="hljs-comment"># 9 0 8</span><br></code></pre></td></tr></table></figure><h5 id="4、不定长参数"><a href="#4、不定长参数" class="headerlink" title="4、不定长参数"></a><strong><font color="blue">4、不定长参数</font></strong></h5><blockquote><p>不定长度参数主要有两种形式：在参数名前加1个<em>或2个</em>*</p><p>*parameter用来接收多个位置参数并将其放在元组中</p><p>**parameter用来接收多个关键参数并将其放在字典中</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">demo</span>(<span class="hljs-params">*p</span>):<br>    <span class="hljs-built_in">print</span>(p)<br>demo(<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>)  <span class="hljs-comment"># (1, 2, 3)</span><br>demo(<span class="hljs-number">1</span>, <span class="hljs-number">2</span>)  <span class="hljs-comment"># (1, 2)</span><br>demo(<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>, <span class="hljs-number">6</span>, <span class="hljs-number">7</span>)  <span class="hljs-comment"># (1, 2, 3, 4, 5, 6, 7)</span><br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">demo</span>(<span class="hljs-params">**p</span>):<br>    <span class="hljs-keyword">for</span> item <span class="hljs-keyword">in</span> p.items():<br>        <span class="hljs-built_in">print</span>(item)<br><br>demo(x=<span class="hljs-number">1</span>, y=<span class="hljs-number">2</span>, z=<span class="hljs-number">3</span>)<br><span class="hljs-comment"># (&#x27;x&#x27;, 1)</span><br><span class="hljs-comment"># (&#x27;y&#x27;, 2)</span><br><span class="hljs-comment"># (&#x27;z&#x27;, 3)</span><br></code></pre></td></tr></table></figure><h5 id="5、传递参数时的序列解包"><a href="#5、传递参数时的序列解包" class="headerlink" title="5、传递参数时的序列解包"></a><strong><font color="blue">5、传递参数时的序列解包</font></strong></h5><blockquote><p>传递参数时，可以通过在实参序列前加一个星号将其解包为普通位置参数，然后传递给多个单变量形参。</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">demo</span>(<span class="hljs-params">a, b, c</span>):<br>    <span class="hljs-built_in">print</span>(a + b + c)<br><br><br>seq = [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>]<br>demo(*seq)  <span class="hljs-comment"># 6</span><br><br>tup = (<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>)<br>demo(*tup)  <span class="hljs-comment"># 6</span><br><br>dic = &#123;<span class="hljs-number">1</span>: <span class="hljs-string">&#x27;a&#x27;</span>, <span class="hljs-number">2</span>: <span class="hljs-string">&#x27;b&#x27;</span>, <span class="hljs-number">3</span>: <span class="hljs-string">&#x27;c&#x27;</span>&#125;<br>demo(*dic)  <span class="hljs-comment"># 6</span><br><br><span class="hljs-type">Set</span> = &#123;<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>&#125;<br>demo(*<span class="hljs-type">Set</span>)  <span class="hljs-comment"># 6</span><br><br>demo(*dic.values())  <span class="hljs-comment"># abc</span><br><br></code></pre></td></tr></table></figure><blockquote><p>如果函数实参是字典，可以在前面加两个星号进行解包，等价于关键参数</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">demo</span>(<span class="hljs-params">a, b, c</span>):<br>    <span class="hljs-built_in">print</span>(a + b + c)<br><br><br>dic = &#123;<span class="hljs-string">&#x27;a&#x27;</span>: <span class="hljs-number">1</span>, <span class="hljs-string">&#x27;b&#x27;</span>: <span class="hljs-number">2</span>, <span class="hljs-string">&#x27;c&#x27;</span>: <span class="hljs-number">3</span>&#125;<br>demo(**dic)  <span class="hljs-comment"># 6</span><br><br>demo(a=<span class="hljs-number">1</span>, b=<span class="hljs-number">2</span>, c=<span class="hljs-number">3</span>)  <span class="hljs-comment"># 6</span><br><br>demo(*dic.values())  <span class="hljs-comment"># 6</span><br><br></code></pre></td></tr></table></figure><h4 id="（3）变量的作用域"><a href="#（3）变量的作用域" class="headerlink" title="（3）变量的作用域"></a><strong><font color="red">（3）变量的作用域</font></strong></h4><blockquote><ul><li><p>变量起作用的代码范围称为变量的作用域，不同作用域内变量名可以相同，互不影响。</p></li><li><p>在函数内部定义的普通变量只在函数内部起作用，称为局部变量。当函数执行结束后，局部变量自动删除，不再可以使用。</p></li><li><p>局部变量的引用比全局变量速度快，应优先考虑使用。</p></li><li><p>全局变量可以通过关键字global来定义。这分为两种情况：</p></li><li><p>一个变量已在函数外定义，如果在函数内需要为这个变量赋值，并要将这个赋值结果反映到函数外，可以在函数内使用global将其声明为全局变量。</p></li><li><p>如果一个变量在函数外没有定义，在函数内部也可以直接将一个变量定义为全局变量，该函数执行后，将增加一个新的全局变量。</p></li></ul></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">demo</span>():<br>    <span class="hljs-keyword">global</span> x<br>    x = <span class="hljs-number">3</span><br>    y = <span class="hljs-number">4</span><br>    <span class="hljs-built_in">print</span>(x, y)<br><br><br>x = <span class="hljs-number">5</span><br>demo()  <span class="hljs-comment"># 3 4</span><br><span class="hljs-built_in">print</span>(x)  <span class="hljs-comment"># 3</span><br><span class="hljs-comment"># print(y) # NameError: name &#x27;y&#x27; is not defined</span><br><span class="hljs-keyword">del</span> x<br><span class="hljs-comment"># print(x)  #NameError: name &#x27;x&#x27; is not defined</span><br>demo()<br><span class="hljs-built_in">print</span>(x)  <span class="hljs-comment"># 3 4</span><br><span class="hljs-built_in">print</span>(y)  <span class="hljs-comment"># NameError: name &#x27;y&#x27; is not defined</span><br><br></code></pre></td></tr></table></figure><blockquote><p>如果局部变量与全局变量具有相同的名字，那么该局部变量会在自己的作用域内隐藏同名的全局变量。</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">demo</span>():<br>    x = <span class="hljs-number">3</span>  <span class="hljs-comment"># 创建了局部变量，并自动隐藏了同名的全局变量</span><br><br><br>x = <span class="hljs-number">5</span><br><span class="hljs-built_in">print</span>(x)  <span class="hljs-comment"># 5</span><br>demo()<br><span class="hljs-built_in">print</span>(x)  <span class="hljs-comment"># 5         # 函数执行不影响外面全局变量的值</span><br></code></pre></td></tr></table></figure><h4 id="（4）lamba表达式"><a href="#（4）lamba表达式" class="headerlink" title="（4）lamba表达式"></a><strong><font color="red">（4）lamba表达式</font></strong></h4><blockquote><p>lambda表达式可以用来声明匿名函数，也就是没有函数名字的临时使用的小函数，尤其适合需要一个函数作为另一个函数参数的场合。也可以定义具名函数。</p><p>lambda表达式只可以包含一个表达式，该表达式的计算结果可以看作是函数的返回值，不允许包含复合语句，但在表达式中可以调用其他函数</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs python">f = <span class="hljs-keyword">lambda</span> x, y, z: x + y + z  <span class="hljs-comment"># 可以给lambda表达式起名字</span><br><span class="hljs-built_in">print</span>(f(<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>))  <span class="hljs-comment"># 6 # 像函数一样调用</span><br>g = <span class="hljs-keyword">lambda</span> x, y=<span class="hljs-number">2</span>, z=<span class="hljs-number">3</span>: x + y + z  <span class="hljs-comment"># 参数默认值</span><br><span class="hljs-built_in">print</span>(g(<span class="hljs-number">1</span>))  <span class="hljs-comment"># 6</span><br><span class="hljs-built_in">print</span>(g(<span class="hljs-number">2</span>, z=<span class="hljs-number">4</span>, y=<span class="hljs-number">5</span>))  <span class="hljs-comment"># 11 # 关键参数</span><br>L = [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>]<br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">list</span>(<span class="hljs-built_in">map</span>(<span class="hljs-keyword">lambda</span> x: x + <span class="hljs-number">10</span>, L)))  <span class="hljs-comment"># [11, 12, 13, 14, 15]</span><br><span class="hljs-built_in">print</span>(L)  <span class="hljs-comment"># [1, 2, 3, 4, 5]</span><br></code></pre></td></tr></table></figure><h4 id="（5）生成器函数"><a href="#（5）生成器函数" class="headerlink" title="（5）生成器函数"></a><strong><font color="red">（5）生成器函数</font></strong></h4><blockquote><ul><li>包含yield语句的函数可以用来创建生成器对象，这样的函数也称生成器函数。</li><li>yield语句与return语句的作用相似，都是用来从函数中返回值。与return语句不同的是，return语句一旦执行会立刻结束函数的运行，而每次执行到yield语句并返回一个值之后会暂停或挂起后面代码的执行，下次通过生成器对象的__next__()方法、内置函数next()、for循环遍历生成器对象元素或其他方式显式“索要”数据时恢复执行。</li><li>生成器具有惰性求值的特点，占用内存少，适合大数据处理</li></ul></blockquote><p><strong>案例3</strong> 编写并使用能够生成斐波那契数列的生成器函数。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">f</span>():<br>    a, b = <span class="hljs-number">1</span>, <span class="hljs-number">1</span>  <span class="hljs-comment"># 序列解包，同时为多个元素赋值</span><br>    <span class="hljs-keyword">while</span> <span class="hljs-literal">True</span>:<br>        <span class="hljs-keyword">yield</span> a  <span class="hljs-comment"># 暂停执行，需要时再产生一个新元素</span><br>        a, b = b, a + b  <span class="hljs-comment"># 序列解包，继续生成新元素</span><br><br><br>a = f()  <span class="hljs-comment"># 创建生成器对象</span><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">10</span>):  <span class="hljs-comment"># 斐波那契数列中前10个元素</span><br>    <span class="hljs-built_in">print</span>(<span class="hljs-built_in">next</span>(a), end=<span class="hljs-string">&#x27; &#x27;</span>)   <br><span class="hljs-comment"># 1 1 2 3 5 8 13 21 34 55 </span><br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs python"><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">f</span>():<br>    a, b = <span class="hljs-number">1</span>, <span class="hljs-number">1</span>  <span class="hljs-comment"># 序列解包，同时为多个元素赋值</span><br>    <span class="hljs-keyword">while</span> <span class="hljs-literal">True</span>:<br>        <span class="hljs-keyword">yield</span> a  <span class="hljs-comment"># 暂停执行，需要时再产生一个新元素</span><br>        a, b = b, a + b  <span class="hljs-comment"># 序列解包，继续生成新元素</span><br><br><br>a = f()  <span class="hljs-comment"># 创建生成器对象</span><br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">next</span>(a))  <span class="hljs-comment"># 1 # 使用内置函数next()获取生成器对象中的元素</span><br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">next</span>(a))  <span class="hljs-comment"># 1 #每次索取新元素时，由yield语句生成</span><br><span class="hljs-built_in">print</span>(a.__next__())  <span class="hljs-comment"># 2 # 也可以调用生成器对象的__next__()方法</span><br><span class="hljs-built_in">print</span>(a.__next__())  <span class="hljs-comment"># 3 # 也可以调用生成器对象的__next__()方法</span><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> f():  <span class="hljs-comment"># 斐波那契数列中第一个大于100的元素</span><br>    <span class="hljs-keyword">if</span> i &gt; <span class="hljs-number">100</span>:<br>        <span class="hljs-built_in">print</span>(i, end=<span class="hljs-string">&#x27; &#x27;</span>)<br>        <span class="hljs-keyword">break</span><br><span class="hljs-comment"># 144</span><br></code></pre></td></tr></table></figure><h4 id="（6）实训任务-1"><a href="#（6）实训任务-1" class="headerlink" title="（6）实训任务"></a><strong><font color="red">（6）实训任务</font></strong></h4><h5 id="1、实训任务1：编写函数，接收一个整数t为参数，打印杨辉三角前t行。"><a href="#1、实训任务1：编写函数，接收一个整数t为参数，打印杨辉三角前t行。" class="headerlink" title="1、实训任务1：编写函数，接收一个整数t为参数，打印杨辉三角前t行。"></a><strong><font color="blue">1、实训任务1：编写函数，接收一个整数t为参数，打印杨辉三角前t行。</font></strong></h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs python">打印结果如下<br>[<span class="hljs-number">1</span>]<br>[<span class="hljs-number">1</span>, <span class="hljs-number">1</span>]<br>[<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">1</span>]<br>[<span class="hljs-number">1</span>, <span class="hljs-number">3</span>, <span class="hljs-number">3</span>, <span class="hljs-number">1</span>]<br>[<span class="hljs-number">1</span>, <span class="hljs-number">4</span>, <span class="hljs-number">6</span>, <span class="hljs-number">4</span>, <span class="hljs-number">1</span>]<br>[<span class="hljs-number">1</span>, <span class="hljs-number">5</span>, <span class="hljs-number">10</span>, <span class="hljs-number">10</span>, <span class="hljs-number">5</span>, <span class="hljs-number">1</span>]<br>[<span class="hljs-number">1</span>, <span class="hljs-number">6</span>, <span class="hljs-number">15</span>, <span class="hljs-number">20</span>, <span class="hljs-number">15</span>, <span class="hljs-number">6</span>, <span class="hljs-number">1</span>]<br>[<span class="hljs-number">1</span>, <span class="hljs-number">7</span>, <span class="hljs-number">21</span>, <span class="hljs-number">35</span>, <span class="hljs-number">35</span>, <span class="hljs-number">21</span>, <span class="hljs-number">7</span>, <span class="hljs-number">1</span>]<br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 参考代码</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">yanghui</span>(<span class="hljs-params">t</span>):<br>    <span class="hljs-built_in">print</span>([<span class="hljs-number">1</span>])<br>    line = [<span class="hljs-number">1</span>, <span class="hljs-number">1</span>]<br>    <span class="hljs-built_in">print</span>(line)<br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">2</span>, t):<br>        r = []<br>        <span class="hljs-keyword">for</span> j <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">0</span>, <span class="hljs-built_in">len</span>(line)-<span class="hljs-number">1</span>):<br>            r.append(line[j]+line[j+<span class="hljs-number">1</span>])<br>        line = [<span class="hljs-number">1</span>]+r+[<span class="hljs-number">1</span>]<br>        <span class="hljs-built_in">print</span>(line)<br><br>yanghui(<span class="hljs-number">8</span>)<br></code></pre></td></tr></table></figure><h5 id="2、实训任务2：编写函数，模拟二分法查找"><a href="#2、实训任务2：编写函数，模拟二分法查找" class="headerlink" title="2、实训任务2：编写函数，模拟二分法查找"></a><strong><font color="blue">2、实训任务2：编写函数，模拟二分法查找</font></strong></h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 参考代码</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">binarySearch</span>(<span class="hljs-params">lst, value</span>):<br>    start = <span class="hljs-number">0</span><br>    end = <span class="hljs-built_in">len</span>(lst)<br>    <span class="hljs-keyword">while</span> start &lt;= end:<br>        <span class="hljs-comment"># 计算中间位置</span><br>        middle = (start + end) // <span class="hljs-number">2</span><br>        <span class="hljs-comment"># 查找成功，返回元素对应的位置</span><br>        <span class="hljs-keyword">if</span> value == lst[middle]:<br>            <span class="hljs-keyword">return</span> middle<br>        <span class="hljs-comment"># 在后面一半元素中继续查找</span><br>        <span class="hljs-keyword">elif</span> value &gt; lst[middle]:<br>            start = middle + <span class="hljs-number">1</span><br>        <span class="hljs-comment"># 在前面一半元素中继续查找</span><br>        <span class="hljs-keyword">elif</span> value &lt; lst[middle]:<br>            end = middle - <span class="hljs-number">1</span><br>    <span class="hljs-comment"># 查找不成功，返回False</span><br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">False</span><br>lst = [randint(<span class="hljs-number">1</span>,<span class="hljs-number">50</span>) <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">20</span>)]<br>lst.sort()<br><span class="hljs-built_in">print</span>(lst)<br>result = binarySearch(lst, <span class="hljs-number">30</span>)<br><span class="hljs-keyword">if</span> result != <span class="hljs-literal">False</span>:<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;Success, its position is:&#x27;</span>, result)<br><span class="hljs-keyword">else</span>:<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;Fail, Not exist.&#x27;</span>)<br></code></pre></td></tr></table></figure><h4 id="（7）闭包（补充）"><a href="#（7）闭包（补充）" class="headerlink" title="（7）闭包（补充）"></a>（7）闭包（补充）</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 闭包函数</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">fun</span>(<span class="hljs-params">num1</span>):<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">inner</span>(<span class="hljs-params">num2</span>):<br>        <span class="hljs-keyword">return</span> num1+num2<br>    <span class="hljs-keyword">return</span> inner<br><span class="hljs-built_in">print</span>(fun(<span class="hljs-number">10</span>))    function fun.&lt;<span class="hljs-built_in">locals</span>&gt;.inner at <span class="hljs-number">0x0000021F1F9B8700</span>&gt;<br>fun_new=fun(<span class="hljs-number">10</span>)<br><span class="hljs-built_in">print</span>(fun_new(<span class="hljs-number">10</span>))  <span class="hljs-comment"># 20</span><br></code></pre></td></tr></table></figure><p>满足的条件：</p><ol><li><p>嵌套在函数里面，fun函数嵌套了inner函数</p></li><li><p>inner中的变量是外部函数fun的参数num1</p></li><li><p>外部函数fun的返回值是内部函数inner的引用</p><p>举例：y=ax+b</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">line_conf</span>(<span class="hljs-params">a, b</span>):<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">line</span>(<span class="hljs-params">x</span>):<br>        <span class="hljs-keyword">return</span> a * x + b<br>    <span class="hljs-keyword">return</span> line<br>line_one = line_conf(<span class="hljs-number">1</span>, <span class="hljs-number">3</span>)<br>line_two = line_conf(<span class="hljs-number">4</span>, <span class="hljs-number">5</span>)<br><span class="hljs-built_in">print</span>(line_one(<span class="hljs-number">5</span>))  <span class="hljs-comment"># 8</span><br><span class="hljs-built_in">print</span>(line_two(<span class="hljs-number">5</span>))  <span class="hljs-comment"># 25</span><br></code></pre></td></tr></table></figure></li></ol><h4 id="（8）装饰器（补充）"><a href="#（8）装饰器（补充）" class="headerlink" title="（8）装饰器（补充）"></a>（8）装饰器（补充）</h4><p>。。。。</p><h3 id="（五）字符串"><a href="#（五）字符串" class="headerlink" title="（五）字符串"></a>（五）字符串</h3><h4 id="（1）字符串描述"><a href="#（1）字符串描述" class="headerlink" title="（1）字符串描述"></a><strong><font color="red">（1）字符串描述</font></strong></h4><ul><li>•在Python中，字符串属于不可变有序序列，使用单引号、双引号、三单引号或三双引号作为定界符，并且不同的定界符之间可以互相嵌套。</li><li>‘abc’、’123’、’中国’</li><li>“Python”</li><li>‘’’Tom said,”Let’s go”‘’’</li><li>除了支持序列通用方法（包括双向索引、比较大小、计算长度、切片、成员测试等操作）以外，字符串类型还支持一些特有的操作方法，例如字符串格式化、查找、替换、排版等等。</li><li>字符串属于不可变序列，不能直接对字符串对象进行元素增加、修改与删除等操作，切片操作也只能访问其中的元素而无法使用切片来修改字符串中的字符。</li></ul><h5 id="-1"><a href="#-1" class="headerlink" title=""></a></h5><h4 id="（2）字符串编码格式"><a href="#（2）字符串编码格式" class="headerlink" title="（2）字符串编码格式"></a><strong><font color="red">（2）字符串编码格式</font></strong></h4><ul><li><p>最早的字符串编码是美国标准信息交换码ASCII，仅对10个数字、26个大写英文字母、26个小写英文字母及一些其他符号进行了编码。ASCII码采用1个字节来对字符进行编码，最多只能表示256个符号。</p></li><li><p>GB2312是我国制定的中文编码，使用1个字节表示英语，2个字节表示中文；GBK是GB2312的扩充，而CP936是微软在GBK基础上开发的编码方式。GB2312、GBK和CP936都是使用2个字节表示中文。</p></li><li><p>UTF-8对全世界所有国家需要用到的字符进行了编码，以1个字节表示英语字符(兼容ASCII)，以3个字节表示常见中文字符，还有些语言的符号使用2个字节（例如俄语和希腊语符号）或4个字节。</p></li><li><p>不同编码格式之间相差很大，采用不同的编码格式意味着不同的表示和存储形式，把同一字符存入文件时，写入的内容可能会不同，在试图理解其内容时必须了解编码规则并进行正确的解码。如果解码方法不正确就无法还原信息，从这个角度来讲，字符串编码也具有加密的效果</p></li><li><p><strong>Python 3.x完全支持中文字符，默认使用UTF8编码格式，无论是一个数字、英文字母，还是一个汉字，在统计字符串长度时都按一个字符对待和处理</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-meta">&gt;&gt;&gt; </span>s = <span class="hljs-string">&#x27;中国山东烟台&#x27;</span><br><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">len</span>(s)<span class="hljs-comment"># 字符串长度，或者包含的字符个数</span><br><span class="hljs-number">6</span><br><span class="hljs-meta">&gt;&gt;&gt; </span>s = <span class="hljs-string">&#x27;中国山东烟台ABCDE&#x27;</span><span class="hljs-comment"># 中文与英文字符同样对待，都算一个字符</span><br><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">len</span>(s)<br><span class="hljs-number">11</span><br><span class="hljs-meta">&gt;&gt;&gt; </span>姓名 = <span class="hljs-string">&#x27;张三&#x27;</span><span class="hljs-comment"># 使用中文作为变量名</span><br><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">print</span>(姓名)<span class="hljs-comment"># 输出变量的值</span><br>张三<br><br></code></pre></td></tr></table></figure></li></ul><h4 id="（3）转义字符与原始字符串"><a href="#（3）转义字符与原始字符串" class="headerlink" title="（3）转义字符与原始字符串"></a><strong><font color="red">（3）转义字符与原始字符串</font></strong></h4><table><thead><tr><th><strong>转义字符</strong></th><th><strong>含义</strong></th><th><strong>转义字符</strong></th><th><strong>含义</strong></th></tr></thead><tbody><tr><td>\b</td><td>退格，把光标移动到前一列位置</td><td>\</td><td>一个斜线\</td></tr><tr><td>\f</td><td>换页符</td><td>&#39;</td><td>单引号’</td></tr><tr><td>\n</td><td>换行符</td><td>&quot;</td><td>双引号”</td></tr><tr><td>\r</td><td>回车</td><td>\ooo</td><td>3位八进制数对应的字符</td></tr><tr><td>\t</td><td>水平制表符</td><td>\xhh</td><td>2位十六进制数对应的字符</td></tr><tr><td>\v</td><td>垂直制表符</td><td>\uhhhh</td><td>4位十六进制数表示的Unicode字符</td></tr><tr><td>\Uxxxxxxxx</td><td>8位十六进制数表示的Unicode字符</td><td></td><td></td></tr></tbody></table><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;Hello\nWorld&#x27;</span>)            <span class="hljs-comment"># 包含转义字符的字符串</span><br>Hello<br>World<br><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;\101&#x27;</span>)                    <span class="hljs-comment"># 三位八进制数对应的字符</span><br>A<br><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;\x41&#x27;</span>)                    <span class="hljs-comment"># 两位十六进制数对应的字符</span><br>A<br><span class="hljs-meta">&gt;&gt;&gt; </span>path = <span class="hljs-string">&#x27;C:\Windows\notepad.exe&#x27;</span><br><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">print</span>(path)                       <span class="hljs-comment"># 字符\n被转义为换行符</span><br>C:\Windows<br>otepad.exe<br><span class="hljs-meta">&gt;&gt;&gt; </span>path = <span class="hljs-string">r&#x27;C:\Windows\notepad.exe&#x27;</span>  <span class="hljs-comment"># 原始字符串，任何字符都不转义</span><br><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">print</span>(path)<br>C:\Windows\notepad.exe<br></code></pre></td></tr></table></figure><h4 id="（4）字符串格式化"><a href="#（4）字符串格式化" class="headerlink" title="（4）字符串格式化"></a><strong><font color="red">（4）字符串格式化</font></strong></h4><h5 id="1、-使用-运算符进行格式化"><a href="#1、-使用-运算符进行格式化" class="headerlink" title="1、 使用%运算符进行格式化"></a><strong><font color="blue">1、 使用%运算符进行格式化</font></strong></h5><p><img src="/img/python_3.png" srcset="/img/loading.gif" lazyload alt="python_3"></p><table><thead><tr><th><strong>格式字符</strong></th><th><strong>说明</strong></th></tr></thead><tbody><tr><td>%s</td><td>字符串  (采用str()的显示)</td></tr><tr><td>%r</td><td>字符串  (采用repr()的显示)</td></tr><tr><td>%c</td><td>单个字符</td></tr><tr><td>%d</td><td>十进制整数</td></tr><tr><td>%i</td><td>十进制整数</td></tr><tr><td>%o</td><td>八进制整数</td></tr><tr><td>%x</td><td>十六进制整数</td></tr><tr><td>%e</td><td>指数  (基底写为e)</td></tr><tr><td>%E</td><td>指数  (基底写为E)</td></tr><tr><td>%f、%F</td><td>浮点数</td></tr><tr><td>%g</td><td>指数(e)或浮点数  (根据显示长度)</td></tr><tr><td>%G</td><td>指数(E)或浮点数  (根据显示长度)</td></tr><tr><td>%%</td><td>一个字符”%”</td></tr></tbody></table><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-meta">&gt;&gt;&gt; </span>x = <span class="hljs-number">1235</span><br><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-string">&quot;%o&quot;</span> % x   <span class="hljs-comment"># 格式化为八进制整数</span><br><span class="hljs-string">&quot;2323&quot;</span><br><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-string">&quot;%x&quot;</span> % x   <span class="hljs-comment"># 格式化为十六进制整数</span><br><span class="hljs-string">&quot;4d3&quot;</span><br><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-string">&quot;%e&quot;</span> % x   <span class="hljs-comment"># 格式化为指数形式</span><br><span class="hljs-string">&quot;1.235000e+03&quot;</span><br><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">chr</span>(<span class="hljs-built_in">ord</span>(<span class="hljs-string">&quot;3&quot;</span>)+<span class="hljs-number">1</span>)  <br><span class="hljs-string">&quot;4&quot;</span><br><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-string">&quot;%s&quot;</span> % <span class="hljs-number">65</span>    <span class="hljs-comment"># 格式化为字符串，等价于str()</span><br><span class="hljs-string">&quot;65&quot;</span><br><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-string">&quot;%d&quot;</span> % <span class="hljs-string">&quot;555&quot;</span><br>TypeError: %d <span class="hljs-built_in">format</span>: a number <span class="hljs-keyword">is</span> required, <span class="hljs-keyword">not</span> <span class="hljs-built_in">str</span><br><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-string">&#x27;%d,%c&#x27;</span> % (<span class="hljs-number">68</span>, <span class="hljs-number">68</span>)   <span class="hljs-comment"># 使用元组对字符串进行格式化，按位置进行对应</span><br><span class="hljs-string">&#x27;68,D&#x27;</span><br><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-string">&#x27;%s&#x27;</span> % <span class="hljs-built_in">set</span>(<span class="hljs-built_in">range</span>(<span class="hljs-number">5</span>)) <span class="hljs-comment"># 把集合格式化为字符串</span><br><span class="hljs-string">&#x27;&#123;0, 1, 2, 3, 4&#125;&#x27;</span><br><br></code></pre></td></tr></table></figure><h5 id="2、-使用format方法进行格式化"><a href="#2、-使用format方法进行格式化" class="headerlink" title="2、 使用format方法进行格式化"></a><strong><font color="blue">2、 使用format方法进行格式化</font></strong></h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-number">1</span>/<span class="hljs-number">3</span><br><span class="hljs-number">0.3333333333333333</span><br><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;&#123;0:.3f&#125;&#x27;</span>.<span class="hljs-built_in">format</span>(<span class="hljs-number">1</span>/<span class="hljs-number">3</span>))         <span class="hljs-comment"># 保留3位小数</span><br><span class="hljs-number">0.333</span><br><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-string">&#x27;&#123;0:%&#125;&#x27;</span>.<span class="hljs-built_in">format</span>(<span class="hljs-number">3.5</span>)                  <span class="hljs-comment"># 格式化为百分数</span><br><span class="hljs-string">&#x27;350.000000%&#x27;</span><br><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-string">&#x27;&#123;0:_&#125;,&#123;0:_x&#125;&#x27;</span>.<span class="hljs-built_in">format</span>(<span class="hljs-number">1000000</span>)       <span class="hljs-comment"># Python 3.6.0及更高版本支持</span><br><span class="hljs-string">&#x27;1_000_000,f_4240&#x27;</span><br><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-string">&#x27;&#123;0:_&#125;,&#123;0:_x&#125;&#x27;</span>.<span class="hljs-built_in">format</span>(<span class="hljs-number">10000000</span>)      <span class="hljs-comment"># Python 3.6.0及更高版本支持</span><br><span class="hljs-string">&#x27;10_000_000,98_9680&#x27;</span><br><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;The number &#123;0:,&#125; in hex is: &#123;0:#x&#125;, the number &#123;1&#125; in oct is &#123;1:#o&#125;&quot;</span>.<span class="hljs-built_in">format</span>(<span class="hljs-number">5555</span>, <span class="hljs-number">55</span>))<br>The number <span class="hljs-number">5</span>,<span class="hljs-number">555</span> <span class="hljs-keyword">in</span> <span class="hljs-built_in">hex</span> <span class="hljs-keyword">is</span>: <span class="hljs-number">0x15b3</span>, the number <span class="hljs-number">55</span> <span class="hljs-keyword">in</span> <span class="hljs-built_in">oct</span> <span class="hljs-keyword">is</span> <span class="hljs-number">0o67</span><br><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;The number &#123;1:,&#125; in hex is: &#123;1:#x&#125;, the number &#123;0&#125; in oct is &#123;0:o&#125;&quot;</span>.<span class="hljs-built_in">format</span>(<span class="hljs-number">5555</span>, <span class="hljs-number">55</span>))<br>The number <span class="hljs-number">55</span> <span class="hljs-keyword">in</span> <span class="hljs-built_in">hex</span> <span class="hljs-keyword">is</span>: <span class="hljs-number">0x37</span>, the number <span class="hljs-number">5555</span> <span class="hljs-keyword">in</span> <span class="hljs-built_in">oct</span> <span class="hljs-keyword">is</span> <span class="hljs-number">12663</span><br><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;my name is &#123;name&#125;, my age is &#123;age&#125;, and my QQ is &#123;qq&#125;&quot;</span>.<span class="hljs-built_in">format</span>(name=<span class="hljs-string">&quot;Dong Fuguo&quot;</span>, age=<span class="hljs-number">40</span>, qq=<span class="hljs-string">&quot;30646****&quot;</span>))<br>my name <span class="hljs-keyword">is</span> Dong Fuguo, my age <span class="hljs-keyword">is</span> <span class="hljs-number">40</span>, <span class="hljs-keyword">and</span> my QQ <span class="hljs-keyword">is</span> <span class="hljs-number">30646</span>****<br><span class="hljs-meta">&gt;&gt;&gt; </span>position = (<span class="hljs-number">5</span>, <span class="hljs-number">8</span>, <span class="hljs-number">13</span>)<br><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;X:&#123;0[0]&#125;;Y:&#123;0[1]&#125;;Z:&#123;0[2]&#125;&quot;</span>.<span class="hljs-built_in">format</span>(position))<br>X:<span class="hljs-number">5</span>;Y:<span class="hljs-number">8</span>;Z:<span class="hljs-number">13</span><br><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> datetime <span class="hljs-keyword">import</span> datetime<br><span class="hljs-meta">&gt;&gt;&gt; </span>now = datetime.now()<br><span class="hljs-meta">&gt;&gt;&gt; </span>now<br>datetime.datetime(<span class="hljs-number">2023</span>, <span class="hljs-number">5</span>, <span class="hljs-number">2</span>, <span class="hljs-number">18</span>, <span class="hljs-number">56</span>, <span class="hljs-number">7</span>, <span class="hljs-number">78133</span>)<br><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-string">&#x27;&#123;0.year&#125;-&#123;0.month&#125;-&#123;0.day&#125;&#x27;</span>.<span class="hljs-built_in">format</span>(now)<br><span class="hljs-string">&#x27;2023-5-2&#x27;</span><br><span class="hljs-comment"># 在下面的代码中，+、-、#的位置表示填充字符</span><br><span class="hljs-comment"># &lt;表示左对齐，^表示居中对齐，&gt;表示右对齐</span><br><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-string">&#x27;&#123;0:+&lt;8d&#125;,&#123;0:-^8d&#125;,&#123;0:#&gt;8d&#125;&#x27;</span>.<span class="hljs-built_in">format</span>(<span class="hljs-number">666</span>)<br><span class="hljs-string">&#x27;666+++++,--666---,#####666&#x27;</span><br><br></code></pre></td></tr></table></figure><h5 id="3、-格式化的字符串常量"><a href="#3、-格式化的字符串常量" class="headerlink" title="3、 格式化的字符串常量"></a><strong><font color="blue">3、 格式化的字符串常量</font></strong></h5><p>•<strong>从Python 3.6.x开始支持一种新的字符串格式化方式，官方叫做Formatted String Literals，简称f-字符串。形式上在字符串前加字母f，含义与字符串对象format()方法类似。</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-meta">&gt;&gt;&gt; </span>name = <span class="hljs-string">&#x27;Dong&#x27;</span><br><span class="hljs-meta">&gt;&gt;&gt; </span>age = <span class="hljs-number">39</span><br><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-string">f&#x27;My name is <span class="hljs-subst">&#123;name&#125;</span>, and I am <span class="hljs-subst">&#123;age&#125;</span> years old.&#x27;</span><br><span class="hljs-string">&#x27;My name is Dong, and I am 39 years old.&#x27;</span><br><span class="hljs-meta">&gt;&gt;&gt; </span>width = <span class="hljs-number">10</span><br><span class="hljs-meta">&gt;&gt;&gt; </span>precision = <span class="hljs-number">4</span><br><span class="hljs-meta">&gt;&gt;&gt; </span>value = <span class="hljs-number">11</span>/<span class="hljs-number">3</span><br><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-string">f&#x27;result:<span class="hljs-subst">&#123;value:&#123;width&#125;</span>.<span class="hljs-subst">&#123;precision&#125;</span>&#125;&#x27;</span>  <span class="hljs-comment"># 精度：数字个数</span><br><span class="hljs-string">&#x27;result:     3.667&#x27;</span><br><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-string">f&#x27;result:<span class="hljs-subst">&#123;value:&#123;width&#125;</span>.<span class="hljs-subst">&#123;precision&#125;</span>f&#125;&#x27;</span> <span class="hljs-comment"># 小数位数</span><br><span class="hljs-string">&#x27;result:    3.6667&#x27;</span><br><span class="hljs-meta">&gt;&gt;&gt; </span>value = <span class="hljs-number">666</span><br><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-string">f&#x27;<span class="hljs-subst">&#123;value:+&lt;8d&#125;</span>,<span class="hljs-subst">&#123;value:-^8d&#125;</span>,<span class="hljs-subst">&#123;value:#&gt;8d&#125;</span>&#x27;</span><br><span class="hljs-string">&#x27;666+++++,--666---,#####666&#x27;</span><br><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> datetime <span class="hljs-keyword">import</span> date<br><span class="hljs-comment"># 获取今天的日期</span><br><span class="hljs-meta">&gt;&gt;&gt; </span>today = date.today()<br><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-string">f&#x27;<span class="hljs-subst">&#123;today.year&#125;</span>-<span class="hljs-subst">&#123;today.month&#125;</span>-<span class="hljs-subst">&#123;today.day&#125;</span>&#x27;</span><br><span class="hljs-string">&#x27;2023-5-1&#x27;</span><br><span class="hljs-comment"># 也可以直接把日期对象转换为字符串</span><br><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">str</span>(today)<br><span class="hljs-string">&#x27;2023-05-1&#x27;</span><br><span class="hljs-meta">&gt;&gt;&gt; </span>width, height = <span class="hljs-number">3</span>, <span class="hljs-number">5</span><br><span class="hljs-comment"># 大括号内表达式后面带等于号的语法只适用于Python 3.8以及更新的版本</span><br><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-string">f&#x27;<span class="hljs-subst">&#123;width*height=&#125;</span>&#x27;</span><br><span class="hljs-string">&#x27;width*height=15&#x27;</span><br><br></code></pre></td></tr></table></figure><h4 id="（5）字符串常用方法与操作"><a href="#（5）字符串常用方法与操作" class="headerlink" title="（5）字符串常用方法与操作"></a><strong><font color="red">（5）字符串常用方法与操作</font></strong></h4><p>•Python字符串对象提供了大量方法用于字符串的切分、连接、替换和排版等操作，另外还有大量内置函数和运算符也支持对字符串的操作。</p><p>•字符串对象是不可变的，所以字符串对象提供的涉及到字符串“修改”的方法都是返回修改后的新字符串，并不对原始字符串做任何修改，无一例外。</p><h5 id="1、-find-、rfind-、index-、rindex-、count"><a href="#1、-find-、rfind-、index-、rindex-、count" class="headerlink" title="1、 find()、rfind()、index()、rindex()、count()"></a><strong><font color="blue">1、 find()、rfind()、index()、rindex()、count()</font></strong></h5><ul><li>find()和rfind方法分别用来查找另一个字符串在当前字符串指定范围（默认是整个字符串）中首次和最后一次出现的位置，<strong>如果不存在则返回-1</strong>；</li><li>index()和rindex()方法用来返回另一个字符串在当前字符串指定范围中首次和最后一次出现的位置，如果不存在则抛出异常；</li><li>count()方法用来返回另一个字符串在当前字符串中出现的次数。</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-meta">&gt;&gt;&gt; </span>s = <span class="hljs-string">&#x27;apple,peach,banana,peach,pear&#x27;</span><br><span class="hljs-meta">&gt;&gt;&gt; </span>s.find(<span class="hljs-string">&#x27;peach&#x27;</span>)<br><span class="hljs-number">6</span><br><span class="hljs-meta">&gt;&gt;&gt; </span>s.find(<span class="hljs-string">&#x27;peach&#x27;</span>, <span class="hljs-number">7</span>)<br><span class="hljs-number">19</span><br><span class="hljs-meta">&gt;&gt;&gt; </span>s.find(<span class="hljs-string">&#x27;peach&#x27;</span>, <span class="hljs-number">7</span>, <span class="hljs-number">20</span>)<br>-<span class="hljs-number">1</span><br><span class="hljs-meta">&gt;&gt;&gt; </span>s.rfind(<span class="hljs-string">&#x27;p&#x27;</span>)<br><span class="hljs-number">25</span><br><span class="hljs-meta">&gt;&gt;&gt; </span>s.index(<span class="hljs-string">&#x27;p&#x27;</span>)<br><span class="hljs-number">1</span><br><span class="hljs-meta">&gt;&gt;&gt; </span>s.index(<span class="hljs-string">&#x27;pe&#x27;</span>)<br><span class="hljs-number">6</span><br><span class="hljs-meta">&gt;&gt;&gt; </span>s.index(<span class="hljs-string">&#x27;pear&#x27;</span>)<br><span class="hljs-number">25</span><br><span class="hljs-meta">&gt;&gt;&gt; </span>s.index(<span class="hljs-string">&#x27;ppp&#x27;</span>)<br>Traceback (most recent call last):<br>  File <span class="hljs-string">&quot;&lt;pyshell# 11&gt;&quot;</span>, line <span class="hljs-number">1</span>, <span class="hljs-keyword">in</span> &lt;module&gt;<br>    s.index(<span class="hljs-string">&#x27;ppp&#x27;</span>)<br>ValueError: substring <span class="hljs-keyword">not</span> found<br><span class="hljs-meta">&gt;&gt;&gt; </span>s.count(<span class="hljs-string">&#x27;p&#x27;</span>)<br><span class="hljs-number">5</span><br><span class="hljs-meta">&gt;&gt;&gt; </span>s.count(<span class="hljs-string">&#x27;pp&#x27;</span>)<br><span class="hljs-number">1</span><br><span class="hljs-meta">&gt;&gt;&gt; </span>s.count(<span class="hljs-string">&#x27;ppp&#x27;</span>)<br><span class="hljs-number">0</span><br></code></pre></td></tr></table></figure><h5 id="2、-split-、rsplit"><a href="#2、-split-、rsplit" class="headerlink" title="2、 split()、rsplit()"></a><strong><font color="blue">2、 split()、rsplit()</font></strong></h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><code class="hljs python">split()和rsplit()方法分别用来以指定字符为分隔符，把当前字符串从左往右或从右往左分隔成多个字符串，并返回包含分隔结果的列表；<br><span class="hljs-meta">&gt;&gt;&gt; </span>s = <span class="hljs-string">&#x27;apple,peach,banana,pear&#x27;</span><br><span class="hljs-meta">&gt;&gt;&gt; </span>s.split(<span class="hljs-string">&#x27;,&#x27;</span>)<br>[<span class="hljs-string">&#x27;apple&#x27;</span>, <span class="hljs-string">&#x27;peach&#x27;</span>, <span class="hljs-string">&#x27;banana&#x27;</span>, <span class="hljs-string">&#x27;pear&#x27;</span>]<br><span class="hljs-meta">&gt;&gt;&gt; </span>s = <span class="hljs-string">&quot;2017-10-31&quot;</span><br><span class="hljs-meta">&gt;&gt;&gt; </span>t = s.split(<span class="hljs-string">&quot;-&quot;</span>)<br><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">print</span>(t)<br>[<span class="hljs-string">&#x27;2017&#x27;</span>, <span class="hljs-string">&#x27;10&#x27;</span>, <span class="hljs-string">&#x27;31&#x27;</span>]<br><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">print</span>(<span class="hljs-built_in">list</span>(<span class="hljs-built_in">map</span>(<span class="hljs-built_in">int</span>, t)))<br>[<span class="hljs-number">2017</span>, <span class="hljs-number">10</span>, <span class="hljs-number">31</span>]<br><br>split()和rsplit()方法还允许指定最大分割次数。  <span class="hljs-comment"># 忽略前后\n\n 和空白，None不指定空白符，help.(&#x27; &#x27;.split)</span><br><span class="hljs-meta">&gt;&gt;&gt; </span>s = <span class="hljs-string">&#x27;\n\nhello\t\t world \n\n\n My name is Dong   &#x27;</span><br><span class="hljs-meta">&gt;&gt;&gt; </span>s.split(<span class="hljs-literal">None</span>, <span class="hljs-number">1</span>)<br>[<span class="hljs-string">&#x27;hello&#x27;</span>, <span class="hljs-string">&#x27;world \n\n\n My name is Dong   &#x27;</span>]<br><span class="hljs-meta">&gt;&gt;&gt; </span>s.rsplit(<span class="hljs-literal">None</span>, <span class="hljs-number">2</span>)<br>[<span class="hljs-string">&#x27;\n\nhello\t\t world \n\n\n My name&#x27;</span>, <span class="hljs-string">&#x27;is&#x27;</span>, <span class="hljs-string">&#x27;Dong&#x27;</span>]<br><span class="hljs-meta">&gt;&gt;&gt; </span>s.split(maxsplit=<span class="hljs-number">6</span>)<br>[<span class="hljs-string">&#x27;hello&#x27;</span>, <span class="hljs-string">&#x27;world&#x27;</span>, <span class="hljs-string">&#x27;My&#x27;</span>, <span class="hljs-string">&#x27;name&#x27;</span>, <span class="hljs-string">&#x27;is&#x27;</span>, <span class="hljs-string">&#x27;Dong&#x27;</span>]<br><span class="hljs-meta">&gt;&gt;&gt; </span>s.split(maxsplit=<span class="hljs-number">100</span>)     <span class="hljs-comment"># 最大分隔次数大于可分隔次数时无效</span><br>[<span class="hljs-string">&#x27;hello&#x27;</span>, <span class="hljs-string">&#x27;world&#x27;</span>, <span class="hljs-string">&#x27;My&#x27;</span>, <span class="hljs-string">&#x27;name&#x27;</span>, <span class="hljs-string">&#x27;is&#x27;</span>, <span class="hljs-string">&#x27;Dong&#x27;</span>]<br><br>对于split()和rsplit()方法，如果不指定分隔符，则字符串中的任何空白符号（空格、换行符、制表符等）都将被认为是分隔符，把连续多个空白字符看作一个分隔符。<br><span class="hljs-meta">&gt;&gt;&gt; </span>s = <span class="hljs-string">&#x27;hello world \n\n My name is Dong   &#x27;</span><br><span class="hljs-meta">&gt;&gt;&gt; </span>s.split()<br>[<span class="hljs-string">&#x27;hello&#x27;</span>, <span class="hljs-string">&#x27;world&#x27;</span>, <span class="hljs-string">&#x27;My&#x27;</span>, <span class="hljs-string">&#x27;name&#x27;</span>, <span class="hljs-string">&#x27;is&#x27;</span>, <span class="hljs-string">&#x27;Dong&#x27;</span>]<br><span class="hljs-meta">&gt;&gt;&gt; </span>s = <span class="hljs-string">&#x27;\n\nhello world \n\n\n My name is Dong   &#x27;</span><br><span class="hljs-meta">&gt;&gt;&gt; </span>s.split()<br>[<span class="hljs-string">&#x27;hello&#x27;</span>, <span class="hljs-string">&#x27;world&#x27;</span>, <span class="hljs-string">&#x27;My&#x27;</span>, <span class="hljs-string">&#x27;name&#x27;</span>, <span class="hljs-string">&#x27;is&#x27;</span>, <span class="hljs-string">&#x27;Dong&#x27;</span>]<br><span class="hljs-meta">&gt;&gt;&gt; </span>s = <span class="hljs-string">&#x27;\n\nhello\t\t world \n\n\n My name\t is Dong   &#x27;</span><br><span class="hljs-meta">&gt;&gt;&gt; </span>s.split()<br>[<span class="hljs-string">&#x27;hello&#x27;</span>, <span class="hljs-string">&#x27;world&#x27;</span>, <span class="hljs-string">&#x27;My&#x27;</span>, <span class="hljs-string">&#x27;name&#x27;</span>, <span class="hljs-string">&#x27;is&#x27;</span>, <span class="hljs-string">&#x27;Dong&#x27;</span>]<br><br>明确传递参数指定split()使用的分隔符时，情况是不一样的。<br><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-string">&#x27;a,,,bb,,ccc&#x27;</span>.split(<span class="hljs-string">&#x27;,&#x27;</span>)       <span class="hljs-comment"># 每个逗号都被作为独立的分隔符</span><br>[<span class="hljs-string">&#x27;a&#x27;</span>, <span class="hljs-string">&#x27;&#x27;</span>, <span class="hljs-string">&#x27;&#x27;</span>, <span class="hljs-string">&#x27;bb&#x27;</span>, <span class="hljs-string">&#x27;&#x27;</span>, <span class="hljs-string">&#x27;ccc&#x27;</span>]<br><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-string">&#x27;a\t\t\tbb\t\tccc&#x27;</span>.split(<span class="hljs-string">&#x27;\t&#x27;</span>) <span class="hljs-comment"># 每个制表符都被作为独立的分隔符</span><br>[<span class="hljs-string">&#x27;a&#x27;</span>, <span class="hljs-string">&#x27;&#x27;</span>, <span class="hljs-string">&#x27;&#x27;</span>, <span class="hljs-string">&#x27;bb&#x27;</span>, <span class="hljs-string">&#x27;&#x27;</span>, <span class="hljs-string">&#x27;ccc&#x27;</span>]<br><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-string">&#x27;a\t\t\tbb\t\tccc&#x27;</span>.split()     <span class="hljs-comment"># 连续多个制表符被作为一个分隔符</span><br>[<span class="hljs-string">&#x27;a&#x27;</span>, <span class="hljs-string">&#x27;bb&#x27;</span>, <span class="hljs-string">&#x27;ccc&#x27;</span>]<br><br></code></pre></td></tr></table></figure><h5 id="3、join"><a href="#3、join" class="headerlink" title="3、join()"></a><strong><font color="blue">3、join()</font></strong></h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs python">字符串连接join()<br><span class="hljs-meta">&gt;&gt;&gt; </span>li = [<span class="hljs-string">&#x27;apple&#x27;</span>, <span class="hljs-string">&#x27;peach&#x27;</span>, <span class="hljs-string">&#x27;banana&#x27;</span>, <span class="hljs-string">&#x27;pear&#x27;</span>]<br><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-string">&#x27;,&#x27;</span>.join(li)<br><span class="hljs-string">&#x27;apple,peach,banana,pear&#x27;</span><br><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-string">&#x27;.&#x27;</span>.join(li)<br><span class="hljs-string">&#x27;apple.peach.banana.pear&#x27;</span><br><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-string">&#x27;::&#x27;</span>.join(li)<br><span class="hljs-string">&#x27;apple::peach::banana::pear&#x27;</span><br><br></code></pre></td></tr></table></figure><h5 id="4、lower-、upper-、capitalize-、title-、swapcase"><a href="#4、lower-、upper-、capitalize-、title-、swapcase" class="headerlink" title="4、lower()、upper()、capitalize()、title()、swapcase()"></a><strong><font color="blue">4、lower()、upper()、capitalize()、title()、swapcase()</font></strong></h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-meta">&gt;&gt;&gt; </span>s = <span class="hljs-string">&#x27;What is Your Name?&#x27;</span><br><span class="hljs-meta">&gt;&gt;&gt; </span>s.lower()                   <span class="hljs-comment"># 返回小写字符串</span><br><span class="hljs-string">&#x27;what is your name?&#x27;</span><br><span class="hljs-meta">&gt;&gt;&gt; </span>s.upper()                   <span class="hljs-comment"># 返回大写字符串</span><br><span class="hljs-string">&#x27;WHAT IS YOUR NAME?&#x27;</span><br><span class="hljs-meta">&gt;&gt;&gt; </span>s.capitalize()              <span class="hljs-comment"># 字符串首字符大写</span><br><span class="hljs-string">&#x27;What is your name?&#x27;</span><br><span class="hljs-meta">&gt;&gt;&gt; </span>s.title()                   <span class="hljs-comment"># 每个单词的首字母大写</span><br><span class="hljs-string">&#x27;What Is Your Name?&#x27;</span><br><span class="hljs-meta">&gt;&gt;&gt; </span>s.swapcase()                <span class="hljs-comment"># 大小写互换</span><br><span class="hljs-string">&#x27;wHAT IS yOUR nAME?&#x27;</span><br><br></code></pre></td></tr></table></figure><h5 id="5、replace-、maketrans-、translate"><a href="#5、replace-、maketrans-、translate" class="headerlink" title="5、replace()、maketrans()、translate()"></a><strong><font color="blue">5、replace()、maketrans()、translate()</font></strong></h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs python">查找替换replace()，类似于Word中的“全部替换”功能。<br><span class="hljs-meta">&gt;&gt;&gt; </span>s = <span class="hljs-string">&#x27;中国，中国&#x27;</span><br><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">print</span>(s)<br>中国，中国<br><span class="hljs-meta">&gt;&gt;&gt; </span>s2 = s.replace(<span class="hljs-string">&#x27;中国&#x27;</span>, <span class="hljs-string">&#x27;中华人民共和国&#x27;</span>)  <span class="hljs-comment"># 两个参数都作为一个整体</span><br><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">print</span>(s2)<br>中华人民共和国，中华人民共和国<br><br><br>字符串对象的maketrans()方法用来生成字符映射表，而translate()方法用来根据映射表中定义的对应关系转换字符串并替换其中的字符，使用这两个方法的组合可以同时处理多个字符。<br><span class="hljs-comment"># 创建映射表，将字符&#x27;abcdef123&#x27;一一对应地转换为&#x27;uvwxyz@# $&#x27;</span><br><span class="hljs-meta">&gt;&gt;&gt; </span>table = <span class="hljs-string">&#x27;&#x27;</span>.maketrans(<span class="hljs-string">&#x27;abcdef123&#x27;</span>, <span class="hljs-string">&#x27;uvwxyz@#$&#x27;</span>)<br><span class="hljs-meta">&gt;&gt;&gt; </span>s = <span class="hljs-string">&#x27;Python is a greate programming language. I like it!&#x27;</span><br><span class="hljs-comment"># 按映射表进行替换</span><br><span class="hljs-meta">&gt;&gt;&gt; </span>s.translate(table)<br><span class="hljs-string">&#x27;Python is u gryuty progrumming lunguugy. I liky it!&#x27;</span><br><br></code></pre></td></tr></table></figure><h5 id="6、strip-、rstrip-、lstrip"><a href="#6、strip-、rstrip-、lstrip" class="headerlink" title="6、strip()、rstrip()、lstrip()"></a><strong><font color="blue">6、strip()、rstrip()、lstrip()</font></strong></h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-string">&#x27;\n\nhello world   \n\n&#x27;</span>.strip()      <span class="hljs-comment"># 删除空白字符</span><br><span class="hljs-string">&#x27;hello world&#x27;</span><br><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-string">&#x27;aaaassddf&#x27;</span>.strip(<span class="hljs-string">&#x27;a&#x27;</span>)                <span class="hljs-comment"># 删除指定字符</span><br><span class="hljs-string">&#x27;ssddf&#x27;</span><br><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-string">&#x27;aaaassddf&#x27;</span>.strip(<span class="hljs-string">&#x27;af&#x27;</span>)<br><span class="hljs-string">&#x27;ssdd&#x27;</span><br><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-string">&#x27;aaaassddfaaa&#x27;</span>.rstrip(<span class="hljs-string">&#x27;a&#x27;</span>)            <span class="hljs-comment"># 删除字符串右端指定字符</span><br><span class="hljs-string">&#x27;aaaassddf&#x27;</span><br><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-string">&#x27;aaaassddfaaa&#x27;</span>.lstrip(<span class="hljs-string">&#x27;a&#x27;</span>)            <span class="hljs-comment"># 删除字符串左端指定字符</span><br><span class="hljs-string">&#x27;ssddfaaa&#x27;</span><br>这三个方法的参数指定的字符串并不作为一个整体对待，而是在原字符串的两侧、右侧、左侧删除参数字符串中包含的所有字符，一层一层地从外往里扒。<br><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-string">&#x27;aabbccddeeeffg&#x27;</span>.strip(<span class="hljs-string">&#x27;gbaefcd&#x27;</span>)<br><span class="hljs-string">&#x27;&#x27;</span><br><br></code></pre></td></tr></table></figure><h5 id="7、startswith-、endswith"><a href="#7、startswith-、endswith" class="headerlink" title="7、startswith()、endswith()"></a><strong><font color="blue">7、startswith()、endswith()</font></strong></h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs python">s.startswith(t)、s.endswith(t)，判断字符串是否以指定字符串开始或结束<br><span class="hljs-meta">&gt;&gt;&gt; </span>s = <span class="hljs-string">&#x27;Beautiful is better than ugly.&#x27;</span><br><span class="hljs-meta">&gt;&gt;&gt; </span>s.startswith(<span class="hljs-string">&#x27;Be&#x27;</span>)             <span class="hljs-comment"># 检测整个字符串</span><br><span class="hljs-literal">True</span><br><span class="hljs-meta">&gt;&gt;&gt; </span>s.startswith(<span class="hljs-string">&#x27;Be&#x27;</span>, <span class="hljs-number">5</span>)          <span class="hljs-comment"># 指定检测范围起始位置</span><br><span class="hljs-literal">False</span><br><span class="hljs-meta">&gt;&gt;&gt; </span>s.startswith(<span class="hljs-string">&#x27;Be&#x27;</span>, <span class="hljs-number">0</span>, <span class="hljs-number">5</span>)       <span class="hljs-comment"># 指定检测范围起始和结束位置</span><br><span class="hljs-literal">True</span><br><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">import</span> os<br><span class="hljs-meta">&gt;&gt;&gt; </span>[filename <span class="hljs-keyword">for</span> filename <span class="hljs-keyword">in</span> os.listdir(<span class="hljs-string">r&#x27;c:\\&#x27;</span>)<br>     <span class="hljs-keyword">if</span> filename.endswith((<span class="hljs-string">&#x27;.bmp&#x27;</span>,<span class="hljs-string">&#x27;.jpg&#x27;</span>,<span class="hljs-string">&#x27;.gif&#x27;</span>))]<br><br></code></pre></td></tr></table></figure><h5 id="8、startswith-、endswith"><a href="#8、startswith-、endswith" class="headerlink" title="8、startswith()、endswith()"></a><strong><font color="blue">8、startswith()、endswith()</font></strong></h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs python">isalnum()、isalpha()、isdigit()、isspace()、isupper()、islower()，用来测试字符串是否为数字或字母、是否为字母、是否为数字字符、是否为空白字符、是否为大写字母以及是否为小写字母。<br><br><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-string">&#x27;1234abcd&#x27;</span>.isalnum()<br><span class="hljs-literal">True</span><br><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-string">&#x27;1234abcd&#x27;</span>.isalpha()         <span class="hljs-comment"># 全部为英文字母时返回True</span><br><span class="hljs-literal">False</span><br><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-string">&#x27;1234abcd&#x27;</span>.isdigit()         <span class="hljs-comment"># 全部为数字时返回True</span><br><span class="hljs-literal">False</span><br><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-string">&#x27;abcd&#x27;</span>.isalpha()<br><span class="hljs-literal">True</span><br><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-string">&#x27;1234.0&#x27;</span>.isdigit()<br><span class="hljs-literal">False</span><br><br></code></pre></td></tr></table></figure><h5 id="9、center-、ljust-、rjust"><a href="#9、center-、ljust-、rjust" class="headerlink" title="9、center()、ljust()、rjust()"></a><strong><font color="blue">9、center()、ljust()、rjust()</font></strong></h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs python">center()、ljust()、rjust()，返回指定宽度的新字符串，原字符串居中、左对齐或右对齐出现在新字符串中，如果指定宽度大于字符串长度，则使用指定的字符（默认为空格）进行填充。<br><br><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-string">&#x27;Hello world!&#x27;</span>.center(<span class="hljs-number">20</span>)        <span class="hljs-comment"># 居中，以空格进行填充</span><br><span class="hljs-string">&#x27;    Hello world!    &#x27;</span><br><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-string">&#x27;Hello world!&#x27;</span>.center(<span class="hljs-number">20</span>, <span class="hljs-string">&#x27;=&#x27;</span>)   <span class="hljs-comment"># 居中，以字符=进行填充</span><br><span class="hljs-string">&#x27;====Hello world!====&#x27;</span><br><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-string">&#x27;Hello world!&#x27;</span>.ljust(<span class="hljs-number">20</span>, <span class="hljs-string">&#x27;=&#x27;</span>)    <span class="hljs-comment"># 居左</span><br><span class="hljs-string">&#x27;Hello world!========&#x27;</span><br><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-string">&#x27;Hello world!&#x27;</span>.rjust(<span class="hljs-number">20</span>, <span class="hljs-string">&#x27;=&#x27;</span>)    <span class="hljs-comment"># 居右</span><br><span class="hljs-string">&#x27;========Hello world!&#x27;</span><br><br></code></pre></td></tr></table></figure><h5 id="10、字符串对象支持的运算符"><a href="#10、字符串对象支持的运算符" class="headerlink" title="10、字符串对象支持的运算符"></a><strong><font color="blue">10、字符串对象支持的运算符</font></strong></h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs python">Python字符串支持加法运算符，表示两个字符串连接，生成新字符串。<br><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-string">&#x27;hello &#x27;</span> + <span class="hljs-string">&#x27;world&#x27;</span><br><span class="hljs-string">&#x27;hello world&#x27;</span><br><br>成员判断，关键字<span class="hljs-keyword">in</span><br><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-string">&quot;a&quot;</span> <span class="hljs-keyword">in</span> <span class="hljs-string">&quot;abcde&quot;</span>     <span class="hljs-comment"># 测试一个字符中是否存在于另一个字符串中</span><br><span class="hljs-literal">True</span><br><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-string">&#x27;ab&#x27;</span> <span class="hljs-keyword">in</span> <span class="hljs-string">&#x27;abcde&#x27;</span><br><span class="hljs-literal">True</span><br><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-string">&#x27;ac&#x27;</span> <span class="hljs-keyword">in</span> <span class="hljs-string">&#x27;abcde&#x27;</span>    <span class="hljs-comment"># 关键字in左边的字符串作为一个整体对待</span><br><span class="hljs-literal">False</span><br><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-string">&quot;j&quot;</span> <span class="hljs-keyword">in</span> <span class="hljs-string">&quot;abcde&quot;</span><br><span class="hljs-literal">False</span><br><br>Python字符串支持与整数的乘法运算，表示序列重复，也就是字符串内容的重复，得到新字符串。<br><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-string">&#x27;abcd&#x27;</span> * <span class="hljs-number">3</span><br><span class="hljs-string">&#x27;abcdabcdabcd&#x27;</span><br><br></code></pre></td></tr></table></figure><h5 id="11、适用于字符串对象的内置函数"><a href="#11、适用于字符串对象的内置函数" class="headerlink" title="11、适用于字符串对象的内置函数"></a><strong><font color="blue">11、适用于字符串对象的内置函数</font></strong></h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-meta">&gt;&gt;&gt; </span>x = <span class="hljs-string">&#x27;Hello world.&#x27;</span><br><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">len</span>(x), <span class="hljs-built_in">max</span>(x), <span class="hljs-built_in">min</span>(x)<br>(<span class="hljs-number">12</span>, <span class="hljs-string">&#x27;w&#x27;</span>, <span class="hljs-string">&#x27; &#x27;</span>)<br><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">list</span>(<span class="hljs-built_in">zip</span>(x,x))               <span class="hljs-comment"># zip()也可以作用于字符串</span><br>[(<span class="hljs-string">&#x27;H&#x27;</span>, <span class="hljs-string">&#x27;H&#x27;</span>), (<span class="hljs-string">&#x27;e&#x27;</span>, <span class="hljs-string">&#x27;e&#x27;</span>), (<span class="hljs-string">&#x27;l&#x27;</span>, <span class="hljs-string">&#x27;l&#x27;</span>), (<span class="hljs-string">&#x27;l&#x27;</span>, <span class="hljs-string">&#x27;l&#x27;</span>), (<span class="hljs-string">&#x27;o&#x27;</span>, <span class="hljs-string">&#x27;o&#x27;</span>), (<span class="hljs-string">&#x27; &#x27;</span>, <span class="hljs-string">&#x27; &#x27;</span>), (<span class="hljs-string">&#x27;w&#x27;</span>, <span class="hljs-string">&#x27;w&#x27;</span>), (<span class="hljs-string">&#x27;o&#x27;</span>, <span class="hljs-string">&#x27;o&#x27;</span>), (<span class="hljs-string">&#x27;r&#x27;</span>, <span class="hljs-string">&#x27;r&#x27;</span>), (<span class="hljs-string">&#x27;l&#x27;</span>, <span class="hljs-string">&#x27;l&#x27;</span>), (<span class="hljs-string">&#x27;d&#x27;</span>, <span class="hljs-string">&#x27;d&#x27;</span>), (<span class="hljs-string">&#x27;.&#x27;</span>, <span class="hljs-string">&#x27;.&#x27;</span>)]<br><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">sorted</span>(x)<br>[<span class="hljs-string">&#x27; &#x27;</span>, <span class="hljs-string">&#x27;.&#x27;</span>, <span class="hljs-string">&#x27;H&#x27;</span>, <span class="hljs-string">&#x27;d&#x27;</span>, <span class="hljs-string">&#x27;e&#x27;</span>, <span class="hljs-string">&#x27;l&#x27;</span>, <span class="hljs-string">&#x27;l&#x27;</span>, <span class="hljs-string">&#x27;l&#x27;</span>, <span class="hljs-string">&#x27;o&#x27;</span>, <span class="hljs-string">&#x27;o&#x27;</span>, <span class="hljs-string">&#x27;r&#x27;</span>, <span class="hljs-string">&#x27;w&#x27;</span>]<br><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">list</span>(<span class="hljs-built_in">reversed</span>(x))<br>[<span class="hljs-string">&#x27;.&#x27;</span>, <span class="hljs-string">&#x27;d&#x27;</span>, <span class="hljs-string">&#x27;l&#x27;</span>, <span class="hljs-string">&#x27;r&#x27;</span>, <span class="hljs-string">&#x27;o&#x27;</span>, <span class="hljs-string">&#x27;w&#x27;</span>, <span class="hljs-string">&#x27; &#x27;</span>, <span class="hljs-string">&#x27;o&#x27;</span>, <span class="hljs-string">&#x27;l&#x27;</span>, <span class="hljs-string">&#x27;l&#x27;</span>, <span class="hljs-string">&#x27;e&#x27;</span>, <span class="hljs-string">&#x27;H&#x27;</span>]<br><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">list</span>(<span class="hljs-built_in">enumerate</span>(x))<br>[(<span class="hljs-number">0</span>, <span class="hljs-string">&#x27;H&#x27;</span>), (<span class="hljs-number">1</span>, <span class="hljs-string">&#x27;e&#x27;</span>), (<span class="hljs-number">2</span>, <span class="hljs-string">&#x27;l&#x27;</span>), (<span class="hljs-number">3</span>, <span class="hljs-string">&#x27;l&#x27;</span>), (<span class="hljs-number">4</span>, <span class="hljs-string">&#x27;o&#x27;</span>), (<span class="hljs-number">5</span>, <span class="hljs-string">&#x27; &#x27;</span>), (<span class="hljs-number">6</span>, <span class="hljs-string">&#x27;w&#x27;</span>), (<span class="hljs-number">7</span>, <span class="hljs-string">&#x27;o&#x27;</span>), (<span class="hljs-number">8</span>, <span class="hljs-string">&#x27;r&#x27;</span>), (<span class="hljs-number">9</span>, <span class="hljs-string">&#x27;l&#x27;</span>), (<span class="hljs-number">10</span>, <span class="hljs-string">&#x27;d&#x27;</span>), (<span class="hljs-number">11</span>, <span class="hljs-string">&#x27;.&#x27;</span>)]<br><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> operator <span class="hljs-keyword">import</span> add<br><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">list</span>(<span class="hljs-built_in">map</span>(add, x, x))<br>[<span class="hljs-string">&#x27;HH&#x27;</span>, <span class="hljs-string">&#x27;ee&#x27;</span>, <span class="hljs-string">&#x27;ll&#x27;</span>, <span class="hljs-string">&#x27;ll&#x27;</span>, <span class="hljs-string">&#x27;oo&#x27;</span>, <span class="hljs-string">&#x27;  &#x27;</span>, <span class="hljs-string">&#x27;ww&#x27;</span>, <span class="hljs-string">&#x27;oo&#x27;</span>, <span class="hljs-string">&#x27;rr&#x27;</span>, <span class="hljs-string">&#x27;ll&#x27;</span>, <span class="hljs-string">&#x27;dd&#x27;</span>, <span class="hljs-string">&#x27;..&#x27;</span>]<br><br>内置函数<span class="hljs-built_in">eval</span>()用来把任意字符串转化为Python表达式并进行求值。<br><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">eval</span>(<span class="hljs-string">&quot;3+4&quot;</span>)                         <span class="hljs-comment"># 计算表达式的值</span><br><span class="hljs-number">7</span><br><span class="hljs-meta">&gt;&gt;&gt; </span>a = <span class="hljs-number">3</span><br><span class="hljs-meta">&gt;&gt;&gt; </span>b = <span class="hljs-number">5</span><br><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">eval</span>(<span class="hljs-string">&#x27;a+b&#x27;</span>)                         <span class="hljs-comment"># 要求变量a和b已存在</span><br><span class="hljs-number">8</span><br><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">import</span> math<br><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">eval</span>(<span class="hljs-string">&#x27;math.sqrt(3)&#x27;</span>)<br><span class="hljs-number">1.7320508075688772</span><br><br></code></pre></td></tr></table></figure><h5 id="12、字符串切片"><a href="#12、字符串切片" class="headerlink" title="12、字符串切片"></a><strong><font color="blue">12、字符串切片</font></strong></h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs python">切片也适用于字符串，但仅限于读取其中的元素，不支持字符串修改。<br><br><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-string">&#x27;Explicit is better than implicit.&#x27;</span>[:<span class="hljs-number">8</span>]<br><span class="hljs-string">&#x27;Explicit&#x27;</span><br><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-string">&#x27;Explicit is better than implicit.&#x27;</span>[<span class="hljs-number">9</span>:<span class="hljs-number">23</span>]<br><span class="hljs-string">&#x27;is better than&#x27;</span><br><span class="hljs-meta">&gt;&gt;&gt; </span>path = <span class="hljs-string">&#x27;C:\\Python38\\test.bmp&#x27;</span><br><span class="hljs-meta">&gt;&gt;&gt; </span>path[:-<span class="hljs-number">4</span>] + <span class="hljs-string">&#x27;_new&#x27;</span> + path[-<span class="hljs-number">4</span>:]<br><span class="hljs-string">&#x27;C:\\Python38\\test_new.bmp&#x27;</span><br><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> os.path <span class="hljs-keyword">import</span> splitext<br><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-string">&#x27;_new&#x27;</span>.join(splitext(path))<br><span class="hljs-string">&#x27;C:\\Python38\\test_new.bmp&#x27;</span><br><br></code></pre></td></tr></table></figure><h3 id="（六）正则表达式"><a href="#（六）正则表达式" class="headerlink" title="（六）正则表达式"></a>（六）正则表达式</h3><h4 id="（1）正则表达式"><a href="#（1）正则表达式" class="headerlink" title="（1）正则表达式"></a><strong><font color="red">（1）正则表达式</font></strong></h4><h5 id="1、正则表达式"><a href="#1、正则表达式" class="headerlink" title="1、正则表达式"></a><strong><font color="blue">1、正则表达式</font></strong></h5><ul><li><p>正则表达式是字符串处理的有力工具，正则表达式使用预定义的模式去匹配一类具有共同特征的字符串，可以快速、准确地完成复杂的查找、替换等处理要求，比字符串自身提供的方法提供了更强大的处理功能。例如使用字符串对象的split()方法只能指定一个分隔符，而使用正则表达式可以很方便地指定多个符号作为分隔符；使用字符串对象的split()并指定分隔符时，很难处理分隔符连续多次出现的情况，而正则表达式让这一切都变成非常轻松。</p></li><li><p>正则表达式在文本编辑与处理、网页爬虫之类的场合中有重要应用。</p></li><li><p>正则表达式由元字符及其不同组合来构成，通过巧妙地构造正则表达式可以匹配任意字符串，并完成查找、替换、分隔等复杂的字符串处理任务</p></li></ul><table><thead><tr><th><strong>元字符</strong></th><th><strong>功能说明</strong></th></tr></thead><tbody><tr><td>.</td><td>匹配除换行符以外的任意单个字符，单行模式下也可以表示换行符</td></tr><tr><td>*</td><td>匹配位于*之前的字符或子模式的0次或多次重复</td></tr><tr><td>+</td><td>匹配位于+之前的字符或子模式的1次或多次重复</td></tr><tr><td>-</td><td>在[]之内用来表示范围</td></tr><tr><td>|</td><td>匹配位于|之前或之后的字符</td></tr><tr><td>^</td><td>1）匹配行首，匹配以^后面的字符开头的字符串；  2）方括号内以^开头表示不匹配方括号中的字符</td></tr><tr><td>$</td><td></td></tr><tr><td>?</td><td>1）?前面的字符或子模式出现0次或1次；  2）当该字符紧随任何其他表示次数的限定符（*、+、?、{n}、{n,}、{n,m}）之后时，匹配模式是“非贪心的”。“非贪心的”模式匹配搜索到的、尽可能短的字符串，而默认的“贪心的”模式匹配搜索到的、尽可能长的字符串。例如，在字符串’oooo’中，’o+?’只匹配单个’o’，而’o+’匹配所有’o’</td></tr><tr><td>\num</td><td>此处的num是一个正整数，表示子模式编号。与转义字符\ooo冲突，需要使用原始字符串或\num的形式表示子模式。例如，r’(.)\1’匹配两个连续的相同字符</td></tr><tr><td>\f</td><td>换页符匹配</td></tr><tr><td>\n</td><td>换行符匹配</td></tr></tbody></table><table><thead><tr><th><strong>元字符</strong></th><th><strong>功能说明</strong></th></tr></thead><tbody><tr><td>\r</td><td>匹配一个回车符</td></tr><tr><td>\b</td><td>匹配单词头或单词尾，与转义字符退格键\b冲突，需要使用原始字符串或\b</td></tr><tr><td>\B</td><td>与\b含义相反</td></tr><tr><td>\d</td><td>匹配任何数字，相当于[0-9]</td></tr><tr><td>\D</td><td>与\d含义相反，等效于[^0-9]</td></tr><tr><td>\s</td><td>匹配任何空白字符，包括空格、制表符、换页符，与 [  \f\n\r\t\v] 等效</td></tr><tr><td>\S</td><td>与\s含义相反</td></tr><tr><td>\w</td><td>匹配任何字母、数字以及下划线，相当于[a-zA-Z0-9_]</td></tr><tr><td>\W</td><td>与\w含义相反\w含义相反，与[^A-Za-z0-9_]等效</td></tr><tr><td>()</td><td>将位于()内的内容作为一个整体来对待</td></tr><tr><td>{m,n}</td><td>{}前的字符或子模式重复至少m次、至多n次，{m}表示恰好m次，{m,}表示至少m次，{,n}表示至多n次，注意逗号前后不能有空格</td></tr><tr><td>[]</td><td>表示范围，匹配位于[]中的任意一个字符，可以使用减号表示Unicode编码连续的字符范围</td></tr><tr><td>[^xyz]</td><td>反向字符集，匹配除x、y、z之外的任何字符</td></tr><tr><td>[a-z]</td><td>字符范围，匹配指定范围内的任何字符</td></tr><tr><td>[^a-z]</td><td>反向范围字符，匹配除小写英文字母之外的任何字符</td></tr></tbody></table><ol><li><p>如果以反斜线“\”开头的元字符与转义字符形式相同但含义不同，则需要使用两个反斜线“\”，或者使用原始字符串。</p><p>在字符串前加上字符r或R之后表示原始字符串，字符串中任意字符都不再进行转义。原始字符串可以减少用户的输入，主要用于正则表达式和文件路径字符串的情况，但如果字符串以一个斜线“\”结束的话，则需要多写一个斜线，即以“\”结束。</p></li><li><p>正则表达式使用圆括号“()”表示一个子模式，圆括号内的内容作为一个整体对待，例如’(red)+’可以匹配’redred’、’redredred’等一个或多个重复’red’的情况。</p></li><li><p>使用子模式扩展语法可以实现更加复杂的字符串处理功能。</p><table><thead><tr><th>语法</th><th>功能说明</th></tr></thead><tbody><tr><td>(?P<groupname>)</td><td>为子模式命名</td></tr><tr><td>(?iLmsux)</td><td>设置匹配标志，可以是几个字母的组合，每个字母含义与编译标志相同</td></tr><tr><td>(?:…)</td><td>匹配但不捕获该匹配的子模式内容</td></tr><tr><td>(?P=groupname)</td><td>表示在此之前的命名为groupname的子模式内容在当前位置又出现一次</td></tr><tr><td>(?#…)</td><td>表示注释</td></tr><tr><td>(?&lt;=…)</td><td>用于正则表达式之前，表示如果&lt;=后的内容在字符串中出现则匹配，但不返回&lt;=之后的内容</td></tr><tr><td>(?=…)</td><td>用于正则表达式之后，表示如果=后的内容在字符串中出现则匹配，但不返回=之后的内容</td></tr><tr><td>(?&lt;!…)</td><td>用于正则表达式之前，表示如果&lt;!后的内容在字符串中不出现则匹配，但不返回&lt;!之后的内容</td></tr><tr><td>(?!…)</td><td>用于正则表达式之后，表示如果!后的内容在字符串中不出现则匹配，但不返回!之后的内容</td></tr></tbody></table></li></ol><p>最简单的正则表达式是普通字符串，可以匹配自身</p><ol><li>‘[pjc]ython’可以匹配’python’、’jython’、’cython’</li><li>‘[a-zA-Z0-9]’可以匹配一个任意大小写字母或数字</li><li>[^abc] 可以一个匹配任意除’a’、’b’、’c’之外的字符</li><li>‘python|perl’或’p(ython|erl)’都可以匹配’python’或’perl’</li><li>子模式后面加上问号表示可选。r’(https://)?(www.)?python.org’只能匹配’<a href="https://www.python.org&/#39;%E3%80%81&#39;https://python.org&#39;%E3%80%81&#39;www.python.org&#39;%E5%92%8C&#39;python.org&#39;">https://www.python.org&#39;、&#39;https://python.org&#39;、&#39;www.python.org&#39;和&#39;python.org&#39;</a></li><li>‘^http’只能匹配所有以’http’开头的字符串</li><li>‘(pattern)*’：允许模式重复0次或多次</li><li>‘(pattern)+’：允许模式重复1次或多次</li><li>‘(pattern){m,n}’：允许模式重复m~n次</li><li>‘(a|b)*c’：匹配多个（包含0个）a或b，后面紧跟一个字母c。</li><li>‘ab{1,}’：等价于’ab+’，匹配以字母a开头后面带1个至多个字母b的字符串。</li><li>‘^[a-zA-Z]{1}([a-zA-Z0-9._]){4,19}$’：匹配长度为5-20的字符串，必须以字母开头并且可带字母、数字、下画线、圆点的字符串。</li><li>‘^(\w){6,20}$’：匹配长度为6-20的字符串，可以包含字母、数字、下划线。</li><li>‘^\d{1,3}.\d{1,3}.\d{1,3}.\d{1,3}$’：检查给定字符串是否为合法IP地址。</li><li>‘^(13[4-9]\d{8})|(15[01289]\d{8})$’：检查给定字符串是否为移动手机号码。</li><li>‘^[a-zA-Z]+$’：检查给定字符串是否只包含英文字母大小写。</li><li>‘^\w+@(\w+.)+\w+$’：检查给定字符串是否为合法电子邮件地址。</li><li>r’(\w)(?!.*\1)’：查找字符串中每个字符的最后一次出现。</li><li>r’(\w)(?=.*\1)’：查找字符串中所有重复出现（出现次数大于1）的字符。</li><li>‘^(-)?\d+(.\d{1,2})?$’：检查给定字符串是否为最多带有2位小数的正数或负数。</li><li>‘[\u4e00-\u9fa5]’：匹配给定字符串中所有中文字符。</li><li>‘^\d{18}|\d{15}$’：检查给定字符串是否为合法身份证格式。</li><li>‘\d{4}-\d{1,2}-\d{1,2}’：匹配指定格式的日期，例如2021-1-31。</li><li>‘^(?=.<em>[a-z])(?=.</em>[A-Z])(?=.<em>\d)(?=.</em>[,._]).{8,}$’：检查给定字符串是否为强密码，必须同时包含英语字母大写字母、英文小写字母、数字或特殊符号（如英文逗号、英文句号、下划线），并且长度必须至少8位。</li><li>“(?!.*[&#39;&quot;/;=%?]).+”：如果给定字符串中包含’、”、/、;、=、%、?则匹配失败。</li><li>‘(.)\1+’：匹配任意字符的两次或多次重复出现。</li><li>‘((?P<f>\b\w+\b)\s+(?P=f))’：匹配连续出现两次的单词。</li><li>‘((?P<f>.)(?P=f)(?P<g>.)(?P=g))’：匹配AABB形式的成语或字母组合</li></ol><h5 id="2、正则表达式模块re"><a href="#2、正则表达式模块re" class="headerlink" title="2、正则表达式模块re"></a><strong><font color="blue">2、正则表达式模块re</font></strong></h5><table><thead><tr><th><strong>函数</strong></th><th><strong>功能说明</strong></th></tr></thead><tbody><tr><td>findall(pattern, string[, flags])</td><td>返回包含字符串中所有与给定模式匹配的项的列表，如果pattern中有子模式则只返回子模式匹配的内容</td></tr><tr><td>match(pattern, string[, flags])</td><td>从字符串的开始处匹配模式，返回Match对象或None</td></tr><tr><td>search(pattern, string[, flags])</td><td>在整个字符串中寻找模式，返回Match对象或None</td></tr><tr><td>split(pattern, string[, maxsplit=0])</td><td>根据模式匹配项分隔字符串</td></tr><tr><td>sub(pat, repl, string[, count=0])</td><td>将字符串中所有与pat匹配的项用repl替换，返回新字符串，repl可以是字符串或返回字符串的可调用对象，作用于每个匹配的Match对象</td></tr></tbody></table><p>•其中函数参数“flags”的值可以是下面几个的不同组合（使用“|”进行组合）：</p><p>re.I（注意是大写字母I，不是数字1，表示忽略大小写）</p><p>re.L（支持本地字符集的字符）</p><p>re.M（多行匹配模式）</p><p>re.S（使元字符“.”匹配任意字符，包括换行符）</p><p>re.U（匹配Unicode字符）</p><p>re.X（忽略模式中的空格，并可以使用# 注释）</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">import</span> re                            <span class="hljs-comment"># 导入re模块</span><br><span class="hljs-meta">&gt;&gt;&gt; </span>text = <span class="hljs-string">&#x27;alpha. beta....gamma delta&#x27;</span>  <span class="hljs-comment"># 测试用的字符串</span><br><span class="hljs-meta">&gt;&gt;&gt; </span>re.split(<span class="hljs-string">&#x27;[\. ]+&#x27;</span>, text)             <span class="hljs-comment"># 使用指定字符作为分隔符进行分隔（多选一，也就是.或者空格）</span><br>[<span class="hljs-string">&#x27;alpha&#x27;</span>, <span class="hljs-string">&#x27;beta&#x27;</span>, <span class="hljs-string">&#x27;gamma&#x27;</span>, <span class="hljs-string">&#x27;delta&#x27;</span>]<br><span class="hljs-meta">&gt;&gt;&gt; </span>re.split(<span class="hljs-string">&#x27;[\. ]+&#x27;</span>, text, maxsplit=<span class="hljs-number">2</span>) <span class="hljs-comment"># 最多分隔2次</span><br>[<span class="hljs-string">&#x27;alpha&#x27;</span>, <span class="hljs-string">&#x27;beta&#x27;</span>, <span class="hljs-string">&#x27;gamma delta&#x27;</span>]<br><span class="hljs-meta">&gt;&gt;&gt; </span>re.split(<span class="hljs-string">&#x27;[\. ]+&#x27;</span>, text, maxsplit=<span class="hljs-number">1</span>) <span class="hljs-comment"># 最多分隔1次</span><br>[<span class="hljs-string">&#x27;alpha&#x27;</span>, <span class="hljs-string">&#x27;beta....gamma delta&#x27;</span>]<br><span class="hljs-meta">&gt;&gt;&gt; </span>pat = <span class="hljs-string">&#x27;[a-zA-Z]+&#x27;</span><br><span class="hljs-meta">&gt;&gt;&gt; </span>re.findall(pat, text)                <span class="hljs-comment"># 查找所有单词</span><br>[<span class="hljs-string">&#x27;alpha&#x27;</span>, <span class="hljs-string">&#x27;beta&#x27;</span>, <span class="hljs-string">&#x27;gamma&#x27;</span>, <span class="hljs-string">&#x27;delta&#x27;</span>]<br><br><span class="hljs-meta">&gt;&gt;&gt; </span>pat = <span class="hljs-string">&#x27;&#123;name&#125;&#x27;</span><br><span class="hljs-meta">&gt;&gt;&gt; </span>text = <span class="hljs-string">&#x27;Dear &#123;name&#125;...&#x27;</span><br><span class="hljs-meta">&gt;&gt;&gt; </span>re.sub(pat, <span class="hljs-string">&#x27;Mr.Dong&#x27;</span>, text)        <span class="hljs-comment"># 字符串替换</span><br><span class="hljs-string">&#x27;Dear Mr.Dong...&#x27;</span><br><span class="hljs-meta">&gt;&gt;&gt; </span>s = <span class="hljs-string">&#x27;a s d&#x27;</span><br><span class="hljs-meta">&gt;&gt;&gt; </span>re.sub(<span class="hljs-string">&#x27;a|s|d&#x27;</span>, <span class="hljs-string">&#x27;good&#x27;</span>, s)          <span class="hljs-comment"># 字符串替换</span><br><span class="hljs-string">&#x27;good good good&#x27;</span><br><span class="hljs-meta">&gt;&gt;&gt; </span>s = <span class="hljs-string">&quot;It&#x27;s a very good good idea&quot;</span><br><span class="hljs-meta">&gt;&gt;&gt; </span>re.sub(<span class="hljs-string">r&#x27;(\b\w+) \1&#x27;</span>, <span class="hljs-string">r&#x27;\1&#x27;</span>, s)     <span class="hljs-comment"># 处理连续的重复单词</span><br><span class="hljs-string">&quot;It&#x27;s a very good idea&quot;</span><br><span class="hljs-meta">&gt;&gt;&gt; </span>re.sub(<span class="hljs-string">r&#x27;((\w+) )\1&#x27;</span>, <span class="hljs-string">r&#x27;\2&#x27;</span>, s)<br><span class="hljs-string">&quot;It&#x27;s a very goodidea&quot;</span><br><br><span class="hljs-meta">&gt;&gt;&gt; </span>example = <span class="hljs-string">&#x27;Beautiful is better than ugly.&#x27;</span><br><span class="hljs-meta">&gt;&gt;&gt; </span>re.findall(<span class="hljs-string">&#x27;\\bb.+?\\b&#x27;</span>, example)    <span class="hljs-comment"># 以字母b开头的完整单词</span><br>                                         <span class="hljs-comment"># 此处问号?表示非贪心模式</span><br>[<span class="hljs-string">&#x27;better&#x27;</span>]<br><span class="hljs-meta">&gt;&gt;&gt; </span>re.findall(<span class="hljs-string">&#x27;\\bb.+\\b&#x27;</span>, example)     <span class="hljs-comment"># 贪心模式的匹配结果</span><br>[<span class="hljs-string">&#x27;better than ugly&#x27;</span>]<br><span class="hljs-meta">&gt;&gt;&gt; </span>re.findall(<span class="hljs-string">&#x27;\\bb\w*\\b&#x27;</span>, example)<br>[<span class="hljs-string">&#x27;better&#x27;</span>]<br><span class="hljs-meta">&gt;&gt;&gt; </span>re.findall(<span class="hljs-string">&#x27;\\Bh.+?\\b&#x27;</span>, example)    <span class="hljs-comment"># 不以h开头且含有h字母的单词剩余部分</span><br>[<span class="hljs-string">&#x27;han&#x27;</span>]<br><br><span class="hljs-meta">&gt;&gt;&gt; </span>re.findall(<span class="hljs-string">&#x27;\\b\w.+?\\b&#x27;</span>, example)           <span class="hljs-comment"># 所有单词</span><br>[<span class="hljs-string">&#x27;Beautiful&#x27;</span>, <span class="hljs-string">&#x27;is&#x27;</span>, <span class="hljs-string">&#x27;better&#x27;</span>, <span class="hljs-string">&#x27;than&#x27;</span>, <span class="hljs-string">&#x27;ugly&#x27;</span>]<br><span class="hljs-meta">&gt;&gt;&gt; </span>re.findall(<span class="hljs-string">&#x27;\w+&#x27;</span>, example)                   <span class="hljs-comment"># 所有单词</span><br>[<span class="hljs-string">&#x27;Beautiful&#x27;</span>, <span class="hljs-string">&#x27;is&#x27;</span>, <span class="hljs-string">&#x27;better&#x27;</span>, <span class="hljs-string">&#x27;than&#x27;</span>, <span class="hljs-string">&#x27;ugly&#x27;</span>]<br><span class="hljs-meta">&gt;&gt;&gt; </span>re.findall(<span class="hljs-string">r&#x27;\b\w.+?\b&#x27;</span>, example)            <span class="hljs-comment"># 使用原始字符串</span><br>[<span class="hljs-string">&#x27;Beautiful&#x27;</span>, <span class="hljs-string">&#x27;is&#x27;</span>, <span class="hljs-string">&#x27;better&#x27;</span>, <span class="hljs-string">&#x27;than&#x27;</span>, <span class="hljs-string">&#x27;ugly&#x27;</span>]<br><span class="hljs-meta">&gt;&gt;&gt; </span>re.split(<span class="hljs-string">&#x27;\s&#x27;</span>, example)                      <span class="hljs-comment"># 使用任何空白字符分隔字符串</span><br>[<span class="hljs-string">&#x27;Beautiful&#x27;</span>, <span class="hljs-string">&#x27;is&#x27;</span>, <span class="hljs-string">&#x27;better&#x27;</span>, <span class="hljs-string">&#x27;than&#x27;</span>, <span class="hljs-string">&#x27;ugly.&#x27;</span>]<br><span class="hljs-meta">&gt;&gt;&gt; </span>re.findall(<span class="hljs-string">&#x27;\d+\.\d+\.\d+&#x27;</span>, <span class="hljs-string">&#x27;Python 2.7.13&#x27;</span>) <span class="hljs-comment"># 查找并返回x.x.x形式的数字</span><br>[<span class="hljs-string">&#x27;2.7.13&#x27;</span>]<br><span class="hljs-meta">&gt;&gt;&gt; </span>re.findall(<span class="hljs-string">&#x27;\d+\.\d+\.\d+&#x27;</span>, <span class="hljs-string">&#x27;Python 2.7.13,Python 3.8.9&#x27;</span>)<br>[<span class="hljs-string">&#x27;2.7.13&#x27;</span>, <span class="hljs-string">&#x27;3.8.9&#x27;</span>]<br><span class="hljs-meta">&gt;&gt;&gt; </span>s = <span class="hljs-string">&#x27;&lt;html&gt;&lt;head&gt;This is head.&lt;/head&gt;&lt;body&gt;This is body.&lt;/body&gt;&lt;/html&gt;&#x27;</span><br><span class="hljs-meta">&gt;&gt;&gt; </span>pattern = <span class="hljs-string">r&#x27;&lt;html&gt;&lt;head&gt;(.+)&lt;/head&gt;&lt;body&gt;(.+)&lt;/body&gt;&lt;/html&gt;&#x27;</span><br><span class="hljs-meta">&gt;&gt;&gt; </span>result = re.search(pattern, s)<br><span class="hljs-meta">&gt;&gt;&gt; </span>result.group(<span class="hljs-number">1</span>)                              <span class="hljs-comment"># 第一个子模式</span><br><span class="hljs-string">&#x27;This is head.&#x27;</span><br><span class="hljs-meta">&gt;&gt;&gt; </span>result.group(<span class="hljs-number">2</span>)                              <span class="hljs-comment"># 第二个子模式</span><br><span class="hljs-string">&#x27;This is body.&#x27;</span><br><span class="hljs-meta">&gt;&gt;&gt; </span>re.findall(pattern, s)<br>[(<span class="hljs-string">&#x27;This is head.&#x27;</span>, <span class="hljs-string">&#x27;This is body.&#x27;</span>)]<br><br><br></code></pre></td></tr></table></figure><p><strong><font color="blue">3、正则表达式模块re的match对象</font></strong></p><blockquote><p>正则表达式模块re的函数match()、search()以及正则表达式对象的方法match()、search()方法匹配成功后返回Match对象。Match对象的主要方法有：</p><p>group()：返回匹配的一个或多个子模式内容</p><p>groups()：返回一个包含匹配的所有子模式内容的元组</p><p>groupdict()：返回包含匹配的所有命名子模式内容的字典</p><p>start()：返回指定子模式内容的起始位置</p><p>end()：返回指定子模式内容的结束位置的后一个位置</p><p>span()：返回一个包含指定子模式内容起始位置和结束位置后一个位置的元组。</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-meta">&gt;&gt;&gt; </span>m = re.<span class="hljs-keyword">match</span>(<span class="hljs-string">r&#x27;(\w+) (\w+)&#x27;</span>, <span class="hljs-string">&#x27;Isaac Newton, physicist&#x27;</span>)<br><span class="hljs-meta">&gt;&gt;&gt; </span>m<br>&lt;re.Match <span class="hljs-built_in">object</span>; span=(<span class="hljs-number">0</span>, <span class="hljs-number">12</span>), <span class="hljs-keyword">match</span>=<span class="hljs-string">&#x27;Isaac Newton&#x27;</span>&gt;<br><span class="hljs-meta">&gt;&gt;&gt; </span>m.group(<span class="hljs-number">0</span>)                   <span class="hljs-comment"># 返回整个模式内容</span><br><span class="hljs-string">&#x27;Isaac Newton&#x27;</span><br><span class="hljs-meta">&gt;&gt;&gt; </span>m.group(<span class="hljs-number">1</span>)                   <span class="hljs-comment"># 返回第1个子模式内容</span><br><span class="hljs-string">&#x27;Isaac&#x27;</span><br><span class="hljs-meta">&gt;&gt;&gt; </span>m.group(<span class="hljs-number">2</span>)                   <span class="hljs-comment"># 返回第2个子模式内容.</span><br><span class="hljs-string">&#x27;Newton&#x27;</span><br><span class="hljs-meta">&gt;&gt;&gt; </span>m.group(<span class="hljs-number">1</span>, <span class="hljs-number">2</span>)                <span class="hljs-comment"># 返回指定的多个子模式内容</span><br>(<span class="hljs-string">&#x27;Isaac&#x27;</span>, <span class="hljs-string">&#x27;Newton&#x27;</span>)<br><br><span class="hljs-meta">&gt;&gt;&gt; </span>m = re.<span class="hljs-keyword">match</span>(<span class="hljs-string">r&#x27;(?P&lt;first_name&gt;\w+) (?P&lt;last_name&gt;\w+)&#x27;</span>, <span class="hljs-string">&#x27;Malcolm Reynolds&#x27;</span>)<br><span class="hljs-meta">&gt;&gt;&gt; </span>m.group(<span class="hljs-string">&#x27;first_name&#x27;</span>)      <span class="hljs-comment"># 使用命名的子模式</span><br><span class="hljs-string">&#x27;Malcolm&#x27;</span><br><span class="hljs-meta">&gt;&gt;&gt; </span>m.group(<span class="hljs-string">&#x27;last_name&#x27;</span>)<br><span class="hljs-string">&#x27;Reynolds&#x27;</span><br><span class="hljs-meta">&gt;&gt;&gt; </span>m = re.<span class="hljs-keyword">match</span>(<span class="hljs-string">r&#x27;(\d+)\.(\d+)&#x27;</span>, <span class="hljs-string">&#x27;24.1632&#x27;</span>)<br><span class="hljs-meta">&gt;&gt;&gt; </span>m.groups()                 <span class="hljs-comment"># 返回所有匹配的子模式（不包括第0个）</span><br>(<span class="hljs-string">&#x27;24&#x27;</span>, <span class="hljs-string">&#x27;1632&#x27;</span>)<br><span class="hljs-meta">&gt;&gt;&gt; </span>m = re.<span class="hljs-keyword">match</span>(<span class="hljs-string">r&#x27;(?P&lt;first_name&gt;\w+) (?P&lt;last_name&gt;\w+)&#x27;</span>, <span class="hljs-string">&#x27;Malcolm Reynolds&#x27;</span>)<br><span class="hljs-meta">&gt;&gt;&gt; </span>m.groupdict()              <span class="hljs-comment"># 以字典形式返回匹配的结果</span><br>&#123;<span class="hljs-string">&#x27;first_name&#x27;</span>: <span class="hljs-string">&#x27;Malcolm&#x27;</span>, <span class="hljs-string">&#x27;last_name&#x27;</span>: <span class="hljs-string">&#x27;Reynolds&#x27;</span>&#125;<br><br><span class="hljs-meta">&gt;&gt;&gt; </span>s = <span class="hljs-string">&#x27;aabc abcd abbcd abccd abcdd&#x27;</span><br><span class="hljs-meta">&gt;&gt;&gt; </span>re.findall(<span class="hljs-string">r&#x27;(\b\w*(?P&lt;f&gt;\w+)(?P=f)\w*\b)&#x27;</span>, s)<br>[(<span class="hljs-string">&#x27;aabc&#x27;</span>, <span class="hljs-string">&#x27;a&#x27;</span>), (<span class="hljs-string">&#x27;abbcd&#x27;</span>, <span class="hljs-string">&#x27;b&#x27;</span>), (<span class="hljs-string">&#x27;abccd&#x27;</span>, <span class="hljs-string">&#x27;c&#x27;</span>), (<span class="hljs-string">&#x27;abcdd&#x27;</span>, <span class="hljs-string">&#x27;d&#x27;</span>)]<br><br><br></code></pre></td></tr></table></figure><h5 id="3、实训任务-牛客网对应正则表达式题目"><a href="#3、实训任务-牛客网对应正则表达式题目" class="headerlink" title="3、实训任务:牛客网对应正则表达式题目"></a><strong><font color="blue">3、实训任务:牛客网对应正则表达式题目</font></strong></h5><h6 id="NP101"><a href="#NP101" class="headerlink" title="NP101"></a>NP101</h6><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> re<br><span class="hljs-built_in">str</span>=<span class="hljs-built_in">input</span>()<br><span class="hljs-built_in">print</span>(re.<span class="hljs-keyword">match</span>(<span class="hljs-string">r&#x27;https://www&#x27;</span>,<span class="hljs-built_in">str</span>).span())<br></code></pre></td></tr></table></figure><h6 id="NP102"><a href="#NP102" class="headerlink" title="NP102"></a>NP102</h6><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> re<br><span class="hljs-built_in">str</span>=<span class="hljs-built_in">input</span>()<br><span class="hljs-comment"># pattern=re.compile(r&#x27;[a-zA-Z]&#x27;)</span><br><span class="hljs-comment"># num=pattern.sub(&quot;&quot;,str)</span><br>pattern1=re.<span class="hljs-built_in">compile</span>(<span class="hljs-string">r&#x27;\D&#x27;</span>)<br>num=pattern1.sub(<span class="hljs-string">&quot;&quot;</span>,<span class="hljs-built_in">str</span>)<br><span class="hljs-built_in">print</span>(num)<br></code></pre></td></tr></table></figure><h6 id="NP103"><a href="#NP103" class="headerlink" title="NP103"></a>NP103</h6><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> re<br><span class="hljs-built_in">str</span>=<span class="hljs-built_in">input</span>()<br><span class="hljs-comment"># pattern=re.compile(r&#x27;[a-zA-Z]&#x27;)</span><br><span class="hljs-comment"># num=pattern.sub(&quot;&quot;,str)</span><br>pattern1=re.<span class="hljs-built_in">compile</span>(<span class="hljs-string">r&#x27;#.*$&#x27;</span>)<br>num=pattern1.sub(<span class="hljs-string">&quot;&quot;</span>,<span class="hljs-built_in">str</span>)<br><span class="hljs-built_in">print</span>(num)<br></code></pre></td></tr></table></figure><h3 id="（七）面向对象与程序设计"><a href="#（七）面向对象与程序设计" class="headerlink" title="（七）面向对象与程序设计"></a>（七）面向对象与程序设计</h3><ol><li>在面向对象程序设计（Object Oriented Programming）中，把数据以及对数据的操作封装在一起，组成一个整体（对象），不同对象之间通过消息机制来通信或者同步。对于相同类型的对象进行分类、抽象后，得出共同的特征而形成了类。创建类时用变量形式表示对象特征的成员称为数据成员，用函数形式表示对象行为的成员称为成员方法，数据成员和成员方法统称为类的成员。</li><li>以设计好的类为基类，可以继承得到派生类，大幅度缩短开发周期，并且可以实现设计复用。在派生类中还可以对基类继承而来的某些行为进行重新实现，从而使得基类的某个同名方法在不同派生类中的行为有可能会不同，体现出一定的多态性。</li><li>封装、继承、多态是面向对象程序设计的三个要素。</li></ol><h4 id="（1）类的定义与使用"><a href="#（1）类的定义与使用" class="headerlink" title="（1）类的定义与使用"></a><strong><font color="red">（1）类的定义与使用</font></strong></h4><h5 id="1、类"><a href="#1、类" class="headerlink" title="1、类"></a><strong><font color="blue">1、类</font></strong></h5><blockquote><p>•Python使用class关键字来定义类，class关键字之后是一个空格，接下来是类的名字，如果派生自其它基类的话则需要把所有基类放到一对圆括号中并使用逗号分隔，然后是一个冒号，最后换行并定义类的内部实现。</p><p>•类名的首字母一般要大写，当然也可以按照自己的习惯定义类名，但是一般推荐参考惯例来命名，并在整个系统的设计和实现中保持风格一致。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Car</span>(<span class="hljs-title class_ inherited__">object</span>):       <span class="hljs-comment"># 定义一个类，派生自object类</span><br>  <span class="hljs-keyword">def</span> <span class="hljs-title function_">showInfor</span>(<span class="hljs-params">self</span>):    <span class="hljs-comment"># 定义成员方法</span><br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;This is a car&quot;</span>)<br></code></pre></td></tr></table></figure><p>定义了类之后，就可以用来实例化对象，并通过“对象名.成员”的方式来访问其中的数据成员或成员方法。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python">car = Car()        <span class="hljs-comment"># 实例化对象</span><br>car.showInfor()      <span class="hljs-comment"># 调用对象的成员方法</span><br></code></pre></td></tr></table></figure></blockquote><h4 id="（2）数据成员与成员方法"><a href="#（2）数据成员与成员方法" class="headerlink" title="（2）数据成员与成员方法"></a><strong><font color="red">（2）数据成员与成员方法</font></strong></h4><p>​        创建类时用变量形式表示对象特征的成员称为数据成员（attribute），用函数形式表示对象行为的成员称为成员方法（method），数据成员和成员方法统称为类的成员。</p><h5 id="1、私有成员与公有成员"><a href="#1、私有成员与公有成员" class="headerlink" title="1、私有成员与公有成员"></a><strong><font color="blue">1、私有成员与公有成员</font></strong></h5><blockquote><p>•私有成员在类的外部不能直接访问，一般是在类的内部进行访问和操作，或者在类的外部通过调用对象的公有成员方法来访问，而公有成员是可以公开使用的，既可以在类的内部进行访问，也可以在外部程序中使用。</p><p>•从形式上看，在定义类的成员时，如果成员名以两个下划线开头但是不以两个下划线结束则表示是私有成员。</p><p>•Python并没有对私有成员提供严格的访问保护机制，通过一种特殊方式“对象名._类名__xxx”也可以在外部程序中访问私有成员，但这会破坏类的封装性，不建议这样做。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">class</span> <span class="hljs-title class_">A</span>:<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self, value1=<span class="hljs-number">0</span>, value2=<span class="hljs-number">0</span></span>):<br>        self._value1 = value1<br>        self.__value2 = value2<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">setValue</span>(<span class="hljs-params">self, value1, value2</span>):<br>        self._value1 = value1<br>        self.__value2 = value2<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">show</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-built_in">print</span>(self._value1)<br>        <span class="hljs-built_in">print</span>(self.__value2)<br><br><span class="hljs-meta">&gt;&gt;&gt; </span>a = A()<br><span class="hljs-meta">&gt;&gt;&gt; </span>a._value1<br><span class="hljs-number">0</span><br><span class="hljs-meta">&gt;&gt;&gt; </span>a._A__value2             <span class="hljs-comment"># 在外部访问对象的私有数据成员</span><br><span class="hljs-number">0</span><br><br></code></pre></td></tr></table></figure><blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs python"><br>&gt;在Python中，以下划线开头的变量名和方法名有特殊的含义，尤其是在类的定义中。<br>&gt;xxx：受保护成员；<br>&gt;__xxx__：系统定义的特殊成员；<br>&gt;__xxx：私有成员，只有类对象自己能访问，子类对象不能直接访问到这个成员，但在对象外部可以通过“对象名._类名__xxx”这样的特殊方式来访问。<br></code></pre></td></tr></table></figure><p>注意：Python中不存在严格意义上的私有成员</p></blockquote></blockquote><h5 id="2、数据成员"><a href="#2、数据成员" class="headerlink" title="2、数据成员"></a><strong><font color="blue">2、数据成员</font></strong></h5><blockquote><ul><li><p><strong>数据成员可以大致分为两类：属于对象的数据成员和属于类的数据成员。</strong></p></li><li><p><strong>属于对象的数据成员一般在构造方法init()中定义，当然也可以在其他成员方法中定义（不建议这样做），在定义时和在实例方法中访问数据成员时以self作为前缀，同一个类的不同对象（实例）的数据成员之间互不影响；</strong></p></li><li><p><strong>属于类的数据成员是该类所有对象共享的，不属于任何一个对象，在定义类时这类数据成员一般不在任何一个成员方法的定义中。</strong></p></li><li><p><strong>利用类数据成员的共享性，可以实时获得该类的对象数量，并且可以控制该类可以创建的对象最大数量。</strong></p></li></ul> <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">class</span> <span class="hljs-title class_">SingleInstance</span>:<br>    num = <span class="hljs-number">0</span><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-keyword">if</span> SingleInstance.num &gt; <span class="hljs-number">0</span>:<br>            <span class="hljs-keyword">raise</span> Exception(<span class="hljs-string">&#x27;只能创建一个对象&#x27;</span>)<br>        SingleInstance.num += <span class="hljs-number">1</span><br><br><span class="hljs-meta">&gt;&gt;&gt; </span>t1 = SingleInstance()<br><span class="hljs-meta">&gt;&gt;&gt; </span>t2 = SingleInstance()<br>Traceback (most recent call last):<br>  File <span class="hljs-string">&quot;&lt;pyshell# 11&gt;&quot;</span>, line <span class="hljs-number">1</span>, <span class="hljs-keyword">in</span> &lt;module&gt;<br>    t2 = SingleInstance()<br>  File <span class="hljs-string">&quot;&lt;pyshell# 9&gt;&quot;</span>, line <span class="hljs-number">5</span>, <span class="hljs-keyword">in</span> __init__<br>    <span class="hljs-keyword">raise</span> Exception(<span class="hljs-string">&#x27;只能创建一个对象&#x27;</span>)<br>Exception: 只能创建一个对象<br><br></code></pre></td></tr></table></figure></blockquote><h5 id="3、成员方法"><a href="#3、成员方法" class="headerlink" title="3、成员方法"></a><strong><font color="blue">3、成员方法</font></strong></h5><ul><li>所有实例方法都必须至少有一个名为self的参数，并且必须是方法的第一个形参（如果有多个形参的话），self参数代表当前对象。</li><li>在实例方法中访问实例成员时需要以self为前缀，但在外部通过对象名调用对象方法时并不需要传递这个参数。</li><li>如果在外部通过类名调用属于对象的公有方法，需要显式为该方法的self参数传递一个对象名，用来明确指定访问哪个对象的成员。</li></ul><ul><li>静态方法和类方法都可以通过类名和对象名调用，但不能直接访问属于对象的成员，只能访问属于类的成员。</li><li>静态方法和类方法不属于任何实例，不会绑定到任何实例，当然也不依赖于任何实例的状态，与实例方法相比能够减少很多开销。</li><li>类方法一般以cls作为类方法的第一个参数表示该类自身，在调用类方法时不需要为该参数传递值，静态方法则可以不接收任何参数。</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">class</span> <span class="hljs-title class_">Root</span>:<br>    __total = <span class="hljs-number">0</span><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self, v</span>):    <span class="hljs-comment"># 构造方法</span><br>        self.__value = v<br>        Root.__total += <span class="hljs-number">1</span><br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">show</span>(<span class="hljs-params">self</span>):           <span class="hljs-comment"># 普通实例方法</span><br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;self.__value:&#x27;</span>, self.__value)<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;Root.__total:&#x27;</span>, Root.__total)<br><br><span class="hljs-meta">    @classmethod              </span><span class="hljs-comment"># 修饰器，声明类方法</span><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">classShowTotal</span>(<span class="hljs-params">cls</span>):  <span class="hljs-comment"># 类方法</span><br>        <span class="hljs-built_in">print</span>(cls.__total)<br><br><span class="hljs-meta">    @staticmethod             </span><span class="hljs-comment"># 修饰器，声明静态方法</span><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">staticShowTotal</span>():    <span class="hljs-comment"># 静态方法</span><br>        <span class="hljs-built_in">print</span>(Root.__total)<br><span class="hljs-meta">&gt;&gt;&gt; </span>r = Root(<span class="hljs-number">3</span>)<br><span class="hljs-meta">&gt;&gt;&gt; </span>r.classShowTotal()              <span class="hljs-comment"># 通过对象调用类方法</span><br><span class="hljs-number">1</span><br><span class="hljs-meta">&gt;&gt;&gt; </span>r.staticShowTotal()             <span class="hljs-comment"># 通过对象调用静态方法</span><br><span class="hljs-number">1</span><br><span class="hljs-meta">&gt;&gt;&gt; </span>r.show()<br>self.__value: <span class="hljs-number">3</span><br>Root.__total: <span class="hljs-number">1</span><br><span class="hljs-meta">&gt;&gt;&gt; </span>rr = Root(<span class="hljs-number">5</span>)<br><span class="hljs-meta">&gt;&gt;&gt; </span>Root.classShowTotal()           <span class="hljs-comment"># 通过类名调用类方法</span><br><span class="hljs-number">2</span><br><span class="hljs-meta">&gt;&gt;&gt; </span>Root.staticShowTotal()          <span class="hljs-comment"># 通过类名调用静态方法</span><br><span class="hljs-number">2</span><br><span class="hljs-meta">&gt;&gt;&gt; </span>Root.show()    <span class="hljs-comment"># 试图通过类名直接调用实例方法，失败</span><br>TypeError: unbound method show() must be called <span class="hljs-keyword">with</span> Root instance <span class="hljs-keyword">as</span> first argument (got nothing instead)<br><span class="hljs-meta">&gt;&gt;&gt; </span>Root.show(r)   <span class="hljs-comment"># 但是可以通过这种方法调用方法并访问实例成员</span><br>self.__value: <span class="hljs-number">3</span><br>Root.__total: <span class="hljs-number">2</span><br><span class="hljs-meta">&gt;&gt;&gt; </span>Root.show(rr)  <span class="hljs-comment"># 通过类名调用实例方法时为self参数显式传递对象名</span><br>self.__value: <span class="hljs-number">5</span><br>Root.__total: <span class="hljs-number">2</span><br><br></code></pre></td></tr></table></figure><h5 id="4、属性"><a href="#4、属性" class="headerlink" title="4、属性"></a><strong><font color="blue">4、属性</font></strong></h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs python">只读属性<br><br><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">class</span> <span class="hljs-title class_">Test</span>:<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self, value</span>):<br>        self.__value = value<br><br><span class="hljs-meta">    @property</span><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">value</span>(<span class="hljs-params">self</span>):               <span class="hljs-comment"># 只读，无法修改和删除</span><br>        <span class="hljs-keyword">return</span> self.__value<br><span class="hljs-meta">&gt;&gt;&gt; </span>t = Test(<span class="hljs-number">3</span>)<br><span class="hljs-meta">&gt;&gt;&gt; </span>t.value<br><span class="hljs-number">3</span><br><span class="hljs-meta">&gt;&gt;&gt; </span>t.value = <span class="hljs-number">5</span>                        <span class="hljs-comment"># 只读属性不允许修改值</span><br>AttributeError: can<span class="hljs-string">&#x27;t set attribute</span><br><span class="hljs-string">&gt;&gt;&gt; t.v=5                              # 动态增加新成员</span><br><span class="hljs-string">&gt;&gt;&gt; t.v</span><br><span class="hljs-string">5</span><br><span class="hljs-string">&gt;&gt;&gt; del t.v                            # 动态删除成员</span><br><span class="hljs-string">&gt;&gt;&gt; del t.value                        # 试图删除对象属性，失败</span><br><span class="hljs-string">AttributeError: can&#x27;</span>t delete attribute<br><span class="hljs-meta">&gt;&gt;&gt; </span>t.value<br><span class="hljs-number">3</span><br><br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs python">可读、可写属性<br><br><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">class</span> <span class="hljs-title class_">Test</span>:<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self, value</span>):<br>        self.__value = value<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__get</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-keyword">return</span> self.__value<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__set</span>(<span class="hljs-params">self, v</span>):<br>        self.__value = v<br>    value = <span class="hljs-built_in">property</span>(__get, __<span class="hljs-built_in">set</span>)<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">show</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-built_in">print</span>(self.__value)<br><span class="hljs-meta">&gt;&gt;&gt; </span>t = Test(<span class="hljs-number">3</span>)<br><span class="hljs-meta">&gt;&gt;&gt; </span>t.value      <span class="hljs-comment"># 允许读取属性值</span><br><span class="hljs-number">3</span><br><span class="hljs-meta">&gt;&gt;&gt; </span>t.value = <span class="hljs-number">5</span>  <span class="hljs-comment"># 允许修改属性值</span><br><span class="hljs-meta">&gt;&gt;&gt; </span>t.value<br><span class="hljs-number">5</span><br><span class="hljs-meta">&gt;&gt;&gt; </span>t.show()     <span class="hljs-comment"># 属性对应的私有变量也得到了相应的修改</span><br><span class="hljs-number">5</span><br><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">del</span> t.value  <span class="hljs-comment"># 试图删除属性，失败</span><br>AttributeError: can<span class="hljs-string">&#x27;t delete attribute</span><br><span class="hljs-string"></span><br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><code class="hljs python">可读、可修改、可删除的属性。<br><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">class</span> <span class="hljs-title class_">Test</span>:<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self, value</span>):<br>        self.__value = value<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__get</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-keyword">return</span> self.__value<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__set</span>(<span class="hljs-params">self, v</span>):<br>        self.__value = v<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__del</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-keyword">del</span> self.__value<br><br>    value = <span class="hljs-built_in">property</span>(__get, __<span class="hljs-built_in">set</span>, __<span class="hljs-keyword">del</span>)<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">show</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-built_in">print</span>(self.__value)<br><span class="hljs-meta">&gt;&gt;&gt; </span>t = Test(<span class="hljs-number">3</span>)<br><span class="hljs-meta">&gt;&gt;&gt; </span>t.show()<br><span class="hljs-number">3</span><br><span class="hljs-meta">&gt;&gt;&gt; </span>t.value<br><span class="hljs-number">3</span><br><span class="hljs-meta">&gt;&gt;&gt; </span>t.value = <span class="hljs-number">5</span><br><span class="hljs-meta">&gt;&gt;&gt; </span>t.show()<br><span class="hljs-number">5</span><br><span class="hljs-meta">&gt;&gt;&gt; </span>t.value<br><span class="hljs-number">5</span><br><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">del</span> t.value            <span class="hljs-comment"># 删除属性</span><br><span class="hljs-meta">&gt;&gt;&gt; </span>t.value                <span class="hljs-comment"># 对应的私有数据成员已删除</span><br>AttributeError: <span class="hljs-string">&#x27;Test&#x27;</span> <span class="hljs-built_in">object</span> has no attribute <span class="hljs-string">&#x27;_Test__value&#x27;</span><br><span class="hljs-meta">&gt;&gt;&gt; </span>t.show()<br>AttributeError: <span class="hljs-string">&#x27;Test&#x27;</span> <span class="hljs-built_in">object</span> has no attribute <span class="hljs-string">&#x27;_Test__value&#x27;</span><br><span class="hljs-meta">&gt;&gt;&gt; </span>t.value = <span class="hljs-number">1</span>            <span class="hljs-comment"># 为对象动态增加属性和对应的私有数据成员</span><br><span class="hljs-meta">&gt;&gt;&gt; </span>t.show()<br><span class="hljs-number">1</span><br><span class="hljs-meta">&gt;&gt;&gt; </span>t.value<br><span class="hljs-number">1</span><br><br></code></pre></td></tr></table></figure><p>下面的代码定义了一个矩形类，支持设置矩形的宽度和高度以及获取矩形的宽度、高度和面积，除了本节已经介绍过的属性定义方式，还演示了另一种定义属性的方式</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Rectangle</span>:<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self, w, h</span>):        <span class="hljs-comment"># 构造方法，名字是固定的</span><br>        self.width = w               <span class="hljs-comment"># 调用属性的setter方法进行赋值</span><br>        self.height = h<br><br><span class="hljs-meta">    @property</span><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">width</span>(<span class="hljs-params">self</span>):                 <span class="hljs-comment"># 读取属性的值时，自动调用这个方法</span><br>        <span class="hljs-keyword">return</span> self.__width<br><br><span class="hljs-meta">    @width.setter</span><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">width</span>(<span class="hljs-params">self, w</span>):              <span class="hljs-comment"># 修改属性的值时，自动调用这个方法</span><br>        <span class="hljs-keyword">assert</span> <span class="hljs-built_in">isinstance</span>(w, (<span class="hljs-built_in">int</span>,<span class="hljs-built_in">float</span>)) <span class="hljs-keyword">and</span> w&gt;<span class="hljs-number">0</span>, <span class="hljs-string">&#x27;矩形宽度必须大于0&#x27;</span><br>        self.__width = w<br><br><span class="hljs-meta">    @width.deleter</span><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">width</span>(<span class="hljs-params">self</span>):                 <span class="hljs-comment"># 删除属性时，自动调用这个方法</span><br>        <span class="hljs-keyword">del</span> self.__width<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__get_height</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-keyword">return</span> self.__height<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__set_height</span>(<span class="hljs-params">self, h</span>):<br>        <span class="hljs-keyword">assert</span> <span class="hljs-built_in">isinstance</span>(h, (<span class="hljs-built_in">int</span>,<span class="hljs-built_in">float</span>)) <span class="hljs-keyword">and</span> h&gt;<span class="hljs-number">0</span>, <span class="hljs-string">&#x27;矩形宽度必须大于0&#x27;</span><br>        self.__height = h<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__del_height</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-keyword">del</span> self.__height<br><br>    <span class="hljs-comment"># 使用property()函数定义属性</span><br>    <span class="hljs-comment"># 分别设置读取、修改、删除时调用的方法</span><br>    height = <span class="hljs-built_in">property</span>(__get_height, __set_height, __del_height)<br><br><span class="hljs-meta">    @property</span><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">area</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-keyword">return</span> self.__width * self.__height<br><br>r1 = Rectangle(<span class="hljs-number">3</span>, <span class="hljs-number">5</span>)<br><span class="hljs-built_in">print</span>(r1.area)<br>r2 = Rectangle(<span class="hljs-number">4</span>, <span class="hljs-number">6</span>)<br>r2.width = <span class="hljs-number">5</span><br>r2.height = <span class="hljs-number">7</span><br><span class="hljs-built_in">print</span>(r2.area)<br><br></code></pre></td></tr></table></figure><h4 id="（3）继承"><a href="#（3）继承" class="headerlink" title="（3）继承"></a><strong><font color="red">（3）继承</font></strong></h4><ul><li>继承是用来实现代码复用和设计复用的机制，是面向对象程序设计的重要特性之一。设计一个新类时，如果可以继承一个已有的设计良好的类然后进行二次开发，无疑会大幅度减少开发工作量。</li><li>在继承关系中，已有的、设计好的类称为父类或基类，新设计的类称为子类或派生类。派生类可以继承父类的公有成员，但是不能继承其私有成员。如果需要在派生类中调用基类的方法，可以使用内置函数super()或者通过“基类名.方法名()”的方式来实现这一目的。</li><li>Python支持多继承，如果父类中有相同的方法名，而在子类中使用时没有指定父类名，则Python解释器将从左向右按顺序进行搜索。</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><code class="hljs python">在派生类中调用基类方法。<br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Person</span>(<span class="hljs-title class_ inherited__">object</span>): <br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self, name=<span class="hljs-string">&#x27;&#x27;</span>, age=<span class="hljs-number">20</span>, sex=<span class="hljs-string">&#x27;man&#x27;</span></span>):<br>        <span class="hljs-comment"># 通过调用方法进行初始化，这样可以对参数进行更好地控制</span><br>        self.setName(name)<br>        self.setAge(age)<br>        self.setSex(sex)<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">setName</span>(<span class="hljs-params">self, name</span>):<br>        <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> <span class="hljs-built_in">isinstance</span>(name, <span class="hljs-built_in">str</span>):<br>            <span class="hljs-keyword">raise</span> Exception(<span class="hljs-string">&#x27;name must be string.&#x27;</span>)<br>        self.__name = name<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">setAge</span>(<span class="hljs-params">self, age</span>):<br>        <span class="hljs-keyword">if</span> <span class="hljs-built_in">type</span>(age) != <span class="hljs-built_in">int</span>:<br>            <span class="hljs-keyword">raise</span> Exception(<span class="hljs-string">&#x27;age must be integer.&#x27;</span>)<br>        self.__age = age<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">setSex</span>(<span class="hljs-params">self, sex</span>):<br>        <span class="hljs-keyword">if</span> sex <span class="hljs-keyword">not</span> <span class="hljs-keyword">in</span> (<span class="hljs-string">&#x27;man&#x27;</span>, <span class="hljs-string">&#x27;woman&#x27;</span>):<br>            <span class="hljs-keyword">raise</span> Exception(<span class="hljs-string">&#x27;sex must be &quot;man&quot; or &quot;woman&quot;&#x27;</span>)<br>        self.__sex = sex<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">show</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-built_in">print</span>(self.__name, self.__age, self.__sex, sep=<span class="hljs-string">&#x27;\n&#x27;</span>)<br><br><span class="hljs-comment"># 派生类</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Teacher</span>(<span class="hljs-title class_ inherited__">Person</span>):<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self, name=<span class="hljs-string">&#x27;&#x27;</span>, age=<span class="hljs-number">30</span>, sex=<span class="hljs-string">&#x27;man&#x27;</span>, department=<span class="hljs-string">&#x27;Computer&#x27;</span></span>):<br>        <span class="hljs-comment"># 调用基类构造方法初始化基类的私有数据成员</span><br>        <span class="hljs-built_in">super</span>(Teacher, self).__init__(name, age, sex)<br>        <span class="hljs-comment"># 也可以这样初始化基类的私有数据成员</span><br>        <span class="hljs-comment"># Person.__init__(self, name, age, sex)</span><br>        <span class="hljs-comment"># 调用自己的方法初始化派生类的数据成员</span><br>        self.setDepartment(department)<br><br>    <span class="hljs-comment"># 在派生类中新增加的方法</span><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">setDepartment</span>(<span class="hljs-params">self, department</span>):<br>        <span class="hljs-keyword">if</span> <span class="hljs-built_in">type</span>(department) != <span class="hljs-built_in">str</span>:<br>            <span class="hljs-keyword">raise</span> Exception(<span class="hljs-string">&#x27;department must be a string.&#x27;</span>)<br>        self.__department = department<br><br>    <span class="hljs-comment"># 覆盖了从父类中继承来的方法</span><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">show</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-comment"># 先调用父类的同名方法，显示从父类中继承来的数据成员</span><br>        <span class="hljs-built_in">super</span>(Teacher, self).show()<br>        <span class="hljs-comment"># 再显示派生类中的私有数据成员</span><br>        <span class="hljs-built_in">print</span>(self.__department)<br><br><span class="hljs-keyword">if</span> __name__ ==<span class="hljs-string">&#x27;__main__&#x27;</span>:<br>    <span class="hljs-comment"># 创建基类对象</span><br>    zhangsan = Person(<span class="hljs-string">&#x27;Zhang San&#x27;</span>, <span class="hljs-number">19</span>, <span class="hljs-string">&#x27;man&#x27;</span>)<br>    zhangsan.show()<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;=&#x27;</span>*<span class="hljs-number">30</span>)<br><br>    <span class="hljs-comment"># 创建派生类对象</span><br>    lisi = Teacher(<span class="hljs-string">&#x27;Li si&#x27;</span>, <span class="hljs-number">32</span>, <span class="hljs-string">&#x27;man&#x27;</span>, <span class="hljs-string">&#x27;Math&#x27;</span>)<br>    lisi.show()<br>    <span class="hljs-comment"># 调用继承的方法修改年龄</span><br>    lisi.setAge(<span class="hljs-number">40</span>)<br>    lisi.show()<br><br></code></pre></td></tr></table></figure><h4 id="（4）特殊方法"><a href="#（4）特殊方法" class="headerlink" title="（4）特殊方法"></a><strong><font color="red">（4）特殊方法</font></strong></h4><p>Python类有大量的特殊方法，其中比较常见的是构造函数和析构方法，除此之外，Python还支持大量的特殊方法，运算符重载就是通过重写特殊方法实现的。</p><p>Python中类的构造方法是__init__()，一般用来为数据成员设置初值或进行其他必要的初始化工作，在创建对象时被自动调用和执行，建议所有的数据成员都在构造方法中定义和初始化。如果用户没有设计构造方法，Python将提供一个默认的构造方法用来进行必要的初始化工作。</p><p>Python中类的析构方法是__del__()，一般用来释放对象占用的资源，在Python删除对象和收回对象空间时被自动调用和执行。如果用户没有编写析构方法，Python将提供一个默认的析构方法进行必要的清理工作</p><table><thead><tr><th><strong>方法</strong></th><th><strong>功能说明</strong></th></tr></thead><tbody><tr><td>_<em>new</em>_()</td><td>类的静态方法，用于确定是否要创建对象</td></tr><tr><td><strong>init</strong>()</td><td>构造方法，创建对象时自动调用</td></tr><tr><td><strong>del</strong>()</td><td>析构方法，释放对象时自动调用</td></tr><tr><td><strong>add</strong>()</td><td>+</td></tr><tr><td><strong>sub</strong>()</td><td>-</td></tr><tr><td><strong>mul</strong>()</td><td>*</td></tr><tr><td><strong>truediv</strong>()</td><td>/</td></tr><tr><td><strong>floordiv</strong>()</td><td>//</td></tr><tr><td><strong>mod</strong>()</td><td>%</td></tr><tr><td><strong>pow</strong>()</td><td>**</td></tr><tr><td><strong>eq</strong>()、 <strong>ne</strong>()、<strong>lt</strong>()、 <strong>le</strong>()、<strong>gt</strong>()、 <strong>ge</strong>()</td><td>==、 !=、  &lt;、 &lt;=、  &gt;、 &gt;=</td></tr><tr><td><strong>lshift</strong>()、<strong>rshift</strong>()</td><td>&lt;&lt;、&gt;&gt;</td></tr><tr><td><strong>and</strong>()、<strong>or</strong>()、<strong>invert</strong>()、<strong>xor</strong>()</td><td>&amp;、|、  ~、^</td></tr></tbody></table><table><thead><tr><th><strong>方法</strong></th><th><strong>功能说明</strong></th></tr></thead><tbody><tr><td><strong>iadd</strong>()、<strong>isub</strong>()</td><td>+=、-=，很多其他运算符也有与之对应的复合赋值运算符</td></tr><tr><td><strong>pos</strong>()</td><td>一元运算符+，正号</td></tr><tr><td><strong>neg</strong>()</td><td>一元运算符-，负号</td></tr><tr><td><strong>contains</strong>  ()</td><td>与成员测试运算符in对应</td></tr><tr><td><strong>radd</strong>()、<strong>rsub</strong></td><td>反射加法、反射减法，一般与普通加法和减法具有相同的功能，但操作数的位置或顺序相反，很多其他运算符也有与之对应的反射运算符</td></tr><tr><td><strong>abs</strong>()</td><td>与内置函数abs()对应</td></tr><tr><td><strong>bool</strong>()</td><td>与内置函数bool()对应，要求该方法必须返回True或False</td></tr><tr><td><strong>bytes</strong>()</td><td>与内置函数bytes()对应</td></tr><tr><td><strong>complex</strong>()</td><td>与内置函数complex()对应，要求该方法必须返回复数</td></tr><tr><td><strong>dir</strong>()</td><td>与内置函数dir()对应</td></tr><tr><td><strong>divmod</strong>()</td><td>与内置函数divmod()对应</td></tr><tr><td><strong>float</strong>()</td><td>与内置函数float()对应，要求该该方法必须返回实数</td></tr><tr><td><strong>hash</strong>()</td><td>与内置函数hash()对应</td></tr><tr><td><strong>int</strong>()</td><td>与内置函数int()对应，要求该方法必须返回整数</td></tr></tbody></table><table><thead><tr><th><strong>方法</strong></th><th><strong>功能说明</strong></th></tr></thead><tbody><tr><td><strong>len</strong>()</td><td>与内置函数len()对应</td></tr><tr><td><strong>next</strong>()</td><td>与内置函数next()对应</td></tr><tr><td><strong>reduce</strong>()</td><td>提供对reduce()函数的支持</td></tr><tr><td><strong>reversed</strong>()</td><td>与内置函数reversed()对应</td></tr><tr><td><strong>round</strong>()</td><td>对内置函数round()对应</td></tr><tr><td><strong>str</strong>()</td><td>与内置函数str()对应，要求该方法必须返回str类型的数据</td></tr><tr><td><strong>repr</strong>()</td><td>打印、转换，要求该方法必须返回str类型的数据</td></tr><tr><td><strong>getitem</strong>()</td><td>按照索引获取值</td></tr><tr><td><strong>setitem</strong>()</td><td>按照索引赋值</td></tr><tr><td><strong>delattr</strong>()</td><td>删除对象的指定属性</td></tr><tr><td><strong>getattr</strong>()</td><td>获取对象指定属性的值，对应成员访问运算符“.”</td></tr></tbody></table><table><thead><tr><th><strong>方法</strong></th><th><strong>功能说明</strong></th></tr></thead><tbody><tr><td><strong>getattribute</strong>()</td><td>获取对象指定属性的值，如果同时定义了该方法与__getattr__()，那么__getattr__()将不会被调用，除非在__getattribute__()中显式调用__getattr__()或者抛出AttributeError异常</td></tr><tr><td><strong>setattr</strong>()</td><td>设置对象指定属性的值</td></tr><tr><td><strong>base</strong></td><td>该类的基类</td></tr><tr><td><strong>class</strong></td><td>返回对象所属的类</td></tr><tr><td><strong>dict</strong></td><td>对象所包含的属性与值的字典</td></tr><tr><td><strong>subclasses</strong>()</td><td>返回该类的所有子类</td></tr><tr><td><strong>call</strong>()</td><td>包含该特殊方法的类的实例可以像函数一样调用</td></tr><tr><td><strong>get</strong>()</td><td>定义了这三个特殊方法中任何一个的类称作描述符（descriptor），描述符对象一般作为其他类的属性来使用，这三个方法分别在获取属性、修改属性值或删除属性时被调用</td></tr><tr><td><strong>set</strong>()</td><td></td></tr><tr><td><strong>delete</strong>()</td><td></td></tr></tbody></table><p>•下面的代码，Demo类的第一次定义中没有实现特殊方法__add__()，所以该类的对象不支持加号运算符。而第二次实现的Demo类中实现了特殊方法__add__()，所以该类的对象支持加号运算符，但是具体如何支持，进行加法运算时具体做什么，最终还是由该方法中的代码决定的。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">class</span> <span class="hljs-title class_">Demo</span>:<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self, value</span>):<br>        self.__value = value<br><br><span class="hljs-meta">&gt;&gt;&gt; </span>d = Demo(<span class="hljs-number">3</span>)<br><span class="hljs-meta">&gt;&gt;&gt; </span>d + <span class="hljs-number">3</span><br>TypeError: unsupported operand <span class="hljs-built_in">type</span>(s) <span class="hljs-keyword">for</span> +: <span class="hljs-string">&#x27;Demo&#x27;</span> <span class="hljs-keyword">and</span> <span class="hljs-string">&#x27;int&#x27;</span><br><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">class</span> <span class="hljs-title class_">Demo</span>:<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self, value</span>):<br>        self.__value = value<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__add__</span>(<span class="hljs-params">self, anotherValue</span>):<br>        <span class="hljs-keyword">return</span> self.__value + anotherValue<br><br><span class="hljs-meta">&gt;&gt;&gt; </span>dd = Demo(<span class="hljs-number">3</span>)<br><span class="hljs-meta">&gt;&gt;&gt; </span>dd + <span class="hljs-number">5</span><br><span class="hljs-number">8</span><br><br></code></pre></td></tr></table></figure><h4 id="（5）综合案例"><a href="#（5）综合案例" class="headerlink" title="（5）综合案例"></a><strong><font color="red">（5）综合案例</font></strong></h4><h3 id="参考文献"><a href="#参考文献" class="headerlink" title="参考文献"></a>参考文献</h3><p>[1] 董付国 Python程序设计基础与应用第2版</p><p>[2] 林子雨 Python程序设计基础教程</p><p>[3] 牛客网</p>]]></content>
    
    
    <categories>
      
      <category>python</category>
      
    </categories>
    
    
    <tags>
      
      <tag>python</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>python_exp</title>
    <link href="/2023/03/22/python-exp/index/"/>
    <url>/2023/03/22/python-exp/index/</url>
    
    <content type="html"><![CDATA[<h1 id="python刷题"><a href="#python刷题" class="headerlink" title="python刷题"></a>python刷题</h1><h2 id="（一）入门篇"><a href="#（一）入门篇" class="headerlink" title="（一）入门篇"></a>（一）入门篇</h2><h2 id="1-NP1-NP103"><a href="#1-NP1-NP103" class="headerlink" title="1 NP1-NP103"></a>1 NP1-NP103</h2><h2 id="列表"><a href="#列表" class="headerlink" title="列表"></a>列表</h2><h4 id="NP16-发送offer"><a href="#NP16-发送offer" class="headerlink" title="NP16 发送offer"></a>NP16 发送offer</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs python">描述<br>某公司在面试结束后，创建了一个依次包含字符串 <span class="hljs-string">&#x27;Allen&#x27;</span> 和 <span class="hljs-string">&#x27;Tom&#x27;</span> 的列表offer_list，作为通过面试的名单。<br>请你依次对列表中的名字发送类似 <span class="hljs-string">&#x27;Allen, you have passed our interview and will soon become a member of our company.&#x27;</span> 的句子。<br>但由于Tom有了其他的选择，没有确认这个offer，HR选择了正好能够确认这个offer的Andy，所以请把列表offer_list中 <span class="hljs-string">&#x27;Tom&#x27;</span> 的名字换成 <span class="hljs-string">&#x27;Andy&#x27;</span> ，<br>再依次发送类似 <span class="hljs-string">&#x27;Andy, welcome to join us!&#x27;</span> 的句子。<br>输入描述：<br>无<br>输出描述：<br>按题目描述进行输出即可。<br>Allen, you have passed our interview <span class="hljs-keyword">and</span> will soon become a member of our company.<br>Tom, you have passed our interview <span class="hljs-keyword">and</span> will soon become a member of our company.<br>Allen, welcome to join us!<br>Andy, welcome to join us!<br><br>代码：<br>offer_list=[<span class="hljs-string">&#x27;Allen&#x27;</span>,<span class="hljs-string">&#x27;Tom&#x27;</span>]<br>end=<span class="hljs-string">&#x27;, you have passed our interview and will soon become a member of our company.&#x27;</span><br>end1=<span class="hljs-string">&#x27;, welcome to join us!&#x27;</span><br><span class="hljs-built_in">print</span>(offer_list[<span class="hljs-number">0</span>]+end)<br><span class="hljs-built_in">print</span>(offer_list[<span class="hljs-number">1</span>]+end)<br><span class="hljs-built_in">print</span>(offer_list[<span class="hljs-number">0</span>]+end1)<br>offer_list[<span class="hljs-number">1</span>]=<span class="hljs-string">&#x27;Andy&#x27;</span><br><span class="hljs-built_in">print</span>(offer_list[<span class="hljs-number">1</span>]+end1)<br></code></pre></td></tr></table></figure><h4 id="NP17-生成列表"><a href="#NP17-生成列表" class="headerlink" title="NP17 生成列表"></a>NP17 生成列表</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs python">描述<br>一串连续的数据用什么记录最合适，牛牛认为在Python中非列表（<span class="hljs-built_in">list</span>）莫属了。现输入牛牛朋友们的名字，请使用<span class="hljs-built_in">list</span>函数与split函数将它们封装成列表，再整个输出列表。<br>输入描述：<br>输入一串字符串，它们之间通过空格间隔开。<br>输出描述：<br>输出封装后的列表。<br>示例<span class="hljs-number">1</span><br>输入：NiuNiu NiuMei NiuNeng<br>输出：[<span class="hljs-string">&#x27;NiuNiu&#x27;</span>, <span class="hljs-string">&#x27;NiuMei&#x27;</span>, <span class="hljs-string">&#x27;NiuNeng&#x27;</span>]<br><br>x=<span class="hljs-built_in">input</span>()<br><span class="hljs-built_in">str</span>=x.split()<br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">list</span>(<span class="hljs-built_in">str</span>))<br></code></pre></td></tr></table></figure><h4 id="NP18-生成数字列表"><a href="#NP18-生成数字列表" class="headerlink" title="NP18  生成数字列表"></a>NP18  <strong>生成数字列表</strong></h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs python">描述<br>牛牛在牛客网系统录入了一连串数字，数字之间依靠逗号隔开，你能帮助他将这些数字存储在列表中吗，列表元素以<span class="hljs-built_in">int</span>的形式。<br>输入描述：<br>输入一行整数，数字之间以空格间隔。<br>输出描述：<br>输出这些数字组成的完整列表。<br>示例<span class="hljs-number">1</span><br>输入：<span class="hljs-number">1</span> <span class="hljs-number">2</span> <span class="hljs-number">3</span> <span class="hljs-number">4</span> <span class="hljs-number">5</span><br>输出：[<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>]<br><br>num_list=(<span class="hljs-built_in">input</span>())<br><span class="hljs-built_in">list</span>=num_list.split()<br>list1=[<span class="hljs-built_in">int</span>(i) <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">list</span>]<br><span class="hljs-built_in">print</span>(list1)<br></code></pre></td></tr></table></figure><h4 id="NP19-列表的长度"><a href="#NP19-列表的长度" class="headerlink" title="NP19 列表的长度"></a>NP19 列表的长度</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs python">描述<br>牛牛学会了使用<span class="hljs-built_in">list</span>函数与split函数将输入的连续字符串封装成列表，你能够帮他使用<span class="hljs-built_in">len</span>函数统计一些公输入了多少字符串，列表中有多少元素吗？<br>输入描述：<br>输入一行多个字符串，字符串之间通过空格间隔。<br>输出描述：<br>输出列表的长度。<br>示例<span class="hljs-number">1</span><br>输入：NiuNiu NiuMei NiuNeng<br>输出：<span class="hljs-number">3</span><br><br><span class="hljs-built_in">str</span>=<span class="hljs-built_in">input</span>()<br>list1=<span class="hljs-built_in">list</span>(<span class="hljs-built_in">str</span>.split())<br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">len</span>(list1))<br></code></pre></td></tr></table></figure><h4 id="NP20-增加派对名单（一）"><a href="#NP20-增加派对名单（一）" class="headerlink" title="NP20 增加派对名单（一）"></a>NP20 <strong>增加派对名单（一）</strong></h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs python">描述<br>为庆祝驼瑞驰在牛爱网找到合适的对象，驼瑞驰通过输入的多个连续字符串创建了一个列表作为派对邀请名单，在检查的时候发现少了他最好的朋友“Allen”的名字，你能使用append函数将这个名字加到列表末尾吗？添加完成请输出完整列表。<br>输入描述：<br>输入多个连续的字符串表示名字，以空格间隔。<br>输出描述：<br>输出添加完Allen后的完整列表。<br>示例<span class="hljs-number">1</span><br>输入：Niuniu Niumei Lucy Niuneng<br>输出：[<span class="hljs-string">&#x27;Niuniu&#x27;</span>, <span class="hljs-string">&#x27;Niumei&#x27;</span>, <span class="hljs-string">&#x27;Lucy&#x27;</span>, <span class="hljs-string">&#x27;Niuneng&#x27;</span>, <span class="hljs-string">&#x27;Allen&#x27;</span>]<br><br><br></code></pre></td></tr></table></figure><h4 id="NP21"><a href="#NP21" class="headerlink" title="NP21"></a>NP21</h4><h3 id=""><a href="#" class="headerlink" title=""></a></h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;hello&#x27;</span>)<br></code></pre></td></tr></table></figure><h4 id="NP22"><a href="#NP22" class="headerlink" title="NP22"></a>NP22</h4><h3 id="-1"><a href="#-1" class="headerlink" title=""></a></h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;hello&#x27;</span>)<br></code></pre></td></tr></table></figure><h4 id="NP23"><a href="#NP23" class="headerlink" title="NP23"></a>NP23</h4><h3 id="-2"><a href="#-2" class="headerlink" title=""></a></h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;hello&#x27;</span>)<br></code></pre></td></tr></table></figure><h4 id="NP24"><a href="#NP24" class="headerlink" title="NP24"></a>NP24</h4><h3 id="-3"><a href="#-3" class="headerlink" title=""></a></h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;hello&#x27;</span>)<br></code></pre></td></tr></table></figure><h4 id="NP25"><a href="#NP25" class="headerlink" title="NP25"></a>NP25</h4><h3 id="-4"><a href="#-4" class="headerlink" title=""></a></h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;hello&#x27;</span>)<br></code></pre></td></tr></table></figure><h4 id="NP26"><a href="#NP26" class="headerlink" title="NP26"></a>NP26</h4><h3 id="-5"><a href="#-5" class="headerlink" title=""></a></h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;hello&#x27;</span>)<br></code></pre></td></tr></table></figure><h4 id="NP27"><a href="#NP27" class="headerlink" title="NP27"></a>NP27</h4><h3 id="-6"><a href="#-6" class="headerlink" title=""></a></h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;hello&#x27;</span>)<br></code></pre></td></tr></table></figure><h4 id="NP28"><a href="#NP28" class="headerlink" title="NP28"></a>NP28</h4><h3 id="-7"><a href="#-7" class="headerlink" title=""></a></h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;hello&#x27;</span>)<br></code></pre></td></tr></table></figure><h4 id="NP29"><a href="#NP29" class="headerlink" title="NP29"></a>NP29</h4><h3 id="-8"><a href="#-8" class="headerlink" title=""></a></h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;hello&#x27;</span>)<br></code></pre></td></tr></table></figure><h4 id="NP30"><a href="#NP30" class="headerlink" title="NP30"></a>NP30</h4><h3 id="-9"><a href="#-9" class="headerlink" title=""></a></h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;hello&#x27;</span>)<br></code></pre></td></tr></table></figure><h4 id="NP31"><a href="#NP31" class="headerlink" title="NP31"></a>NP31</h4><h3 id="-10"><a href="#-10" class="headerlink" title=""></a></h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;hello&#x27;</span>)<br></code></pre></td></tr></table></figure><h4 id="NP32"><a href="#NP32" class="headerlink" title="NP32"></a>NP32</h4><h3 id="-11"><a href="#-11" class="headerlink" title=""></a></h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;hello&#x27;</span>)<br></code></pre></td></tr></table></figure><h4 id="NP33"><a href="#NP33" class="headerlink" title="NP33"></a>NP33</h4><h3 id="-12"><a href="#-12" class="headerlink" title=""></a></h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;hello&#x27;</span>)<br></code></pre></td></tr></table></figure><h4 id="NP34"><a href="#NP34" class="headerlink" title="NP34"></a>NP34</h4><h3 id="-13"><a href="#-13" class="headerlink" title=""></a></h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;hello&#x27;</span>)<br></code></pre></td></tr></table></figure><h4 id="NP35"><a href="#NP35" class="headerlink" title="NP35"></a>NP35</h4><h3 id="-14"><a href="#-14" class="headerlink" title=""></a></h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;hello&#x27;</span>)<br></code></pre></td></tr></table></figure><h4 id="NP36"><a href="#NP36" class="headerlink" title="NP36"></a>NP36</h4><h3 id="-15"><a href="#-15" class="headerlink" title=""></a></h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;hello&#x27;</span>)<br></code></pre></td></tr></table></figure><h4 id="NP37"><a href="#NP37" class="headerlink" title="NP37"></a>NP37</h4><h3 id="-16"><a href="#-16" class="headerlink" title=""></a></h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;hello&#x27;</span>)<br></code></pre></td></tr></table></figure><h4 id="NP38"><a href="#NP38" class="headerlink" title="NP38"></a>NP38</h4><h3 id="-17"><a href="#-17" class="headerlink" title=""></a></h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;hello&#x27;</span>)<br></code></pre></td></tr></table></figure><h4 id="NP39"><a href="#NP39" class="headerlink" title="NP39"></a>NP39</h4><h3 id="-18"><a href="#-18" class="headerlink" title=""></a></h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;hello&#x27;</span>)<br></code></pre></td></tr></table></figure><h4 id="NP40"><a href="#NP40" class="headerlink" title="NP40"></a>NP40</h4><h3 id="-19"><a href="#-19" class="headerlink" title=""></a></h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;hello&#x27;</span>)<br></code></pre></td></tr></table></figure><h4 id="NP41"><a href="#NP41" class="headerlink" title="NP41"></a>NP41</h4><h3 id="-20"><a href="#-20" class="headerlink" title=""></a></h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;hello&#x27;</span>)<br></code></pre></td></tr></table></figure><h4 id="NP42"><a href="#NP42" class="headerlink" title="NP42"></a>NP42</h4><h3 id="-21"><a href="#-21" class="headerlink" title=""></a></h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;hello&#x27;</span>)<br></code></pre></td></tr></table></figure><h4 id="NP43"><a href="#NP43" class="headerlink" title="NP43"></a>NP43</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">@FileName：NP43.py\n</span><br><span class="hljs-string">@Description：\n</span><br><span class="hljs-string">@Author：YJ\n</span><br><span class="hljs-string">@Time：2023/3/16 10:24\n</span><br><span class="hljs-string">描述</span><br><span class="hljs-string">Python的条件语句依靠将运算结果转变成布尔值后进行判断，然后分支，</span><br><span class="hljs-string">如果我们直接判断布尔值会怎么样呢？输入布尔变量，使用条件语句判断，</span><br><span class="hljs-string">如果为真则输出&quot;Hello World!&quot;，否则输出&quot;Erros!&quot;。</span><br><span class="hljs-string">输入描述：</span><br><span class="hljs-string">输入0 或者 1。</span><br><span class="hljs-string">输出描述：</span><br><span class="hljs-string">输出&quot;Hello World!&quot;或者&quot;Erros!&quot;。</span><br><span class="hljs-string">示例1</span><br><span class="hljs-string">输入：</span><br><span class="hljs-string">1</span><br><span class="hljs-string">复制</span><br><span class="hljs-string">输出：</span><br><span class="hljs-string">Hello World!</span><br><span class="hljs-string">&quot;&quot;&quot;</span><br>x=<span class="hljs-built_in">int</span>(<span class="hljs-built_in">input</span>())<br><span class="hljs-keyword">if</span> x==<span class="hljs-number">1</span>:<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;Hello World!&#x27;</span>)<br><span class="hljs-keyword">else</span>:<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;Erros!&#x27;</span>)<br></code></pre></td></tr></table></figure><h2 id="（二）算法篇"><a href="#（二）算法篇" class="headerlink" title="（二）算法篇"></a>（二）算法篇</h2><h3 id="（1）链表"><a href="#（1）链表" class="headerlink" title="（1）链表"></a>（1）链表</h3><h4 id="1、反转链表"><a href="#1、反转链表" class="headerlink" title="1、反转链表"></a>1、反转链表</h4><h5 id="描述"><a href="#描述" class="headerlink" title="描述"></a>描述</h5><p>给定一个单链表的头结点pHead(该头节点是有值的，比如在下图，它的val是1)，长度为n，反转该链表后，返回新链表的表头。</p><p>数据范围： 0≤<em>n</em>≤1000</p><p>要求：空间复杂度 <em>O</em>(1) ，时间复杂度 <em>O</em>(<em>n</em>) 。</p><p>如当输入链表{1,2,3}时，</p><p>经反转后，原链表变为{3,2,1}，所以对应的输出为{3,2,1}。</p><p>以上转换过程如下图所示：</p><p><img src="https://uploadfiles.nowcoder.com/images/20211014/423483716_1634206291971/4A47A0DB6E60853DEDFCFDF08A5CA249" srcset="/img/loading.gif" lazyload alt="img"></p><h5 id="示例1"><a href="#示例1" class="headerlink" title="示例1"></a>示例1</h5><p>输入：</p><figure class="highlight dust"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs dust"><span class="hljs-template-variable">&#123;1,2,3&#125;</span><br></code></pre></td></tr></table></figure><p>复制</p><p>返回值：</p><figure class="highlight dust"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs dust"><span class="hljs-template-variable">&#123;3,2,1&#125;</span><br></code></pre></td></tr></table></figure><p>复制</p><h5 id="示例2"><a href="#示例2" class="headerlink" title="示例2"></a>示例2</h5><p>输入：</p><figure class="highlight dust"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs dust"><span class="hljs-template-variable">&#123;&#125;</span><br></code></pre></td></tr></table></figure><p>复制</p><p>返回值：</p><figure class="highlight dust"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs dust"><span class="hljs-template-variable">&#123;&#125;</span><br></code></pre></td></tr></table></figure><p>复制</p><p>说明：</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs">空链表则输出空          <br></code></pre></td></tr></table></figure><h5 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># class ListNode:</span><br><span class="hljs-comment">#     def __init__(self, x):</span><br><span class="hljs-comment">#         self.val = x</span><br><span class="hljs-comment">#         self.next = None</span><br><span class="hljs-comment">#</span><br><span class="hljs-comment"># 代码中的类名、方法名、参数名已经指定，请勿修改，直接返回方法规定的值即可</span><br><span class="hljs-comment">#</span><br><span class="hljs-comment"># </span><br><span class="hljs-comment"># @param head ListNode类 </span><br><span class="hljs-comment"># @return ListNode类</span><br><span class="hljs-comment">#</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span>:<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">ReverseList</span>(<span class="hljs-params">self , head: ListNode</span>) -&gt; ListNode:<br>        <span class="hljs-comment">#处理空链表</span><br>        <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> head:<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">None</span><br>        cur = head<br>        pre = <span class="hljs-literal">None</span><br>        <span class="hljs-keyword">while</span> cur:<br>            <span class="hljs-comment">#断开链表，要记录后续一个</span><br>            temp = cur.<span class="hljs-built_in">next</span><br>            <span class="hljs-comment">#当前的next指向前一个</span><br>            cur.<span class="hljs-built_in">next</span> = pre<br>            <span class="hljs-comment">#前一个更新为当前</span><br>            pre = cur<br>            <span class="hljs-comment">#当前更新为刚刚记录的后一个</span><br>            cur = temp<br>        <span class="hljs-keyword">return</span> pre<br>        <br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>python</category>
      
    </categories>
    
    
    <tags>
      
      <tag>python</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>java</title>
    <link href="/2023/03/17/java/index/"/>
    <url>/2023/03/17/java/index/</url>
    
    <content type="html"><![CDATA[<p>Java</p>]]></content>
    
    
    <categories>
      
      <category>Java</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Java</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Hello World</title>
    <link href="/2023/03/15/hello-world/"/>
    <url>/2023/03/15/hello-world/</url>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo new <span class="hljs-string">&quot;My New Post&quot;</span><br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo server<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo generate<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo deploy<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
    
    
    
  </entry>
  
  
  
  
</search>
